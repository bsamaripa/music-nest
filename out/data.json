{
    "project": {},
    "files": {
        "public/libs/angular/angular.js": {
            "name": "public/libs/angular/angular.js",
            "modules": {
                "ng": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/libs/angular-route/angular-route.js": {
            "name": "public/libs/angular-route/angular-route.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/libs/jquery/dist/jquery.js": {
            "name": "public/libs/jquery/dist/jquery.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/libs/jquery/src/ajax/load.js": {
            "name": "public/libs/jquery/src/ajax/load.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/libs/jquery/src/core/ready.js": {
            "name": "public/libs/jquery/src/core/ready.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/libs/jquery/src/css/defaultDisplay.js": {
            "name": "public/libs/jquery/src/css/defaultDisplay.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/libs/jquery/src/data/accepts.js": {
            "name": "public/libs/jquery/src/data/accepts.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/libs/jquery/src/sizzle/dist/sizzle.js": {
            "name": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "public/libs/jquery/src/offset.js": {
            "name": "public/libs/jquery/src/offset.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "ng": {
            "name": "ng",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "public/libs/angular/angular.js",
            "line": 169,
            "ngdoc": "module",
            "kind": "function",
            "params": [
                {
                    "name": "string",
                    "description": "String to be converted to lowercase.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Lowercased string.",
                "type": "String"
            },
            "example": [
                "\n<example>\n<file name=\"index.html\">\n<div ng-controller=\"Controller\">\n<form novalidate class=\"simple-form\">\nName: <input type=\"text\" ng-model=\"user.name\" /><br />\nE-mail: <input type=\"email\" ng-model=\"user.email\" /><br />\nGender: <input type=\"radio\" ng-model=\"user.gender\" value=\"male\" />male\n<input type=\"radio\" ng-model=\"user.gender\" value=\"female\" />female<br />\n<button ng-click=\"reset()\">RESET</button>\n<button ng-click=\"update(user)\">SAVE</button>\n</form>\n<pre>form = {{user | json}}</pre>\n<pre>master = {{master | json}}</pre>\n</div>\n\n<script>\nfunction Controller($scope) {\n   $scope.master= {};\n\n   $scope.update = function(user) {\n     // Example with 1 argument\n     $scope.master= angular.copy(user);\n   };\n\n   $scope.reset = function() {\n     // Example with 2 arguments\n     angular.copy($scope.master, $scope.user);\n   };\n\n   $scope.reset();\n }\n</script>\n</file>\n</example>"
            ],
            "element": "ANY"
        }
    },
    "classes": {},
    "classitems": [
        {
            "file": "public/libs/angular/angular.js",
            "line": 1,
            "license": "AngularJS v1.2.18\n(c) 2010-2014 Google, Inc. http://angularjs.org\nLicense: MIT",
            "class": ""
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8,
            "description": "This object provides a utility for producing rich Error messages within\nAngular. It can be called as follows:\n\nvar exampleMinErr = minErr('example');\nthrow exampleMinErr('one', 'This {0} is {1}', foo, bar);\n\nThe above creates an instance of minErr in the example namespace. The\nresulting error will have a namespaced error code of example.one.  The\nresulting error will replace {0} with the value of foo, and {1} with the\nvalue of bar. The object is not restricted in the number of arguments it can\ntake.\n\nIf fewer arguments are specified than necessary for interpolation, the extra\ninterpolation markers will be preserved in the final string.\n\nSince data will be parsed statically during a build step, some restrictions\nare applied with respect to how minErr instances are created and called.\nInstances should have names of the form namespaceMinErr for a minErr created\nusing minErr('namespace') . Error codes, namespaces and template strings\nshould all be static strings, not variables or general expressions.",
            "params": [
                {
                    "name": "module",
                    "description": "The namespace to use for the new minErr instance.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "minErr instance",
                "type": "function(code:string, template:string, ...templateArgs): Error"
            },
            "class": ""
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 242,
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 248,
            "description": "IE 11 changed the format of the UserAgent string.\nSee http://msdn.microsoft.com/en-us/library/ms537503.aspx",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 258,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns true if `obj` is an array or array-like object (NodeList, Arguments,\n                  String ...)",
                "type": "Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 354,
            "description": "when using forEach the params are value, key, but it is often useful to have key, value.",
            "params": [
                {
                    "name": "iteratorFn",
                    "description": "",
                    "type": "Function(string, *)"
                }
            ],
            "return": {
                "description": "",
                "type": "Function(*, string)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 363,
            "description": "A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric\ncharacters such as '012ABC'. The reason why we are not using simply a number counter is that\nthe number string gets longer over time, and it can also overflow, where as the nextId\nwill grow much slower, it is a string, and it will never overflow.",
            "return": {
                "description": "an unique alpha-numeric string",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 394,
            "description": "Set or clear the hashkey for an object.",
            "params": [
                {
                    "name": "obj",
                    "description": "object"
                },
                {
                    "name": "h",
                    "description": "the hashkey (!truthy to delete the hashkey)"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 616,
            "description": "Determines if a value is a regular expression object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "Reference to check.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "True if `value` is a `RegExp`.",
                "type": "Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 628,
            "description": "Checks if `obj` is a window object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to check",
                    "type": "*"
                }
            ],
            "return": {
                "description": "True if `obj` is a window obj.",
                "type": "Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 693,
            "params": [
                {
                    "name": "str",
                    "description": "'key1,key2,...'"
                }
            ],
            "return": {
                "description": "in the form of {key1:true, key2:true, ...}",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 727,
            "description": "Determines the number of elements in an array, the number of properties an object has, or\nthe length of a string.\n\nNote: This function is used to augment the Object type in Angular expressions. See\n{@link angular.Object} for more information about Angular arrays.",
            "params": [
                {
                    "name": "obj",
                    "description": "Object, array, or string to inspect.",
                    "type": "Object|Array|string"
                },
                {
                    "name": "ownPropsOnly",
                    "description": "Count only \"own\" properties in an object",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The size of `obj` or `0` if `obj` is neither an object nor an array.",
                "type": "Number"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 908,
            "description": "Creates a shallow copy of an object, an array or a primitive",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1126,
            "return": {
                "description": "Returns the string representation of the element.",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1153,
            "description": "Tries to decode the URI component without throwing an exception.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "str",
                    "description": "value potential URI component to check."
                }
            ],
            "return": {
                "description": "True if `value` can be decoded\nwith the decodeURIComponent function.",
                "type": "Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1170,
            "description": "Parses an escaped url query string into key-value pairs.",
            "return": {
                "description": "",
                "type": "Object.<string,boolean|Array>"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1212,
            "description": "We need our custom method because encodeURIComponent is too aggressive and doesn't follow\nhttp://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\nsegments:\n   segment       = *pchar\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1231,
            "description": "This method is intended for encoding *key* or *value* parts of query component. We need a custom\nmethod because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\nencoded per http://tools.ietf.org/html/rfc3986:\n   query       = *( pchar / \"/\" / \"?\" )\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1470,
            "description": "throw error if the argument is falsy.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1490,
            "description": "throw error if the name given is hasOwnProperty",
            "params": [
                {
                    "name": "name",
                    "description": "the name to test",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "the context in which the name is used, such as module or directive",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1501,
            "description": "Return the value accessible from the object by path. Any undefined traversals are ignored",
            "params": [
                {
                    "name": "obj",
                    "description": "starting object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "path to traverse",
                    "type": "String"
                },
                {
                    "name": "bindFnToScope",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "value as accessible by path",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1528,
            "description": "Return the DOM siblings between the first and last node in the given array.",
            "params": [
                {
                    "name": "array",
                    "description": "like object",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "object containing the elements",
                "type": "DOMElement"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1576,
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1648,
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1651,
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1656,
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 1845,
            "params": [
                {
                    "name": "provider",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "insertMethod",
                    "description": "",
                    "type": "String="
                }
            ],
            "return": {
                "description": "",
                "type": "angular.Module"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 2207,
            "description": "Converts snake_case to camelCase.\nAlso there is special case for Moz prefix starting with upper case letter.",
            "params": [
                {
                    "name": "name",
                    "description": "Name to normalize"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 2731,
            "description": "Properties: writes return selection, reads return first value",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3048,
            "description": "chaining functions",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3072,
            "description": "Computes a hash of an 'obj'.\nHash of a:\n string is string\n number is number as string\n object is either result of calling $$hashKey function on the object or uniquely generated id,\n        that is also assigned to the $$hashKey property of the object.",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "hash string such that the same input will have the same hash string.\n        The resulting string key is in 'type:hashKey' format.",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3102,
            "description": "HashMap which can use objects as keys",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3109,
            "description": "Store key value pair",
            "params": [
                {
                    "name": "key",
                    "description": "key to store can be any type"
                },
                {
                    "name": "value",
                    "description": "value to store can be any type"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3118,
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "the value for the key",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3126,
            "description": "Remove the key/value pair",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3190,
            "ngdoc": "module",
            "name": "auto",
            "description": "Implicit module which gets automatically added to each {@link auto.$injector $injector}.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3235,
            "ngdoc": "service",
            "name": "$injector",
            "kind": "function",
            "description": "`$injector` is used to retrieve object instances as defined by\n{@link auto.$provide provider}, instantiate types, invoke methods,\nand load modules.\n\nThe following always holds true:\n\n```js\n  var $injector = angular.injector();\n  expect($injector.get('$injector')).toBe($injector);\n  expect($injector.invoke(function($injector){\n    return $injector;\n  }).toBe($injector);\n```\n\n# Injection Function Annotation\n\nJavaScript does not have annotations, and annotations are needed for dependency injection. The\nfollowing are all valid ways of annotating function with injection arguments and are equivalent.\n\n```js\n  // inferred (only works if code not minified/obfuscated)\n  $injector.invoke(function(serviceA){});\n\n  // annotated\n  function explicit(serviceA) {};\n  explicit.$inject = ['serviceA'];\n  $injector.invoke(explicit);\n\n  // inline\n  $injector.invoke(['serviceA', function(serviceA){}]);\n```\n\n## Inference\n\nIn JavaScript calling `toString()` on a function returns the function definition. The definition\ncan then be parsed and the function arguments can be extracted. *NOTE:* This does not work with\nminification, and obfuscation tools since these tools change the argument names.\n\n## `$inject` Annotation\nBy adding an `$inject` property onto a function the injection parameters can be specified.\n\n## Inline\nAs an array of injection names, where the last item in the array is the function to call.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3287,
            "ngdoc": "method",
            "name": "$injector#get",
            "description": "Return an instance of the service.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the instance to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The instance.",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3298,
            "ngdoc": "method",
            "name": "$injector#invoke",
            "description": "Invoke the method and supply the method arguments from the `$injector`.",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to invoke. Function parameters are injected according to the\n  {@link guide/di $inject Annotation} rules.",
                    "type": "!Function"
                },
                {
                    "name": "self",
                    "description": "The `this` for the invoked method.",
                    "type": "Object="
                },
                {
                    "name": "locals",
                    "description": "Optional object. If preset then any argument names are read from this\n                        object first, before the `$injector` is consulted.",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "the value returned by the invoked `fn` function.",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3313,
            "ngdoc": "method",
            "name": "$injector#has",
            "description": "Allows the user to query if the particular service exists.",
            "params": [
                {
                    "name": "Name",
                    "description": "of the service to query.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns true if injector has given service.",
                "type": "Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3324,
            "ngdoc": "method",
            "name": "$injector#instantiate",
            "description": "Create a new instance of JS type. The method takes a constructor function, invokes the new\noperator, and supplies all of the arguments to the constructor function as specified by the\nconstructor annotation.",
            "params": [
                {
                    "name": "Type",
                    "description": "Annotated constructor function.",
                    "type": "Function"
                },
                {
                    "name": "locals",
                    "description": "Optional object. If preset then any argument names are read from this\nobject first, before the `$injector` is consulted.",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "new instance of `Type`.",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3338,
            "ngdoc": "method",
            "name": "$injector#annotate",
            "description": "Returns an array of service names which the function is requesting for injection. This API is\nused by the injector to determine which services need to be injected into the function when the\nfunction is invoked. There are three ways in which the function can be annotated with the needed\ndependencies.\n\n# Argument names\n\nThe simplest form is to extract the dependencies from the arguments of the function. This is done\nby converting the function into a string using `toString()` method and extracting the argument\nnames.\n```js\n  // Given\n  function MyController($scope, $route) {\n    // ...\n  }\n\n  // Then\n  expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n```\n\nThis method does not work with code minification / obfuscation. For this reason the following\nannotation strategies are supported.\n\n# The `$inject` property\n\nIf a function has an `$inject` property and its value is an array of strings, then the strings\nrepresent names of services to be injected into the function.\n```js\n  // Given\n  var MyController = function(obfuscatedScope, obfuscatedRoute) {\n    // ...\n  }\n  // Define function dependencies\n  MyController['$inject'] = ['$scope', '$route'];\n\n  // Then\n  expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n```\n\n# The array notation\n\nIt is often desirable to inline Injected functions and that's when setting the `$inject` property\nis very inconvenient. In these situations using the array notation to specify the dependencies in\na way that survives minification is a better choice:\n\n```js\n  // We wish to write this (not minification / obfuscation safe)\n  injector.invoke(function($compile, $rootScope) {\n    // ...\n  });\n\n  // We are forced to write break inlining\n  var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {\n    // ...\n  };\n  tmpFn.$inject = ['$compile', '$rootScope'];\n  injector.invoke(tmpFn);\n\n  // To better support inline function the inline annotation is supported\n  injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {\n    // ...\n  }]);\n\n  // Therefore\n  expect(injector.annotate(\n     ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])\n   ).toEqual(['$compile', '$rootScope']);\n```",
            "params": [
                {
                    "name": "fn",
                    "description": "Function for which dependent service names need to\nbe retrieved as described above.",
                    "type": "Function|Array.<string|Function>"
                }
            ],
            "return": {
                "description": "The names of the services which the function requires.",
                "type": "Array.<string>"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3421,
            "ngdoc": "object",
            "name": "$provide",
            "description": "The {@link auto.$provide $provide} service has a number of methods for registering components\nwith the {@link auto.$injector $injector}. Many of these functions are also exposed on\n{@link angular.Module}.\n\nAn Angular **service** is a singleton object created by a **service factory**.  These **service\nfactories** are functions which, in turn, are created by a **service provider**.\nThe **service providers** are constructor functions. When instantiated they must contain a\nproperty called `$get`, which holds the **service factory** function.\n\nWhen you request a service, the {@link auto.$injector $injector} is responsible for finding the\ncorrect **service provider**, instantiating it and then calling its `$get` **service factory**\nfunction to get the instance of the **service**.\n\nOften services have no configuration options and there is no need to add methods to the service\nprovider.  The provider will be no more than a constructor function with a `$get` property. For\nthese cases the {@link auto.$provide $provide} service has additional helper methods to register\nservices without specifying a provider.\n\n* {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the\n    {@link auto.$injector $injector}\n* {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by\n    providers and services.\n* {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by\n    services, not providers.\n* {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,\n    that will be wrapped in a **service provider** object, whose `$get` property will contain the\n    given factory function.\n* {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`\n    that will be wrapped in a **service provider** object, whose `$get` property will instantiate\n     a new object using the given constructor function.\n\nSee the individual methods for more information and examples.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3461,
            "ngdoc": "method",
            "name": "$provide#provider",
            "description": "Register a **provider function** with the {@link auto.$injector $injector}. Provider functions\nare constructor functions, whose instances are responsible for \"providing\" a factory for a\nservice.\n\nService provider names start with the name of the service they provide followed by `Provider`.\nFor example, the {@link ng.$log $log} service has a provider called\n{@link ng.$logProvider $logProvider}.\n\nService provider objects can have additional methods which allow configuration of the provider\nand its service. Importantly, you can configure what kind of service is created by the `$get`\nmethod, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a\nmethod {@link ng.$logProvider#debugEnabled debugEnabled}\nwhich lets you specify whether the {@link ng.$log $log} service will log debug messages to the\nconsole or not.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the instance. NOTE: the provider will be available under `name +\n                       'Provider'` key.",
                    "type": "String"
                },
                {
                    "name": "provider",
                    "description": "If the provider is:\n\n  - `Object`: then it should have a `$get` method. The `$get` method will be invoked using\n    {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.\n  - `Constructor`: a new instance of the provider will be created using\n    {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.",
                    "type": "(Object|function())"
                }
            ],
            "return": {
                "description": "registered provider instance",
                "type": "Object"
            },
            "example": [
                "\n\nThe following example shows how to create a simple event tracking service and register it using\n{@link auto.$provide#provider $provide.provider()}.\n\n```js\n // Define the eventTracker provider\n function EventTrackerProvider() {\n   var trackingUrl = '/track';\n\n   // A provider method for configuring where the tracked events should been saved\n   this.setTrackingUrl = function(url) {\n     trackingUrl = url;\n   };\n\n   // The service factory function\n   this.$get = ['$http', function($http) {\n     var trackedEvents = {};\n     return {\n       // Call this to track an event\n       event: function(event) {\n         var count = trackedEvents[event] || 0;\n         count += 1;\n         trackedEvents[event] = count;\n         return count;\n       },\n       // Call this to save the tracked events to the trackingUrl\n       save: function() {\n         $http.post(trackingUrl, trackedEvents);\n       }\n     };\n   }];\n }\n\n describe('eventTracker', function() {\n   var postSpy;\n\n   beforeEach(module(function($provide) {\n     // Register the eventTracker provider\n     $provide.provider('eventTracker', EventTrackerProvider);\n   }));\n\n   beforeEach(module(function(eventTrackerProvider) {\n     // Configure eventTracker provider\n     eventTrackerProvider.setTrackingUrl('/custom-track');\n   }));\n\n   it('tracks events', inject(function(eventTracker) {\n     expect(eventTracker.event('login')).toEqual(1);\n     expect(eventTracker.event('login')).toEqual(2);\n   }));\n\n   it('saves to the tracking url', inject(function(eventTracker, $http) {\n     postSpy = spyOn($http, 'post');\n     eventTracker.event('login');\n     eventTracker.save();\n     expect(postSpy).toHaveBeenCalled();\n     expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');\n     expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');\n     expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });\n   }));\n });\n```"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3557,
            "ngdoc": "method",
            "name": "$provide#factory",
            "description": "Register a **service factory**, which will be called to return the service instance.\nThis is short for registering a service where its provider consists of only a `$get` property,\nwhich is the given service factory function.\nYou should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to\nconfigure your service in a provider.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the instance.",
                    "type": "String"
                },
                {
                    "name": "$getFn",
                    "description": "The $getFn for the instance creation. Internally this is a short hand\n                           for `$provide.provider(name, {$get: $getFn})`.",
                    "type": "Function()"
                }
            ],
            "return": {
                "description": "registered provider instance",
                "type": "Object"
            },
            "example": [
                "\nHere is an example of registering a service\n```js\n  $provide.factory('ping', ['$http', function($http) {\n    return function ping() {\n      return $http.send('/ping');\n    };\n  }]);\n```\nYou would then inject and use this service like this:\n```js\n  someModule.controller('Ctrl', ['ping', function(ping) {\n    ping();\n  }]);\n```"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3591,
            "ngdoc": "method",
            "name": "$provide#service",
            "description": "Register a **service constructor**, which will be invoked with `new` to create the service\ninstance.\nThis is short for registering a service where its provider's `$get` property is the service\nconstructor function that will be used to instantiate the service instance.\n\nYou should use {@link auto.$provide#service $provide.service(class)} if you define your service\nas a type/class.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the instance.",
                    "type": "String"
                },
                {
                    "name": "constructor",
                    "description": "A class (constructor function) that will be instantiated.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "registered provider instance",
                "type": "Object"
            },
            "example": [
                "\nHere is an example of registering a service using\n{@link auto.$provide#service $provide.service(class)}.\n```js\n  var Ping = function($http) {\n    this.$http = $http;\n  };\n\n  Ping.$inject = ['$http'];\n\n  Ping.prototype.send = function() {\n    return this.$http.get('/ping');\n  };\n  $provide.service('ping', Ping);\n```\nYou would then inject and use this service like this:\n```js\n  someModule.controller('Ctrl', ['ping', function(ping) {\n    ping.send();\n  }]);\n```"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3632,
            "ngdoc": "method",
            "name": "$provide#value",
            "description": "Register a **value service** with the {@link auto.$injector $injector}, such as a string, a\nnumber, an array, an object or a function.  This is short for registering a service where its\nprovider's `$get` property is a factory function that takes no arguments and returns the **value\nservice**.\n\nValue services are similar to constant services, except that they cannot be injected into a\nmodule configuration function (see {@link angular.Module#config}) but they can be overridden by\nan Angular\n{@link auto.$provide#decorator decorator}.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the instance.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "registered provider instance",
                "type": "Object"
            },
            "example": [
                "\nHere are some examples of creating value services.\n```js\n  $provide.value('ADMIN_USER', 'admin');\n\n  $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });\n\n  $provide.value('halfOf', function(value) {\n    return value / 2;\n  });\n```"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3665,
            "ngdoc": "method",
            "name": "$provide#constant",
            "description": "Register a **constant service**, such as a string, a number, an array, an object or a function,\nwith the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be\ninjected into a module configuration function (see {@link angular.Module#config}) and it cannot\nbe overridden by an Angular {@link auto.$provide#decorator decorator}.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the constant.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The constant value.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "registered instance",
                "type": "Object"
            },
            "example": [
                "\nHere a some examples of creating constants:\n```js\n  $provide.constant('SHARD_HEIGHT', 306);\n\n  $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);\n\n  $provide.constant('double', function(value) {\n    return value * 2;\n  });\n```"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3693,
            "ngdoc": "method",
            "name": "$provide#decorator",
            "description": "Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator\nintercepts the creation of a service, allowing it to override or modify the behaviour of the\nservice. The object returned by the decorator may be the original service, or a new service\nobject which replaces or wraps and delegates to the original service.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the service to decorate.",
                    "type": "String"
                },
                {
                    "name": "decorator",
                    "description": "This function will be invoked when the service needs to be\n   instantiated and should return the decorated service instance. The function is called using\n   the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.\n   Local injection arguments:\n\n   * `$delegate` - The original service instance, which can be monkey patched, configured,\n     decorated or delegated to.",
                    "type": "Function()"
                }
            ],
            "example": [
                "\nHere we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting\ncalls to {@link ng.$log#error $log.warn()}.\n```js\n  $provide.decorator('$log', ['$delegate', function($delegate) {\n    $delegate.warn = $delegate.error;\n    return $delegate;\n  }]);\n```"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 3934,
            "ngdoc": "service",
            "name": "$anchorScroll",
            "kind": "function",
            "requires": [
                "$window",
                "$location",
                "$rootScope"
            ],
            "description": "When called, it checks current value of `$location.hash()` and scrolls to the related element,\naccording to rules specified in\n[Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).\n\nIt also watches the `$location.hash()` and scrolls whenever it changes to match any anchor.\nThis can be disabled by calling `$anchorScrollProvider.disableAutoScrolling()`.",
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <div id=\"scrollArea\" ng-controller=\"ScrollCtrl\">\n        <a ng-click=\"gotoBottom()\">Go to bottom</a>\n        <a id=\"bottom\"></a> You're at the bottom!\n      </div>\n    </file>\n    <file name=\"script.js\">\n      function ScrollCtrl($scope, $location, $anchorScroll) {\n        $scope.gotoBottom = function (){\n          // set the location.hash to the id of\n          // the element you wish to scroll to.\n          $location.hash('bottom');\n\n          // call $anchorScroll()\n          $anchorScroll();\n        };\n      }\n    </file>\n    <file name=\"style.css\">\n      #scrollArea {\n        height: 350px;\n        overflow: auto;\n      }\n\n      #bottom {\n        display: block;\n        margin-top: 2000px;\n      }\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4037,
            "ngdoc": "provider",
            "name": "$animateProvider",
            "description": "Default implementation of $animate that doesn't perform any animations, instead just\nsynchronously performs DOM\nupdates and calls done() callbacks.\n\nIn order to enable animations the ngAnimate module has to be loaded.\n\nTo see the functional implementation check out src/ngAnimate/animate.js",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4056,
            "ngdoc": "method",
            "name": "$animateProvider#register",
            "description": "Registers a new injectable animation factory function. The factory function produces the\nanimation object which contains callback functions for each event that is expected to be\nanimated.\n\n  * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`\n  must be called once the element animation is complete. If a function is returned then the\n  animation service will use this function to cancel the animation whenever a cancel event is\n  triggered.\n\n\n```js\n  return {\n    eventFn : function(element, done) {\n      //code to run the animation\n      //once complete, then run done()\n      return function cancellationFunction() {\n        //code to cancel the animation\n      }\n    }\n  }\n```",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation.",
                    "type": "String"
                },
                {
                    "name": "factory",
                    "description": "The factory function that will be executed to return the animation\n                          object.",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4095,
            "ngdoc": "method",
            "name": "$animateProvider#classNameFilter",
            "description": "Sets and/or returns the CSS class regular expression that is checked when performing\nan animation. Upon bootstrap the classNameFilter value is not set at all and will\ntherefore enable $animate to attempt to perform an animation on any element.\nWhen setting the classNameFilter value, animations will only be performed on elements\nthat successfully match the filter expression. This in turn can boost performance\nfor low-powered devices as well as applications containing a lot of structural operations.",
            "params": [
                {
                    "name": "expression",
                    "description": "The className expression which will be checked against all animations",
                    "type": "RegExp="
                }
            ],
            "return": {
                "description": "The current CSS className expression value. If null then there is no expression value",
                "type": "RegExp"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4122,
            "ngdoc": "service",
            "name": "$animate",
            "description": "The $animate service provides rudimentary DOM manipulation functions to\n insert, remove and move elements within the DOM, as well as adding and removing classes.\n This service is the core service used by the ngAnimate $animator service which provides\n high-level animation hooks for CSS and JavaScript.\n$animate is available in the AngularJS core, however, the ngAnimate module must be included\n to enable full out animation support. Otherwise, $animate will only perform simple DOM\n manipulation operations.\nTo learn more about enabling animation support, click here to visit the {@link ngAnimate\n ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service\n page}.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4141,
            "ngdoc": "method",
            "name": "$animate#enter",
            "kind": "function",
            "description": "Inserts the element into the DOM either after the `after` element or within\n   the `parent` element. Once complete, the done() callback will be fired (if provided).",
            "params": [
                {
                    "name": "element",
                    "description": "the element which will be inserted into the DOM",
                    "type": "DOMElement"
                },
                {
                    "name": "parent",
                    "description": "the parent element which will append the element as\n   a child (if the after element is not present)",
                    "type": "DOMElement"
                },
                {
                    "name": "after",
                    "description": "the sibling element which will append the element\n   after itself",
                    "type": "DOMElement"
                },
                {
                    "name": "done",
                    "description": "callback function that will be called after the element has been\n   inserted into the DOM",
                    "type": "Function="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4168,
            "ngdoc": "method",
            "name": "$animate#leave",
            "kind": "function",
            "description": "Removes the element from the DOM. Once complete, the done() callback will be\n   fired (if provided).",
            "params": [
                {
                    "name": "element",
                    "description": "the element which will be removed from the DOM",
                    "type": "DOMElement"
                },
                {
                    "name": "done",
                    "description": "callback function that will be called after the element has been\n   removed from the DOM",
                    "type": "Function="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4184,
            "ngdoc": "method",
            "name": "$animate#move",
            "kind": "function",
            "description": "Moves the position of the provided element within the DOM to be placed\n either after the `after` element or inside of the `parent` element. Once complete, the\n done() callback will be fired (if provided).",
            "params": [
                {
                    "name": "element",
                    "description": "the element which will be moved around within the\n   DOM",
                    "type": "DOMElement"
                },
                {
                    "name": "parent",
                    "description": "the parent element where the element will be\n   inserted into (if the after element is not present)",
                    "type": "DOMElement"
                },
                {
                    "name": "after",
                    "description": "the sibling element where the element will be\n   positioned next to",
                    "type": "DOMElement"
                },
                {
                    "name": "done",
                    "description": "the callback function (if provided) that will be fired after the\n   element has been moved to its new position",
                    "type": "Function="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4208,
            "ngdoc": "method",
            "name": "$animate#addClass",
            "kind": "function",
            "description": "Adds the provided className CSS class value to the provided element. Once\n complete, the done() callback will be fired (if provided).",
            "params": [
                {
                    "name": "element",
                    "description": "the element which will have the className value\n   added to it",
                    "type": "DOMElement"
                },
                {
                    "name": "className",
                    "description": "the CSS class which will be added to the element",
                    "type": "String"
                },
                {
                    "name": "done",
                    "description": "the callback function (if provided) that will be fired after the\n   className value has been added to the element",
                    "type": "Function="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4231,
            "ngdoc": "method",
            "name": "$animate#removeClass",
            "kind": "function",
            "description": "Removes the provided className CSS class value from the provided element.\n Once complete, the done() callback will be fired (if provided).",
            "params": [
                {
                    "name": "element",
                    "description": "the element which will have the className value\n   removed from it",
                    "type": "DOMElement"
                },
                {
                    "name": "className",
                    "description": "the CSS class which will be removed from the element",
                    "type": "String"
                },
                {
                    "name": "done",
                    "description": "the callback function (if provided) that will be fired after the\n   className value has been removed from the element",
                    "type": "Function="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4254,
            "ngdoc": "method",
            "name": "$animate#setClass",
            "kind": "function",
            "description": "Adds and/or removes the given CSS classes to and from the element.\n Once complete, the done() callback will be fired (if provided).",
            "params": [
                {
                    "name": "element",
                    "description": "the element which will have its CSS classes changed\n   removed from it",
                    "type": "DOMElement"
                },
                {
                    "name": "add",
                    "description": "the CSS classes which will be added to the element",
                    "type": "String"
                },
                {
                    "name": "remove",
                    "description": "the CSS class which will be removed from the element",
                    "type": "String"
                },
                {
                    "name": "done",
                    "description": "the callback function (if provided) that will be fired after the\n   CSS classes have been set on the element",
                    "type": "Function="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4291,
            "description": "This object has two goals:\n\n- hide all the global state in the browser caused by the window object\n- abstract away all the browser specific features and inconsistencies\n\nFor tests we provide {@link ngMock.$browser mock implementation} of the `$browser`\nservice, which can be used for convenient testing of the application without the interaction with\nthe real browser apis.",
            "name": "$browser",
            "requires": [
                "$log"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4306,
            "params": [
                {
                    "name": "window",
                    "description": "The global window object.",
                    "type": "Object"
                },
                {
                    "name": "document",
                    "description": "jQuery wrapped document.",
                    "type": "Object"
                },
                {
                    "name": "XHR",
                    "description": "XMLHttpRequest constructor.",
                    "type": "Function()"
                },
                {
                    "name": "$log",
                    "description": "console.log or an object with the same interface.",
                    "type": "Object"
                },
                {
                    "name": "$sniffer",
                    "description": "$sniffer service",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4331,
            "description": "Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`\ncounter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4352,
            "access": "private",
            "tagname": "Note: this method is used only by scenario runner\nTODO(vojta): prefix this method with $$ ?",
            "params": [
                {
                    "name": "callback",
                    "description": "Function that will be called when no outstanding request",
                    "type": "Function()"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4377,
            "name": "$browser#addPollFn",
            "params": [
                {
                    "name": "fn",
                    "description": "Poll function to add",
                    "type": "Function()"
                }
            ],
            "description": "Adds a function to the list of functions that poller periodically executes,\nand starts polling if not started yet.",
            "return": {
                "description": "the added function",
                "type": "Function()"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4394,
            "params": [
                {
                    "name": "interval",
                    "description": "How often should browser call poll functions (ms)",
                    "type": "Number"
                },
                {
                    "name": "setTimeout",
                    "description": "Reference to a real or fake `setTimeout` function.",
                    "type": "Function()"
                }
            ],
            "description": "Configures the poller to run in the specified intervals, using the specified\nsetTimeout fn and kicks it off.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4417,
            "name": "$browser#url",
            "description": "GETTER:\nWithout any argument, this method just returns current value of location.href.\n\nSETTER:\nWith at least one argument, this method sets url to new value.\nIf html5 history api supported, pushState/replaceState is used, otherwise\nlocation.href/location.replace is used.\nReturns its own instance to allow chaining\n\nNOTE: this api is intended for use only by the $location service. Please use the\n{@link ng.$location $location service} to change url.",
            "params": [
                {
                    "name": "url",
                    "description": "New url (when used as setter)",
                    "type": "String"
                },
                {
                    "name": "replace",
                    "description": "Should new url replace current history record ?",
                    "type": "Boolean="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4483,
            "name": "$browser#onUrlChange",
            "description": "Register callback function that will be called, when url changes.\n\nIt's only called when the url is changed from outside of angular:\n- user types different url into address bar\n- user clicks on history (forward/back) button\n- user clicks on a link\n\nIt's not called when url is changed by $browser.url() method\n\nThe listener gets called with new url as parameter.\n\nNOTE: this api is intended for use only by the $location service. Please use the\n{@link ng.$location $location service} to monitor url changes in angular apps.",
            "params": [
                {
                    "name": "listener",
                    "description": "Listener function to be called when url changes.",
                    "type": "Function(string)"
                }
            ],
            "return": {
                "description": "Returns the registered listener fn - handy if the fn is anonymous.",
                "type": "Function(string)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4529,
            "name": "$browser#baseHref",
            "description": "Returns current <base href>\n(always relative - without domain)",
            "return": {
                "description": "The current base href",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4550,
            "name": "$browser#cookies",
            "params": [
                {
                    "name": "name",
                    "description": "Cookie name",
                    "type": "String="
                },
                {
                    "name": "value",
                    "description": "Cookie value",
                    "type": "String="
                }
            ],
            "description": "The cookies method provides a 'private' low level access to browser cookies.\nIt is not meant to be used directly, use the $cookie service instead.\n\nThe return values vary depending on the arguments that the method was called with as follows:\n\n- cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify\n  it\n- cookies(name, value) -> set name to value, if value is undefined delete the cookie\n- cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that\n  way)",
            "return": {
                "description": "Hash of all cookies (if called without any parameter)",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4619,
            "name": "$browser#defer",
            "params": [
                {
                    "name": "fn",
                    "description": "A function, who's execution should be deferred.",
                    "type": "Function()"
                },
                {
                    "name": "delay",
                    "description": "of milliseconds to defer the function execution.",
                    "type": "Number=",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "DeferId that can be used to cancel the task via `$browser.defer.cancel()`.",
                "type": "*"
            },
            "description": "Executes a fn asynchronously via `setTimeout(fn, delay)`.\n\nUnlike when calling `setTimeout` directly, in test this function is mocked and instead of using\n`setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed\nvia `$browser.defer.flush()`.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4645,
            "name": "$browser#defer.cancel",
            "description": "Cancels a deferred task identified with `deferId`.",
            "params": [
                {
                    "name": "deferId",
                    "description": "Token returned by the `$browser.defer` function.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns `true` if the task hasn't executed yet and was successfully\n                   canceled.",
                "type": "Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4674,
            "ngdoc": "service",
            "name": "$cacheFactory",
            "description": "Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to\nthem.\n\n```js\n\n var cache = $cacheFactory('cacheId');\n expect($cacheFactory.get('cacheId')).toBe(cache);\n expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();\n\n cache.put(\"key\", \"value\");\n cache.put(\"another key\", \"another value\");\n\n // We've specified no options on creation\n expect(cache.info()).toEqual({id: 'cacheId', size: 2});\n\n```",
            "params": [
                {
                    "name": "cacheId",
                    "description": "Name or id of the newly created cache.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options object that specifies the cache behavior. Properties:\n\n  - `{number=}` `capacity` — turns the cache into LRU cache.",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Newly created cache object with the following set of methods:\n\n- `{object}` `info()` — Returns id, size, and options of cache.\n- `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns\n  it.\n- `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.\n- `{void}` `remove({string} key)` — Removes a key-value pair from the cache.\n- `{void}` `removeAll()` — Removes all cached values.\n- `{void}` `destroy()` — Removes references to this cache from $cacheFactory.",
                "type": "Object"
            },
            "example": [
                "\n  <example module=\"cacheExampleApp\">\n    <file name=\"index.html\">\n      <div ng-controller=\"CacheController\">\n        <input ng-model=\"newCacheKey\" placeholder=\"Key\">\n        <input ng-model=\"newCacheValue\" placeholder=\"Value\">\n        <button ng-click=\"put(newCacheKey, newCacheValue)\">Cache</button>\n\n        <p ng-if=\"keys.length\">Cached Values</p>\n        <div ng-repeat=\"key in keys\">\n          <span ng-bind=\"key\"></span>\n          <span>: </span>\n          <b ng-bind=\"cache.get(key)\"></b>\n        </div>\n\n        <p>Cache Info</p>\n        <div ng-repeat=\"(key, value) in cache.info()\">\n          <span ng-bind=\"key\"></span>\n          <span>: </span>\n          <b ng-bind=\"value\"></b>\n        </div>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('cacheExampleApp', []).\n        controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {\n          $scope.keys = [];\n          $scope.cache = $cacheFactory('cacheId');\n          $scope.put = function(key, value) {\n            $scope.cache.put(key, value);\n            $scope.keys.push(key);\n          };\n        }]);\n    </file>\n    <file name=\"style.css\">\n      p {\n        margin: 10px 0 3px;\n      }\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4771,
            "ngdoc": "type",
            "name": "$cacheFactory.Cache",
            "description": "A cache object used to store and retrieve data, primarily used by\n{@link $http $http} and the {@link ng.directive:script script} directive to cache\ntemplates and other data.\n\n```js\n angular.module('superCache')\n   .factory('superCache', ['$cacheFactory', function($cacheFactory) {\n     return $cacheFactory('super-cache');\n   }]);\n```\n\nExample test:\n\n```js\n it('should behave like a cache', inject(function(superCache) {\n   superCache.put('key', 'value');\n   superCache.put('another key', 'another value');\n\n   expect(superCache.info()).toEqual({\n     id: 'super-cache',\n     size: 2\n   });\n\n   superCache.remove('another key');\n   expect(superCache.get('another key')).toBeUndefined();\n\n   superCache.removeAll();\n   expect(superCache.info()).toEqual({\n     id: 'super-cache',\n     size: 0\n   });\n }));\n```",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4812,
            "ngdoc": "method",
            "name": "$cacheFactory.Cache#put",
            "kind": "function",
            "description": "Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be\nretrieved later, and incrementing the size of the cache if the key was not already\npresent in the cache. If behaving like an LRU cache, it will also remove stale\nentries from the set.\n\nIt will not insert undefined values into the cache.",
            "params": [
                {
                    "name": "key",
                    "description": "the key under which the cached data is stored.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value to store alongside the key. If it is undefined, the key\n   will not be stored.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "the value stored.",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4848,
            "ngdoc": "method",
            "name": "$cacheFactory.Cache#get",
            "kind": "function",
            "description": "Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.",
            "params": [
                {
                    "name": "key",
                    "description": "the key of the data to be retrieved",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the value stored.",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4872,
            "ngdoc": "method",
            "name": "$cacheFactory.Cache#remove",
            "kind": "function",
            "description": "Removes an entry from the {@link $cacheFactory.Cache Cache} object.",
            "params": [
                {
                    "name": "key",
                    "description": "the key of the entry to be removed",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4900,
            "ngdoc": "method",
            "name": "$cacheFactory.Cache#removeAll",
            "kind": "function",
            "description": "Clears the cache object of any entries.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4916,
            "ngdoc": "method",
            "name": "$cacheFactory.Cache#destroy",
            "kind": "function",
            "description": "Destroys the {@link $cacheFactory.Cache Cache} object entirely,\nremoving it from the {@link $cacheFactory $cacheFactory} set.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4933,
            "ngdoc": "method",
            "name": "$cacheFactory.Cache#info",
            "kind": "function",
            "description": "Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.",
            "return": {
                "description": "an object with the following properties:\n  <ul>\n    <li>**id**: the id of the cache instance</li>\n    <li>**size**: the number of entries kept in the cache instance</li>\n    <li>**...**: any additional properties from the options object when creating the\n      cache.</li>\n  </ul>",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4955,
            "description": "makes the `entry` the freshEnd of the LRU linked list",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4974,
            "description": "bidirectionally links two entries of the LRU linked list",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 4986,
            "ngdoc": "method",
            "name": "$cacheFactory#info",
            "description": "Get information about all the caches that have been created",
            "return": {
                "description": "- key-value map of `cacheId` to the result of calling `cache#info`",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 5004,
            "ngdoc": "method",
            "name": "$cacheFactory#get",
            "description": "Get access to a cache object by the `cacheId` used when it was created.",
            "params": [
                {
                    "name": "cacheId",
                    "description": "Name or id of a cache to access.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Cache object identified by the cacheId or undefined if no such cache.",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 5023,
            "ngdoc": "service",
            "name": "$templateCache",
            "description": "The first time a template is used, it is loaded in the template cache for quick retrieval. You\ncan load templates directly into the cache in a `script` tag, or by consuming the\n`$templateCache` service directly.\n\nAdding via the `script` tag:\n\n```html\n  <script type=\"text/ng-template\" id=\"templateId.html\">\n    <p>This is the content of the template</p>\n  </script>\n```\n\n**Note:** the `script` tag containing the template does not need to be included in the `head` of\nthe document, but it must be below the `ng-app` definition.\n\nAdding via the $templateCache service:\n\n```js\nvar myApp = angular.module('myApp', []);\nmyApp.run(function($templateCache) {\n  $templateCache.put('templateId.html', 'This is the content of the template');\n});\n```\n\nTo retrieve the template later, simply use it in your HTML:\n```html\n<div ng-include=\" 'templateId.html' \"></div>\n```\n\nor get it via Javascript:\n```js\n$templateCache.get('templateId.html')\n```\n\nSee {@link ng.$cacheFactory $cacheFactory}.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 5089,
            "ngdoc": "service",
            "name": "$compile",
            "kind": "function",
            "description": "Compiles an HTML string or DOM into a template and produces a template function, which\ncan then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.\n\nThe compilation is a process of walking the DOM tree and matching DOM elements to\n{@link ng.$compileProvider#directive directives}.\n\n<div class=\"alert alert-warning\">\n**Note:** This document is an in-depth reference of all directive options.\nFor a gentle introduction to directives with examples of common use cases,\nsee the {@link guide/directive directive guide}.\n</div>\n\n## Comprehensive Directive API\n\nThere are many different options for a directive.\n\nThe difference resides in the return value of the factory function.\nYou can either return a \"Directive Definition Object\" (see below) that defines the directive properties,\nor just the `postLink` function (all other properties will have the default values).\n\n<div class=\"alert alert-success\">\n**Best Practice:** It's recommended to use the \"directive definition object\" form.\n</div>\n\nHere's an example directive declared with a Directive Definition Object:\n\n```js\n  var myModule = angular.module(...);\n\n  myModule.directive('directiveName', function factory(injectables) {\n    var directiveDefinitionObject = {\n      priority: 0,\n      template: '<div></div>', // or // function(tElement, tAttrs) { ... },\n      // or\n      // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },\n      transclude: false,\n      restrict: 'A',\n      scope: false,\n      controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },\n      controllerAs: 'stringAlias',\n      require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],\n      compile: function compile(tElement, tAttrs, transclude) {\n        return {\n          pre: function preLink(scope, iElement, iAttrs, controller) { ... },\n          post: function postLink(scope, iElement, iAttrs, controller) { ... }\n        }\n        // or\n        // return function postLink( ... ) { ... }\n      },\n      // or\n      // link: {\n      //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },\n      //  post: function postLink(scope, iElement, iAttrs, controller) { ... }\n      // }\n      // or\n      // link: function postLink( ... ) { ... }\n    };\n    return directiveDefinitionObject;\n  });\n```\n\n<div class=\"alert alert-warning\">\n**Note:** Any unspecified options will use the default value. You can see the default values below.\n</div>\n\nTherefore the above can be simplified as:\n\n```js\n  var myModule = angular.module(...);\n\n  myModule.directive('directiveName', function factory(injectables) {\n    var directiveDefinitionObject = {\n      link: function postLink(scope, iElement, iAttrs) { ... }\n    };\n    return directiveDefinitionObject;\n    // or\n    // return function postLink(scope, iElement, iAttrs) { ... }\n  });\n```\n\n\n\n### Directive Definition Object\n\nThe directive definition object provides instructions to the {@link ng.$compile\ncompiler}. The attributes are:\n\n#### `priority`\nWhen there are multiple directives defined on a single DOM element, sometimes it\nis necessary to specify the order in which the directives are applied. The `priority` is used\nto sort the directives before their `compile` functions get called. Priority is defined as a\nnumber. Directives with greater numerical `priority` are compiled first. Pre-link functions\nare also run in priority order, but post-link functions are run in reverse order. The order\nof directives with the same priority is undefined. The default priority is `0`.\n\n#### `terminal`\nIf set to true then the current `priority` will be the last set of directives\nwhich will execute (any directives at the current priority will still execute\nas the order of execution on same `priority` is undefined).\n\n#### `scope`\n**If set to `true`,** then a new scope will be created for this directive. If multiple directives on the\nsame element request a new scope, only one new scope is created. The new scope rule does not\napply for the root of the template since the root of the template always gets a new scope.\n\n**If set to `{}` (object hash),** then a new \"isolate\" scope is created. The 'isolate' scope differs from\nnormal scope in that it does not prototypically inherit from the parent scope. This is useful\nwhen creating reusable components, which should not accidentally read or modify data in the\nparent scope.\n\nThe 'isolate' scope takes an object hash which defines a set of local scope properties\nderived from the parent scope. These local properties are useful for aliasing values for\ntemplates. Locals definition is a hash of local scope property to its source:\n\n* `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is\n  always a string since DOM attributes are strings. If no `attr` name is specified  then the\n  attribute name is assumed to be the same as the local name.\n  Given `<widget my-attr=\"hello {{name}}\">` and widget definition\n  of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect\n  the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the\n  `localName` property on the widget scope. The `name` is read from the parent scope (not\n  component scope).\n\n* `=` or `=attr` - set up bi-directional binding between a local scope property and the\n  parent scope property of name defined via the value of the `attr` attribute. If no `attr`\n  name is specified then the attribute name is assumed to be the same as the local name.\n  Given `<widget my-attr=\"parentModel\">` and widget definition of\n  `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the\n  value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected\n  in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent\n  scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You\n  can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional.\n\n* `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.\n  If no `attr` name is specified then the attribute name is assumed to be the same as the\n  local name. Given `<widget my-attr=\"count = count + value\">` and widget definition of\n  `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to\n  a function wrapper for the `count = count + value` expression. Often it's desirable to\n  pass data from the isolated scope via an expression and to the parent scope, this can be\n  done by passing a map of local variable names and values into the expression wrapper fn.\n  For example, if the expression is `increment(amount)` then we can specify the amount value\n  by calling the `localFn` as `localFn({amount: 22})`.\n\n\n\n#### `controller`\nController constructor function. The controller is instantiated before the\npre-linking phase and it is shared with other directives (see\n`require` attribute). This allows the directives to communicate with each other and augment\neach other's behavior. The controller is injectable (and supports bracket notation) with the following locals:\n\n* `$scope` - Current scope associated with the element\n* `$element` - Current element\n* `$attrs` - Current attributes object for the element\n* `$transclude` - A transclude linking function pre-bound to the correct transclusion scope.\n   The scope can be overridden by an optional first argument.\n  `function([scope], cloneLinkingFn)`.\n\n\n#### `require`\nRequire another directive and inject its controller as the fourth argument to the linking function. The\n`require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the\ninjected argument will be an array in corresponding order. If no such directive can be\nfound, or if the directive does not have a controller, then an error is raised. The name can be prefixed with:\n\n* (no prefix) - Locate the required controller on the current element. Throw an error if not found.\n* `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.\n* `^` - Locate the required controller by searching the element's parents. Throw an error if not found.\n* `?^` - Attempt to locate the required controller by searching the element's parents or pass `null` to the\n  `link` fn if not found.\n\n\n#### `controllerAs`\nController alias at the directive scope. An alias for the controller so it\ncan be referenced at the directive template. The directive needs to define a scope for this\nconfiguration to be used. Useful in the case when directive is used as component.\n\n\n#### `restrict`\nString of subset of `EACM` which restricts the directive to a specific directive\ndeclaration style. If omitted, the default (attributes only) is used.\n\n* `E` - Element name: `<my-directive></my-directive>`\n* `A` - Attribute (default): `<div my-directive=\"exp\"></div>`\n* `C` - Class: `<div class=\"my-directive: exp;\"></div>`\n* `M` - Comment: `<!-- directive: my-directive exp -->`\n\n\n#### `template`\nreplace the current element with the contents of the HTML. The replacement process\nmigrates all of the attributes / classes from the old element to the new one. See the\n{@link guide/directive#creating-custom-directives_creating-directives_template-expanding-directive\nDirectives Guide} for an example.\n\nYou can specify `template` as a string representing the template or as a function which takes\ntwo arguments `tElement` and `tAttrs` (described in the `compile` function api below) and\nreturns a string value representing the template.\n\n\n#### `templateUrl`\nSame as `template` but the template is loaded from the specified URL. Because\nthe template loading is asynchronous the compilation/linking is suspended until the template\nis loaded.\n\nYou can specify `templateUrl` as a string representing the URL or as a function which takes two\narguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns\na string value representing the url.  In either case, the template URL is passed through {@link\napi/ng.$sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.\n\n\n#### `replace` ([*DEPRECATED*!], will be removed in next major release)\nspecify where the template should be inserted. Defaults to `false`.\n\n* `true` - the template will replace the current element.\n* `false` - the template will replace the contents of the current element.\n\n\n#### `transclude`\ncompile the content of the element and make it available to the directive.\nTypically used with {@link ng.directive:ngTransclude\nngTransclude}. The advantage of transclusion is that the linking function receives a\ntransclusion function which is pre-bound to the correct scope. In a typical setup the widget\ncreates an `isolate` scope, but the transclusion is not a child, but a sibling of the `isolate`\nscope. This makes it possible for the widget to have private state, and the transclusion to\nbe bound to the parent (pre-`isolate`) scope.\n\n* `true` - transclude the content of the directive.\n* `'element'` - transclude the whole element including any directives defined at lower priority.\n\n\n#### `compile`\n\n```js\n  function compile(tElement, tAttrs, transclude) { ... }\n```\n\nThe compile function deals with transforming the template DOM. Since most directives do not do\ntemplate transformation, it is not used often. The compile function takes the following arguments:\n\n  * `tElement` - template element - The element where the directive has been declared. It is\n    safe to do template transformation on the element and child elements only.\n\n  * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared\n    between all directive compile functions.\n\n  * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`\n\n<div class=\"alert alert-warning\">\n**Note:** The template instance and the link instance may be different objects if the template has\nbeen cloned. For this reason it is **not** safe to do anything other than DOM transformations that\napply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration\nshould be done in a linking function rather than in a compile function.\n</div>\n\n<div class=\"alert alert-warning\">\n**Note:** The compile function cannot handle directives that recursively use themselves in their\nown templates or compile functions. Compiling these directives results in an infinite loop and a\nstack overflow errors.\n\nThis can be avoided by manually using $compile in the postLink function to imperatively compile\na directive's template instead of relying on automatic template compilation via `template` or\n`templateUrl` declaration or manual compilation inside the compile function.\n</div>\n\n<div class=\"alert alert-error\">\n**Note:** The `transclude` function that is passed to the compile function is deprecated, as it\n  e.g. does not know about the right outer scope. Please use the transclude function that is passed\n  to the link function instead.\n</div>\n\nA compile function can have a return value which can be either a function or an object.\n\n* returning a (post-link) function - is equivalent to registering the linking function via the\n  `link` property of the config object when the compile function is empty.\n\n* returning an object with function(s) registered via `pre` and `post` properties - allows you to\n  control when a linking function should be called during the linking phase. See info about\n  pre-linking and post-linking functions below.\n\n\n#### `link`\nThis property is used only if the `compile` property is not defined.\n\n```js\n  function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }\n```\n\nThe link function is responsible for registering DOM listeners as well as updating the DOM. It is\nexecuted after the template has been cloned. This is where most of the directive logic will be\nput.\n\n  * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the\n    directive for registering {@link ng.$rootScope.Scope#$watch watches}.\n\n  * `iElement` - instance element - The element where the directive is to be used. It is safe to\n    manipulate the children of the element only in `postLink` function since the children have\n    already been linked.\n\n  * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared\n    between all directive linking functions.\n\n  * `controller` - a controller instance - A controller instance if at least one directive on the\n    element defines a controller. The controller is shared among all the directives, which allows\n    the directives to use the controllers as a communication channel.\n\n  * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.\n    The scope can be overridden by an optional first argument. This is the same as the `$transclude`\n    parameter of directive controllers.\n    `function([scope], cloneLinkingFn)`.\n\n\n#### Pre-linking function\n\nExecuted before the child elements are linked. Not safe to do DOM transformation since the\ncompiler linking function will fail to locate the correct elements for linking.\n\n#### Post-linking function\n\nExecuted after the child elements are linked. It is safe to do DOM transformation in the post-linking function.\n\n<a name=\"Attributes\"></a>\n### Attributes\n\nThe {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the\n`link()` or `compile()` functions. It has a variety of uses.\n\naccessing *Normalized attribute names:*\nDirectives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.\nthe attributes object allows for normalized access to\n  the attributes.\n\n* *Directive inter-communication:* All directives share the same instance of the attributes\n  object which allows the directives to use the attributes object as inter directive\n  communication.\n\n* *Supports interpolation:* Interpolation attributes are assigned to the attribute object\n  allowing other directives to read the interpolated value.\n\n* *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes\n  that contain interpolation (e.g. `src=\"{{bar}}\"`). Not only is this very efficient but it's also\n  the only way to easily get the actual value because during the linking phase the interpolation\n  hasn't been evaluated yet and so the value is at this time set to `undefined`.\n\n```js\nfunction linkingFn(scope, elm, attrs, ctrl) {\n  // get the attribute value\n  console.log(attrs.ngModel);\n\n  // change the attribute\n  attrs.$set('ngModel', 'new value');\n\n  // observe changes to interpolated attribute\n  attrs.$observe('ngModel', function(value) {\n    console.log('ngModel has changed value to ' + value);\n  });\n}\n```\n\nBelow is an example using `$compileProvider`.\n\n<div class=\"alert alert-warning\">\n**Note**: Typically directives are registered with `module.directive`. The example below is\nto illustrate how `$compile` works.\n</div>\n\n<example module=\"compile\">\n  <file name=\"index.html\">\n   <script>\n     angular.module('compile', [], function($compileProvider) {\n       // configure new 'compile' directive by passing a directive\n       // factory function. The factory function injects the '$compile'\n       $compileProvider.directive('compile', function($compile) {\n         // directive factory creates a link function\n         return function(scope, element, attrs) {\n           scope.$watch(\n             function(scope) {\n                // watch the 'compile' expression for changes\n               return scope.$eval(attrs.compile);\n             },\n             function(value) {\n               // when the 'compile' expression changes\n               // assign it into the current DOM\n               element.html(value);\n\n               // compile the new DOM and link it to the current\n               // scope.\n               // NOTE: we only compile .childNodes so that\n               // we don't get into infinite loop compiling ourselves\n               $compile(element.contents())(scope);\n             }\n           );\n         };\n       })\n     });\n\n     function Ctrl($scope) {\n       $scope.name = 'Angular';\n       $scope.html = 'Hello {{name}}';\n     }\n   </script>\n   <div ng-controller=\"Ctrl\">\n     <input ng-model=\"name\"> <br>\n     <textarea ng-model=\"html\"></textarea> <br>\n     <div compile=\"html\"></div>\n   </div>\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should auto compile', function() {\n      var textarea = $('textarea');\n      var output = $('div[compile]');\n      // The initial state reads 'Hello Angular'.\n      expect(output.getText()).toBe('Hello Angular');\n      textarea.clear();\n      textarea.sendKeys('{{name}}!');\n      expect(output.getText()).toBe('Angular!');\n    });\n  </file>\n</example>",
            "params": [
                {
                    "name": "element",
                    "description": "Element or HTML string to compile into a template function.",
                    "type": "String|DOMElement"
                },
                {
                    "name": "transclude",
                    "description": "function available to directives.",
                    "type": "function(angular.Scope, cloneAttachFn=)"
                },
                {
                    "name": "maxPriority",
                    "description": "only apply directives lower than given priority (Only effects the\n                root element(s), not their children)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a link function which is used to bind template\n(a DOM element/tree) to a scope. Where:\n\n * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.\n * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the\n `template` and call the `cloneAttachFn` function allowing the caller to attach the\n cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is\n called as: <br> `cloneAttachFn(clonedElement, scope)` where:\n\n     * `clonedElement` - is a clone of the original `element` passed into the compiler.\n     * `scope` - is the current scope with which the linking function is working with.\n\nCalling the linking function returns the element of the template. It is either the original\nelement passed in, or the clone of the element if the `cloneAttachFn` is provided.\n\nAfter linking the view is not updated until after a call to $digest which typically is done by\nAngular automatically.\n\nIf you need access to the bound view, there are two ways to do it:\n\n- If you are not asking the linking function to clone the template, create the DOM element(s)\n  before you send them to the compiler and keep this reference around.\n  ```js\n    var element = $compile('<p>{{total}}</p>')(scope);\n  ```\n\n- if on the other hand, you need the element to be cloned, the view reference from the original\n  example would not point to the clone, but rather to the original template that was cloned. In\n  this case, you can access the clone via the cloneAttachFn:\n  ```js\n    var templateElement = angular.element('<p>{{total}}</p>'),\n        scope = ....;\n\n    var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {\n      //attach the clone to DOM document at the right place\n    });\n\n    //now we have reference to the cloned DOM via `clonedElement`\n  ```\n\n\nFor information on how the compiler works, see the\n{@link guide/compiler Angular HTML Compiler} section of the Developer Guide.",
                "type": "Function(scope, cloneAttachFn=)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 5567,
            "ngdoc": "provider",
            "name": "$compileProvider",
            "kind": "function",
            "description": "",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 5586,
            "ngdoc": "method",
            "name": "$compileProvider#directive",
            "kind": "function",
            "description": "Register a new directive with the compiler.",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the directive in camel-case (i.e. <code>ngBind</code> which\n   will match as <code>ng-bind</code>), or an object map of directives where the keys are the\n   names and the values are the factories.",
                    "type": "String|Object"
                },
                {
                    "name": "directiveFactory",
                    "description": "An injectable directive factory function. See\n   {@link guide/directive} for more info.",
                    "type": "Function|Array"
                }
            ],
            "return": {
                "description": "Self for chaining.",
                "type": "ng.$compileProvider"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 5639,
            "ngdoc": "method",
            "name": "$compileProvider#aHrefSanitizationWhitelist",
            "kind": "function",
            "description": "Retrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during a[href] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to a[href] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "params": [
                {
                    "name": "regexp",
                    "description": "New regexp to whitelist urls with.",
                    "type": "RegExp="
                }
            ],
            "return": {
                "description": "Current RegExp if called without value or self for\n   chaining otherwise.",
                "type": "RegExp|ng.$compileProvider"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 5669,
            "ngdoc": "method",
            "name": "$compileProvider#imgSrcSanitizationWhitelist",
            "kind": "function",
            "description": "Retrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during img[src] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to img[src] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "params": [
                {
                    "name": "regexp",
                    "description": "New regexp to whitelist urls with.",
                    "type": "RegExp="
                }
            ],
            "return": {
                "description": "Current RegExp if called without value or self for\n   chaining otherwise.",
                "type": "RegExp|ng.$compileProvider"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 5713,
            "ngdoc": "method",
            "name": "$compile.directive.Attributes#$addClass",
            "kind": "function",
            "description": "Adds the CSS class value specified by the classVal parameter to the element. If animations\nare enabled then an animation will be triggered for the class addition.",
            "params": [
                {
                    "name": "classVal",
                    "description": "The className value that will be added to the element",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 5730,
            "ngdoc": "method",
            "name": "$compile.directive.Attributes#$removeClass",
            "kind": "function",
            "description": "Removes the CSS class value specified by the classVal parameter from the element. If\nanimations are enabled then an animation will be triggered for the class removal.",
            "params": [
                {
                    "name": "classVal",
                    "description": "The className value that will be removed from the element",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 5747,
            "ngdoc": "method",
            "name": "$compile.directive.Attributes#$updateClass",
            "kind": "function",
            "description": "Adds and removes the appropriate CSS class values to the element based on the difference\nbetween the new and old CSS class values (specified as newClasses and oldClasses).",
            "params": [
                {
                    "name": "newClasses",
                    "description": "The current CSS className value",
                    "type": "String"
                },
                {
                    "name": "oldClasses",
                    "description": "The former CSS className value",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 5772,
            "description": "Set a normalized attribute on the element in a way such that all directives\ncan share the attribute. This function properly handles boolean attributes.",
            "params": [
                {
                    "name": "key",
                    "description": "Normalized key. (ie ngAttribute)",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set. If `null` attribute will be deleted.",
                    "type": "String|boolean"
                },
                {
                    "name": "writeAttr",
                    "description": "If false, does not write the value to DOM element attribute.\n    Defaults to true.",
                    "type": "Boolean="
                },
                {
                    "name": "attrName",
                    "description": "Optional none normalized name. Defaults to key.",
                    "type": "String="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 5835,
            "ngdoc": "method",
            "name": "$compile.directive.Attributes#$observe",
            "kind": "function",
            "description": "Observes an interpolated attribute.\n\nThe observer function will be invoked once during the next `$digest` following\ncompilation. The observer is then invoked whenever the interpolated value\nchanges.",
            "params": [
                {
                    "name": "key",
                    "description": "Normalized key. (ie ngAttribute) .",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function that will be called whenever\n               the interpolated value of the attribute changes.\n       See the {@link guide/directive#Attributes Directives} guide for more info.",
                    "type": "Function(interpolatedValue)"
                }
            ],
            "return": {
                "description": "the `fn` parameter.",
                "type": "Function()"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 5937,
            "description": "Compile function matches each node in nodeList against the directives. Once all directives\nfor a particular node are collected their compile functions are executed. The compile\nfunctions return values - the linking functions - are combined into a composite linking\nfunction, which is the a linking function for the node.",
            "params": [
                {
                    "name": "nodeList",
                    "description": "an array of nodes or NodeList to compile",
                    "type": "NodeList"
                },
                {
                    "name": "transcludeFn",
                    "description": "A linking function, where the\n       scope argument is auto-generated to the new child of the transcluded parent scope.",
                    "type": "function(angular.Scope, cloneAttachFn=)"
                },
                {
                    "name": "$rootElement",
                    "description": "If the nodeList is the root of the compilation tree then\n       the rootElement must be set the jqLite collection of the compile root. This is\n       needed so that the jqLite collection items can be replaced with widgets.",
                    "type": "DOMElement="
                },
                {
                    "name": "maxPriority",
                    "description": "Max directive priority.",
                    "type": "Number="
                }
            ],
            "return": {
                "description": "A composite linking function of all of the matched directives or null.",
                "type": "Function"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 6058,
            "description": "Looks for directives on the given node and adds them to the directive collection which is\nsorted.",
            "params": [
                {
                    "name": "node",
                    "description": "Node to search."
                },
                {
                    "name": "directives",
                    "description": "An array to which the directives are added to. This array is sorted before\n       the function returns."
                },
                {
                    "name": "attrs",
                    "description": "The shared attrs object which is used to populate the normalized attributes."
                },
                {
                    "name": "maxPriority",
                    "description": "Max directive priority.",
                    "type": "Number="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 6150,
            "description": "Given a node with an directive-start it collects all of the siblings until it finds\ndirective-end.",
            "params": [
                {
                    "name": "node",
                    "description": ""
                },
                {
                    "name": "attrStart",
                    "description": ""
                },
                {
                    "name": "attrEnd",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 6183,
            "description": "Wrapper for linking function which converts normal linking function into a grouped\nlinking function.",
            "params": [
                {
                    "name": "linkFn",
                    "description": ""
                },
                {
                    "name": "attrStart",
                    "description": ""
                },
                {
                    "name": "attrEnd",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 6198,
            "description": "Once the directives have been collected, their compile functions are executed. This method\nis responsible for inlining directive templates as well as terminating the application\nof the directives if the terminal directive has been reached.",
            "params": [
                {
                    "name": "directives",
                    "description": "Array of collected directives to execute their compile function.\n       this needs to be pre-sorted by priority order.",
                    "type": "Array"
                },
                {
                    "name": "compileNode",
                    "description": "The raw DOM node to apply the compile functions to",
                    "type": "Node"
                },
                {
                    "name": "templateAttrs",
                    "description": "The shared attribute function",
                    "type": "Object"
                },
                {
                    "name": "transcludeFn",
                    "description": "A linking function, where the\n                                                 scope argument is auto-generated to the new\n                                                 child of the transcluded parent scope.",
                    "type": "function(angular.Scope, cloneAttachFn=)"
                },
                {
                    "name": "jqCollection",
                    "description": "If we are working on the root of the compile tree then this\n                             argument has the root jqLite array so that we can replace nodes\n                             on it.",
                    "type": "JQLite"
                },
                {
                    "name": "originalReplaceDirective",
                    "description": "An optional directive that will be ignored when\n                                          compiling the transclusion.",
                    "type": "Object="
                },
                {
                    "name": "preLinkFns",
                    "description": "",
                    "type": "Array.<Function>"
                },
                {
                    "name": "postLinkFns",
                    "description": "",
                    "type": "Array.<Function>"
                },
                {
                    "name": "previousCompileContext",
                    "description": "Context used for previous compilation of the current\n                                       node",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "linkFn",
                "type": "Function"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 6666,
            "description": "looks up the directive and decorates it with exception handling and proper parameters. We\ncall this the boundDirective.",
            "params": [
                {
                    "name": "name",
                    "description": "name of the directive to look up.",
                    "type": "String"
                },
                {
                    "name": "location",
                    "description": "The directive must be found in specific format.\n  String containing any of theses characters:\n\n  * `E`: element name\n  * `A': attribute\n  * `C`: class\n  * `M`: comment",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if directive was added.",
                "type": "Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 6704,
            "description": "When the element is replaced with HTML template then the new attributes\non the template need to be merged with the existing attributes in the DOM.\nThe desired effect is to have both of the attributes present.",
            "params": [
                {
                    "name": "dst",
                    "description": "destination attributes (original DOM)",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "source attributes (from the directive template)",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 6861,
            "description": "Sorting function for bound directives.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 6981,
            "description": "This is a special jqLite.replaceWith, which can replace items which\nhave no parents, provided that the containing jqLite collection is provided.",
            "params": [
                {
                    "name": "$rootElement",
                    "description": "The root of the compile tree. Used so that we can replace nodes\n                              in the root of the tree.",
                    "type": "JqLite="
                },
                {
                    "name": "elementsToRemove",
                    "description": "The jqLite element which we are going to replace. We keep\n                                 the shell, but replace its DOM node reference.",
                    "type": "JqLite"
                },
                {
                    "name": "newNode",
                    "description": "The new DOM node.",
                    "type": "Node"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7041,
            "description": "Converts all accepted directives format into proper directive name.\nAll of these will become 'myDirective':\n  my:Directive\n  my-directive\n  x-my-directive\n  data-my:directive\n\nAlso there is special case for Moz prefix starting with upper case letter.",
            "params": [
                {
                    "name": "name",
                    "description": "Name to normalize"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7056,
            "ngdoc": "type",
            "name": "$compile.directive.Attributes",
            "description": "A shared object between directive compile / linking functions which contains normalized DOM\nelement attributes. The values reflect current binding state `{{ }}`. The normalization is\nneeded since all of these are treated as equivalent in Angular:\n\n```\n   <span ng:bind=\"a\" ng-bind=\"a\" data-ng-bind=\"a\" x-ng-bind=\"a\">\n```",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7070,
            "ngdoc": "property",
            "name": "$compile.directive.Attributes#$attr",
            "return": {
                "description": "A map of DOM element attribute names to the normalized name. This is\n                  needed to do reverse lookup from normalized name back to actual name.",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7078,
            "ngdoc": "method",
            "name": "$compile.directive.Attributes#$set",
            "kind": "function",
            "description": "Set DOM element attribute value.",
            "params": [
                {
                    "name": "name",
                    "description": "Normalized element attribute name of the property to modify. The name is\n         reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}\n         property to the original name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value to set the attribute to. The value can be an interpolated string.",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7095,
            "description": "Closure compiler type information",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7130,
            "ngdoc": "provider",
            "name": "$controllerProvider",
            "description": "The {@link ng.$controller $controller service} is used by Angular to create new\ncontrollers.\n\nThis provider allows controller registration via the\n{@link ng.$controllerProvider#register register} method.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7145,
            "ngdoc": "method",
            "name": "$controllerProvider#register",
            "params": [
                {
                    "name": "name",
                    "description": "Controller name, or an object map of controllers where the keys are\n   the names and the values are the constructors.",
                    "type": "String|Object"
                },
                {
                    "name": "constructor",
                    "description": "Controller constructor fn (optionally decorated with DI\n   annotations in the array notation).",
                    "type": "Function|Array"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7165,
            "ngdoc": "service",
            "name": "$controller",
            "requires": [
                "$injector"
            ],
            "params": [
                {
                    "name": "constructor",
                    "description": "If called with a function then it's considered to be the\n   controller constructor function. Otherwise it's considered to be a string which is used\n   to retrieve the controller constructor using the following steps:\n\n   * check if a controller with given name is registered via `$controllerProvider`\n   * check if evaluating the string on the current scope returns a constructor\n   * check `window[constructor]` on the global `window` object",
                    "type": "Function|string"
                },
                {
                    "name": "locals",
                    "description": "Injection locals for Controller.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Instance of given controller.",
                "type": "Object"
            },
            "description": "`$controller` service is responsible for instantiating controllers.\n\nIt's just a simple call to {@link auto.$injector $injector}, but extracted into\na service, so that one can override this service with [BC version](https://gist.github.com/1649788).",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7218,
            "ngdoc": "service",
            "name": "$document",
            "requires": [
                "$window"
            ],
            "description": "A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.",
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <div ng-controller=\"MainCtrl\">\n        <p>$document title: <b ng-bind=\"title\"></b></p>\n        <p>window.document title: <b ng-bind=\"windowTitle\"></b></p>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      function MainCtrl($scope, $document) {\n        $scope.title = $document[0].title;\n        $scope.windowTitle = angular.element(window.document)[0].title;\n      }\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7248,
            "ngdoc": "service",
            "name": "$exceptionHandler",
            "requires": [
                "ng.$log"
            ],
            "description": "Any uncaught exception in angular expressions is delegated to this service.\nThe default implementation simply delegates to `$log.error` which logs it into\nthe browser console.\n\nIn unit tests, if `angular-mocks.js` is loaded, this service is overridden by\n{@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.\n\n## Example:\n\n```js\n  angular.module('exceptionOverride', []).factory('$exceptionHandler', function () {\n    return function (exception, cause) {\n      exception.message += ' (caused by \"' + cause + '\")';\n      throw exception;\n    };\n  });\n```\n\nThis example will override the normal action of `$exceptionHandler`, to make angular\nexceptions fail hard when they happen, instead of just logging to the console.",
            "params": [
                {
                    "name": "exception",
                    "description": "Exception associated with the error.",
                    "type": "Error"
                },
                {
                    "name": "cause",
                    "description": "optional information about the context in which\n      the error was thrown.",
                    "type": "String="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7288,
            "description": "Parse headers into key value object",
            "params": [
                {
                    "name": "headers",
                    "description": "Raw headers as a string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Parsed headers as key value object",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7317,
            "description": "Returns a function that provides access to parsed headers.\n\nHeaders are lazy parsed when first requested.",
            "see": [
                "parseHeaders"
            ],
            "params": [
                {
                    "name": "headers",
                    "description": "Headers to provide access to.",
                    "type": "(string|Object)"
                }
            ],
            "return": {
                "description": "Returns a getter function which if called with:\n\n  - if called with single an argument returns a single header value or null\n  - if called with no arguments returns an object containing all headers.",
                "type": "Function(string=)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7344,
            "description": "Chain all given functions\n\nThis function is used for both request and response transforming",
            "params": [
                {
                    "name": "data",
                    "description": "Data to transform.",
                    "type": "*"
                },
                {
                    "name": "headers",
                    "description": "Http headers getter fn.",
                    "type": "Function(string=)"
                },
                {
                    "name": "fns",
                    "description": "Function or an array of functions.",
                    "type": "(Function|Array.<Function>)"
                }
            ],
            "return": {
                "description": "Transformed data.",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7408,
            "description": "Are ordered by request, i.e. they are applied in the same order as the\narray, on request, but reverse order, on response.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7414,
            "description": "For historical reasons, response interceptors are ordered by the order in which\nthey are applied to the response. (This is the opposite of interceptorFactories)",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7425,
            "description": "Interceptors stored in reverse order. Inner interceptors before outer interceptors.\nThe reversal is needed so that we can build up the interception chain around the\nserver request.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7442,
            "description": "Response interceptors go before \"around\" interceptors (no real reason, just\nhad to pick one.) But they are already reversed, so we can't use unshift, hence\nthe splice.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 7458,
            "ngdoc": "service",
            "kind": "function",
            "name": "pendingRequests Array of config objects for currently pending!~YUIDOC_LINE~!  requests. This is primarily meant to be used for debugging purposes.",
            "requires": [
                "ng.$httpBackend",
                "$cacheFactory",
                "$rootScope",
                "$q",
                "$injector"
            ],
            "description": "The `$http` service is a core Angular service that facilitates communication with the remote\nHTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)\nobject or via [JSONP](http://en.wikipedia.org/wiki/JSONP).\n\nFor unit testing applications that use `$http` service, see\n{@link ngMock.$httpBackend $httpBackend mock}.\n\nFor a higher level of abstraction, please check out the {@link ngResource.$resource\n$resource} service.\n\nThe $http API is based on the {@link ng.$q deferred/promise APIs} exposed by\nthe $q service. While for simple usage patterns this doesn't matter much, for advanced usage\nit is important to familiarize yourself with these APIs and the guarantees they provide.\n\n\n# General usage\nThe `$http` service is a function which takes a single argument — a configuration object —\nthat is used to generate an HTTP request and returns  a {@link ng.$q promise}\nwith two $http specific methods: `success` and `error`.\n\n```js\n  $http({method: 'GET', url: '/someUrl'}).\n    success(function(data, status, headers, config) {\n      // this callback will be called asynchronously\n      // when the response is available\n    }).\n    error(function(data, status, headers, config) {\n      // called asynchronously if an error occurs\n      // or server returns response with an error status.\n    });\n```\n\nSince the returned value of calling the $http function is a `promise`, you can also use\nthe `then` method to register callbacks, and these callbacks will receive a single argument –\nan object representing the response. See the API signature and type info below for more\ndetails.\n\nA response status code between 200 and 299 is considered a success status and\nwill result in the success callback being called. Note that if the response is a redirect,\nXMLHttpRequest will transparently follow it, meaning that the error callback will not be\ncalled for such responses.\n\n# Writing Unit Tests that use $http\nWhen unit testing (using {@link ngMock ngMock}), it is necessary to call\n{@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending\nrequest using trained responses.\n\n```\n$httpBackend.expectGET(...);\n$http.get(...);\n$httpBackend.flush();\n```\n\n# Shortcut methods\n\nShortcut methods are also available. All shortcut methods require passing in the URL, and\nrequest data must be passed in for POST/PUT requests.\n\n```js\n  $http.get('/someUrl').success(successCallback);\n  $http.post('/someUrl', data).success(successCallback);\n```\n\nComplete list of shortcut methods:\n\n- {@link ng.$http#get $http.get}\n- {@link ng.$http#head $http.head}\n- {@link ng.$http#post $http.post}\n- {@link ng.$http#put $http.put}\n- {@link ng.$http#delete $http.delete}\n- {@link ng.$http#jsonp $http.jsonp}\n\n\n# Setting HTTP Headers\n\nThe $http service will automatically add certain HTTP headers to all requests. These defaults\ncan be fully configured by accessing the `$httpProvider.defaults.headers` configuration\nobject, which currently contains this default configuration:\n\n- `$httpProvider.defaults.headers.common` (headers that are common for all requests):\n  - `Accept: application/json, text/plain, * / *`\n- `$httpProvider.defaults.headers.post`: (header defaults for POST requests)\n  - `Content-Type: application/json`\n- `$httpProvider.defaults.headers.put` (header defaults for PUT requests)\n  - `Content-Type: application/json`\n\nTo add or overwrite these defaults, simply add or remove a property from these configuration\nobjects. To add headers for an HTTP method other than POST or PUT, simply add a new object\nwith the lowercased HTTP method name as the key, e.g.\n`$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.\n\nThe defaults can also be set at runtime via the `$http.defaults` object in the same\nfashion. For example:\n\n```\nmodule.run(function($http) {\n  $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'\n});\n```\n\nIn addition, you can supply a `headers` property in the config object passed when\ncalling `$http(config)`, which overrides the defaults without changing them globally.\n\n\n# Transforming Requests and Responses\n\nBoth requests and responses can be transformed using transform functions. By default, Angular\napplies these transformations:\n\nRequest transformations:\n\n- If the `data` property of the request configuration object contains an object, serialize it\n  into JSON format.\n\nResponse transformations:\n\n - If XSRF prefix is detected, strip it (see Security Considerations section below).\n - If JSON response is detected, deserialize it using a JSON parser.\n\nTo globally augment or override the default transforms, modify the\n`$httpProvider.defaults.transformRequest` and `$httpProvider.defaults.transformResponse`\nproperties. These properties are by default an array of transform functions, which allows you\nto `push` or `unshift` a new transformation function into the transformation chain. You can\nalso decide to completely override any default transformations by assigning your\ntransformation functions to these properties directly without the array wrapper.  These defaults\nare again available on the $http factory at run-time, which may be useful if you have run-time\nservices you wish to be involved in your transformations.\n\nSimilarly, to locally override the request/response transforms, augment the\n`transformRequest` and/or `transformResponse` properties of the configuration object passed\ninto `$http`.\n\n\n# Caching\n\nTo enable caching, set the request configuration `cache` property to `true` (to use default\ncache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).\nWhen the cache is enabled, `$http` stores the response from the server in the specified\ncache. The next time the same request is made, the response is served from the cache without\nsending a request to the server.\n\nNote that even if the response is served from cache, delivery of the data is asynchronous in\nthe same way that real requests are.\n\nIf there are multiple GET requests for the same URL that should be cached using the same\ncache, but the cache is not populated yet, only one request to the server will be made and\nthe remaining requests will be fulfilled using the response from the first request.\n\nYou can change the default cache to a new object (built with\n{@link ng.$cacheFactory `$cacheFactory`}) by updating the\n{@link ng.$http#properties_defaults `$http.defaults.cache`} property. All requests who set\ntheir `cache` property to `true` will now use this cache object.\n\nIf you set the default cache to `false` then only requests that specify their own custom\ncache object will be cached.\n\n# Interceptors\n\nBefore you start creating interceptors, be sure to understand the\n{@link ng.$q $q and deferred/promise APIs}.\n\nFor purposes of global error handling, authentication, or any kind of synchronous or\nasynchronous pre-processing of request or postprocessing of responses, it is desirable to be\nable to intercept requests before they are handed to the server and\nresponses before they are handed over to the application code that\ninitiated these requests. The interceptors leverage the {@link ng.$q\npromise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.\n\nThe interceptors are service factories that are registered with the `$httpProvider` by\nadding them to the `$httpProvider.interceptors` array. The factory is called and\ninjected with dependencies (if specified) and returns the interceptor.\n\nThere are two kinds of interceptors (and two kinds of rejection interceptors):\n\n  * `request`: interceptors get called with a http `config` object. The function is free to\n    modify the `config` object or create a new one. The function needs to return the `config`\n    object directly, or a promise containing the `config` or a new `config` object.\n  * `requestError`: interceptor gets called when a previous interceptor threw an error or\n    resolved with a rejection.\n  * `response`: interceptors get called with http `response` object. The function is free to\n    modify the `response` object or create a new one. The function needs to return the `response`\n    object directly, or as a promise containing the `response` or a new `response` object.\n  * `responseError`: interceptor gets called when a previous interceptor threw an error or\n    resolved with a rejection.\n\n\n```js\n  // register the interceptor as a service\n  $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {\n    return {\n      // optional method\n      'request': function(config) {\n        // do something on success\n        return config;\n      },\n\n      // optional method\n     'requestError': function(rejection) {\n        // do something on error\n        if (canRecover(rejection)) {\n          return responseOrNewPromise\n        }\n        return $q.reject(rejection);\n      },\n\n\n\n      // optional method\n      'response': function(response) {\n        // do something on success\n        return response;\n      },\n\n      // optional method\n     'responseError': function(rejection) {\n        // do something on error\n        if (canRecover(rejection)) {\n          return responseOrNewPromise\n        }\n        return $q.reject(rejection);\n      }\n    };\n  });\n\n  $httpProvider.interceptors.push('myHttpInterceptor');\n\n\n  // alternatively, register the interceptor via an anonymous factory\n  $httpProvider.interceptors.push(function($q, dependency1, dependency2) {\n    return {\n     'request': function(config) {\n         // same as above\n      },\n\n      'response': function(response) {\n         // same as above\n      }\n    };\n  });\n```\n\n# Response interceptors (DEPRECATED)\n\nBefore you start creating interceptors, be sure to understand the\n{@link ng.$q $q and deferred/promise APIs}.\n\nFor purposes of global error handling, authentication or any kind of synchronous or\nasynchronous preprocessing of received responses, it is desirable to be able to intercept\nresponses for http requests before they are handed over to the application code that\ninitiated these requests. The response interceptors leverage the {@link ng.$q\npromise apis} to fulfil this need for both synchronous and asynchronous preprocessing.\n\nThe interceptors are service factories that are registered with the $httpProvider by\nadding them to the `$httpProvider.responseInterceptors` array. The factory is called and\ninjected with dependencies (if specified) and returns the interceptor  — a function that\ntakes a {@link ng.$q promise} and returns the original or a new promise.\n\n```js\n  // register the interceptor as a service\n  $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {\n    return function(promise) {\n      return promise.then(function(response) {\n        // do something on success\n        return response;\n      }, function(response) {\n        // do something on error\n        if (canRecover(response)) {\n          return responseOrNewPromise\n        }\n        return $q.reject(response);\n      });\n    }\n  });\n\n  $httpProvider.responseInterceptors.push('myHttpInterceptor');\n\n\n  // register the interceptor via an anonymous factory\n  $httpProvider.responseInterceptors.push(function($q, dependency1, dependency2) {\n    return function(promise) {\n      // same as above\n    }\n  });\n```\n\n\n# Security Considerations\n\nWhen designing web applications, consider security threats from:\n\n- [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)\n- [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\nBoth server and the client must cooperate in order to eliminate these threats. Angular comes\npre-configured with strategies that address these issues, but for this to work backend server\ncooperation is required.\n\n## JSON Vulnerability Protection\n\nA [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)\nallows third party website to turn your JSON resource URL into\n[JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To\ncounter this your server can prefix all JSON requests with following string `\")]}',\\n\"`.\nAngular will automatically strip the prefix before processing it as JSON.\n\nFor example if your server needs to return:\n```js\n['one','two']\n```\n\nwhich is vulnerable to attack, your server can return:\n```js\n)]}',\n['one','two']\n```\n\nAngular will strip the prefix, before processing the JSON.\n\n\n## Cross Site Request Forgery (XSRF) Protection\n\n[XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which\nan unauthorized site can gain your user's private data. Angular provides a mechanism\nto counter XSRF. When performing XHR requests, the $http service reads a token from a cookie\n(by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only\nJavaScript that runs on your domain could read the cookie, your server can be assured that\nthe XHR came from JavaScript running on your domain. The header will not be set for\ncross-domain requests.\n\nTo take advantage of this, your server needs to set a token in a JavaScript readable session\ncookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the\nserver can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure\nthat only JavaScript running on your domain could have sent the request. The token must be\nunique for each user and must be verifiable by the server (to prevent the JavaScript from\nmaking up its own tokens). We recommend that the token is a digest of your site's\nauthentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography))\nfor added security.\n\nThe name of the headers can be specified using the xsrfHeaderName and xsrfCookieName\nproperties of either $httpProvider.defaults at config-time, $http.defaults at run-time,\nor the per-request config object.",
            "return": {
                "description": "Returns a {@link ng.$q promise} object with the\n  standard `then` method and two http specific methods: `success` and `error`. The `then`\n  method takes two arguments a success and an error callback which will be called with a\n  response object. The `success` and `error` methods take a single argument - a function that\n  will be called when the request succeeds or fails respectively. The arguments passed into\n  these functions are destructured representation of the response object passed into the\n  `then` method. The response object has these properties:\n\n  - **data** – `{string|Object}` – The response body transformed with the transform\n    functions.\n  - **status** – `{number}` – HTTP status code of the response.\n  - **headers** – `{function([headerName])}` – Header getter function.\n  - **config** – `{Object}` – The configuration object that was used to generate the request.\n  - **statusText** – `{string}` – HTTP status text of the response.",
                "type": "HttpPromise"
            },
            "itemtype": "property",
            "type": "Array.<Object>",
            "example": [
                "\n<example>\n<file name=\"index.html\">\n <div ng-controller=\"FetchCtrl\">\n   <select ng-model=\"method\">\n     <option>GET</option>\n     <option>JSONP</option>\n   </select>\n   <input type=\"text\" ng-model=\"url\" size=\"80\"/>\n   <button id=\"fetchbtn\" ng-click=\"fetch()\">fetch</button><br>\n   <button id=\"samplegetbtn\" ng-click=\"updateModel('GET', 'http-hello.html')\">Sample GET</button>\n   <button id=\"samplejsonpbtn\"\n     ng-click=\"updateModel('JSONP',\n                   'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')\">\n     Sample JSONP\n   </button>\n   <button id=\"invalidjsonpbtn\"\n     ng-click=\"updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')\">\n       Invalid JSONP\n     </button>\n   <pre>http status code: {{status}}</pre>\n   <pre>http response data: {{data}}</pre>\n </div>\n</file>\n<file name=\"script.js\">\n function FetchCtrl($scope, $http, $templateCache) {\n   $scope.method = 'GET';\n   $scope.url = 'http-hello.html';\n\n   $scope.fetch = function() {\n     $scope.code = null;\n     $scope.response = null;\n\n     $http({method: $scope.method, url: $scope.url, cache: $templateCache}).\n       success(function(data, status) {\n         $scope.status = status;\n         $scope.data = data;\n       }).\n       error(function(data, status) {\n         $scope.data = data || \"Request failed\";\n         $scope.status = status;\n     });\n   };\n\n   $scope.updateModel = function(method, url) {\n     $scope.method = method;\n     $scope.url = url;\n   };\n }\n</file>\n<file name=\"http-hello.html\">\n Hello, $http!\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\n var status = element(by.binding('status'));\n var data = element(by.binding('data'));\n var fetchBtn = element(by.id('fetchbtn'));\n var sampleGetBtn = element(by.id('samplegetbtn'));\n var sampleJsonpBtn = element(by.id('samplejsonpbtn'));\n var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));\n\n it('should make an xhr GET request', function() {\n   sampleGetBtn.click();\n   fetchBtn.click();\n   expect(status.getText()).toMatch('200');\n   expect(data.getText()).toMatch(/Hello, \\$http!/);\n });\n\n it('should make a JSONP request to angularjs.org', function() {\n   sampleJsonpBtn.click();\n   fetchBtn.click();\n   expect(status.getText()).toMatch('200');\n   expect(data.getText()).toMatch(/Super Hero!/);\n });\n\n it('should make JSONP request to invalid URL and invoke the error handler',\n     function() {\n   invalidJsonpBtn.click();\n   fetchBtn.click();\n   expect(status.getText()).toMatch('0');\n   expect(data.getText()).toMatch('Request failed');\n });\n</file>\n</example>"
            ],
            "class": "",
            "module": "ng",
            "subprops": [
                {
                    "name": "config",
                    "description": "Object describing the request to be made and how it should be\n   processed. The object has following properties:\n\n   - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)\n   - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.\n   - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned\n     to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be\n     JSONified.\n   - **data** – `{string|Object}` – Data to be sent as the request message data.\n   - **headers** – `{Object}` – Map of strings or functions which return strings representing\n     HTTP headers to send to the server. If the return value of a function is null, the\n     header will not be sent.\n   - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.\n   - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.\n   - **transformRequest** –\n     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n     transform function or an array of such functions. The transform function takes the http\n     request body and headers and returns its transformed (typically serialized) version.\n   - **transformResponse** –\n     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n     transform function or an array of such functions. The transform function takes the http\n     response body and headers and returns its transformed (typically deserialized) version.\n   - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the\n     GET request, otherwise if a cache instance built with\n     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for\n     caching.\n   - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}\n     that should abort the request when resolved.\n   - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the\n     XHR object. See [requests with credentials]https://developer.mozilla.org/en/http_access_control#section_5\n     for more information.\n   - **responseType** - `{string}` - see\n     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).",
                    "type": "Object"
                }
            ]
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8075,
            "ngdoc": "method",
            "name": "$http#get",
            "description": "Shortcut method to perform `GET` request.",
            "params": [
                {
                    "name": "url",
                    "description": "Relative or absolute URL specifying the destination of the request",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "Optional configuration object",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Future object",
                "type": "HttpPromise"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8087,
            "ngdoc": "method",
            "name": "$http#delete",
            "description": "Shortcut method to perform `DELETE` request.",
            "params": [
                {
                    "name": "url",
                    "description": "Relative or absolute URL specifying the destination of the request",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "Optional configuration object",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Future object",
                "type": "HttpPromise"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8099,
            "ngdoc": "method",
            "name": "$http#head",
            "description": "Shortcut method to perform `HEAD` request.",
            "params": [
                {
                    "name": "url",
                    "description": "Relative or absolute URL specifying the destination of the request",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "Optional configuration object",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Future object",
                "type": "HttpPromise"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8111,
            "ngdoc": "method",
            "name": "$http#jsonp",
            "description": "Shortcut method to perform `JSONP` request.",
            "params": [
                {
                    "name": "url",
                    "description": "Relative or absolute URL specifying the destination of the request.\n                    Should contain `JSON_CALLBACK` string.",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "Optional configuration object",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Future object",
                "type": "HttpPromise"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8125,
            "ngdoc": "method",
            "name": "$http#post",
            "description": "Shortcut method to perform `POST` request.",
            "params": [
                {
                    "name": "url",
                    "description": "Relative or absolute URL specifying the destination of the request",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Request content",
                    "type": "*"
                },
                {
                    "name": "config",
                    "description": "Optional configuration object",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Future object",
                "type": "HttpPromise"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8138,
            "ngdoc": "method",
            "name": "$http#put",
            "description": "Shortcut method to perform `PUT` request.",
            "params": [
                {
                    "name": "url",
                    "description": "Relative or absolute URL specifying the destination of the request",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Request content",
                    "type": "*"
                },
                {
                    "name": "config",
                    "description": "Optional configuration object",
                    "type": "Object="
                }
            ],
            "return": {
                "description": "Future object",
                "type": "HttpPromise"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8152,
            "ngdoc": "property",
            "name": "$http#defaults",
            "description": "Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of\ndefault headers, withCredentials as well as request and response transformations.\n\nSee \"Setting HTTP Headers\" and \"Transforming Requests and Responses\" sections above.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8193,
            "description": "Makes the request.\n\n!!! ACCESSES CLOSURE VARS:\n$httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8255,
            "description": "Callback registered to $httpBackend():\n - caches the response if desired\n - resolves the raw $http promise\n - calls $apply",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8276,
            "description": "Resolves the raw $http promise.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8339,
            "ngdoc": "service",
            "name": "$httpBackend",
            "requires": [
                "$window",
                "$document"
            ],
            "description": "HTTP backend used by the {@link ng.$http service} that delegates to\nXMLHttpRequest object or JSONP and deals with browser incompatibilities.\n\nYou should never need to use this service directly, instead use the higher-level abstractions:\n{@link ng.$http $http} or {@link ngResource.$resource $resource}.\n\nDuring testing this implementation is swapped with {@link ngMock.$httpBackend mock\n$httpBackend} which can be trained with responses.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8533,
            "ngdoc": "provider",
            "name": "$interpolateProvider",
            "kind": "function",
            "description": "Used for configuring the interpolation markup. Defaults to `{{` and `}}`.",
            "example": [
                "\n<example module=\"customInterpolationApp\">\n<file name=\"index.html\">\n<script>\n var customInterpolationApp = angular.module('customInterpolationApp', []);\n\n customInterpolationApp.config(function($interpolateProvider) {\n   $interpolateProvider.startSymbol('//');\n   $interpolateProvider.endSymbol('//');\n });\n\n\n customInterpolationApp.controller('DemoController', function() {\n     this.label = \"This binding is brought you by // interpolation symbols.\";\n });\n</script>\n<div ng-app=\"App\" ng-controller=\"DemoController as demo\">\n   //demo.label//\n</div>\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\n it('should interpolate binding with custom symbols', function() {\n   expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');\n });\n</file>\n</example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8573,
            "ngdoc": "method",
            "name": "$interpolateProvider#startSymbol",
            "description": "Symbol to denote start of expression in the interpolated string. Defaults to `{{`.",
            "params": [
                {
                    "name": "value",
                    "description": "new value to set the starting symbol to.",
                    "type": "String="
                }
            ],
            "return": {
                "description": "Returns the symbol when used as getter and self if used as setter.",
                "type": "String|self"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8591,
            "ngdoc": "method",
            "name": "$interpolateProvider#endSymbol",
            "description": "Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.",
            "params": [
                {
                    "name": "value",
                    "description": "new value to set the ending symbol to.",
                    "type": "String="
                }
            ],
            "return": {
                "description": "Returns the symbol when used as getter and self if used as setter.",
                "type": "String|self"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8614,
            "ngdoc": "service",
            "name": "$interpolate",
            "kind": "function",
            "requires": [
                "$parse",
                "$sce"
            ],
            "description": "Compiles a string with markup into an interpolation function. This service is used by the\nHTML {@link ng.$compile $compile} service for data binding. See\n{@link ng.$interpolateProvider $interpolateProvider} for configuring the\ninterpolation markup.\n\n\n```js\n  var $interpolate = ...; // injected\n  var exp = $interpolate('Hello {{name | uppercase}}!');\n  expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');\n```",
            "params": [
                {
                    "name": "text",
                    "description": "The text with markup to interpolate.",
                    "type": "String"
                },
                {
                    "name": "mustHaveExpression",
                    "description": "if set to true then the interpolation string must have\n   embedded expression in order to return an interpolation function. Strings with no\n   embedded expression will return null for the interpolation function.",
                    "type": "Boolean="
                },
                {
                    "name": "trustedContext",
                    "description": "when provided, the returned function passes the interpolated\n   result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,\n   trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that\n   provides Strict Contextual Escaping for details.",
                    "type": "String="
                }
            ],
            "return": {
                "description": "an interpolation function which is used to compute the\n   interpolated string. The function has these parameters:\n\n   * `context`: an object against which any expressions embedded in the strings are evaluated\n     against.",
                "type": "Function(context)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8746,
            "ngdoc": "method",
            "name": "$interpolate#startSymbol",
            "description": "Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.\n\nUse {@link ng.$interpolateProvider#startSymbol $interpolateProvider#startSymbol} to change\nthe symbol.",
            "return": {
                "description": "start symbol.",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8762,
            "ngdoc": "method",
            "name": "$interpolate#endSymbol",
            "description": "Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n\nUse {@link ng.$interpolateProvider#endSymbol $interpolateProvider#endSymbol} to change\nthe symbol.",
            "return": {
                "description": "end symbol.",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8787,
            "ngdoc": "service",
            "name": "$interval",
            "description": "Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`\nmilliseconds.\n\nThe return value of registering an interval function is a promise. This promise will be\nnotified upon each tick of the interval, and will be resolved after `count` iterations, or\nrun indefinitely if `count` is not defined. The value of the notification will be the\nnumber of iterations that have run.\nTo cancel an interval, call `$interval.cancel(promise)`.\n\nIn tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to\nmove forward by `millis` milliseconds and trigger any functions scheduled to run in that\ntime.\n\n<div class=\"alert alert-warning\">\n**Note**: Intervals created by this service must be explicitly destroyed when you are finished\nwith them.  In particular they are not automatically destroyed when a controller's scope or a\ndirective's element are destroyed.\nYou should take this into consideration and make sure to always cancel the interval at the\nappropriate moment.  See the example below for more details on how and when to do this.\n</div>",
            "params": [
                {
                    "name": "fn",
                    "description": "A function that should be called repeatedly.",
                    "type": "Function()"
                },
                {
                    "name": "delay",
                    "description": "Number of milliseconds between each function call.",
                    "type": "Number"
                },
                {
                    "name": "count",
                    "description": "Number of times to repeat. If not set, or 0, will repeat\n  indefinitely.",
                    "type": "Number=",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "invokeApply",
                    "description": "If set to `false` skips model dirty checking, otherwise\n  will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "A promise which will be notified on each iteration.",
                "type": "Promise"
            },
            "example": [
                "\n<example module=\"time\">\n  <file name=\"index.html\">\n    <script>\n      function Ctrl2($scope,$interval) {\n        $scope.format = 'M/d/yy h:mm:ss a';\n        $scope.blood_1 = 100;\n        $scope.blood_2 = 120;\n\n        var stop;\n        $scope.fight = function() {\n          // Don't start a new fight if we are already fighting\n          if ( angular.isDefined(stop) ) return;\n\n          stop = $interval(function() {\n            if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {\n                $scope.blood_1 = $scope.blood_1 - 3;\n                $scope.blood_2 = $scope.blood_2 - 4;\n            } else {\n                $scope.stopFight();\n            }\n          }, 100);\n        };\n\n        $scope.stopFight = function() {\n          if (angular.isDefined(stop)) {\n            $interval.cancel(stop);\n            stop = undefined;\n          }\n        };\n\n        $scope.resetFight = function() {\n          $scope.blood_1 = 100;\n          $scope.blood_2 = 120;\n        }\n\n        $scope.$on('$destroy', function() {\n          // Make sure that the interval is destroyed too\n          $scope.stopFight();\n        });\n      }\n\n      angular.module('time', [])\n        // Register the 'myCurrentTime' directive factory method.\n        // We inject $interval and dateFilter service since the factory method is DI.\n        .directive('myCurrentTime', function($interval, dateFilter) {\n          // return the directive link function. (compile function not needed)\n          return function(scope, element, attrs) {\n            var format,  // date format\n            stopTime; // so that we can cancel the time updates\n\n            // used to update the UI\n            function updateTime() {\n              element.text(dateFilter(new Date(), format));\n            }\n\n            // watch the expression, and update the UI on change.\n            scope.$watch(attrs.myCurrentTime, function(value) {\n              format = value;\n              updateTime();\n            });\n\n            stopTime = $interval(updateTime, 1000);\n\n            // listen on DOM destroy (removal) event, and cancel the next UI update\n            // to prevent updating time ofter the DOM element was removed.\n            element.bind('$destroy', function() {\n              $interval.cancel(stopTime);\n            });\n          }\n        });\n    </script>\n\n    <div>\n      <div ng-controller=\"Ctrl2\">\n        Date format: <input ng-model=\"format\"> <hr/>\n        Current time is: <span my-current-time=\"format\"></span>\n        <hr/>\n        Blood 1 : <font color='red'>{{blood_1}}</font>\n        Blood 2 : <font color='red'>{{blood_2}}</font>\n        <button type=\"button\" data-ng-click=\"fight()\">Fight</button>\n        <button type=\"button\" data-ng-click=\"stopFight()\">StopFight</button>\n        <button type=\"button\" data-ng-click=\"resetFight()\">resetFight</button>\n      </div>\n    </div>\n\n  </file>\n</example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8941,
            "ngdoc": "method",
            "name": "$interval#cancel",
            "description": "Cancels a task associated with the `promise`.",
            "params": [
                {
                    "name": "promise",
                    "description": "returned by the `$interval` function.",
                    "type": "Promise"
                }
            ],
            "return": {
                "description": "Returns `true` if the task was successfully canceled.",
                "type": "Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 8965,
            "ngdoc": "service",
            "name": "$locale",
            "description": "$locale service provides localization rules for various Angular components. As of right now the\nonly public api is:\n\n* `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9042,
            "description": "Encode path using encodeUriSegment, ignoring forward slashes",
            "params": [
                {
                    "name": "path",
                    "description": "Path to encode",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9086,
            "params": [
                {
                    "name": "begin",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "whole",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns text from whole after begin or undefined if it does not begin with\n                   expected string.",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9116,
            "description": "LocationHtml5Url represents an url\nThis object is exposed as $location service when HTML5 mode is enabled and supported",
            "is_constructor": 1,
            "params": [
                {
                    "name": "appBase",
                    "description": "application base URL",
                    "type": "String"
                },
                {
                    "name": "basePrefix",
                    "description": "url path prefix",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9131,
            "description": "Parse given html5 (regular) url string into properties",
            "params": [
                {
                    "name": "newAbsoluteUrl",
                    "description": "HTML5 url",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9152,
            "description": "Compose url and update `absUrl` property",
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9183,
            "description": "LocationHashbangUrl represents url\nThis object is exposed as $location service when developer doesn't opt into html5 mode.\nIt also serves as the base class for html5 mode fallback on legacy browsers.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "appBase",
                    "description": "application base URL",
                    "type": "String"
                },
                {
                    "name": "hashPrefix",
                    "description": "hashbang prefix",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9198,
            "description": "Parse given hashbang url into properties",
            "params": [
                {
                    "name": "url",
                    "description": "Hashbang url",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9256,
            "description": "Compose hashbang url and update `absUrl` property",
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9276,
            "description": "LocationHashbangUrl represents url\nThis object is exposed as $location service when html5 history api is enabled but the browser\ndoes not support it.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "appBase",
                    "description": "application base URL",
                    "type": "String"
                },
                {
                    "name": "hashPrefix",
                    "description": "hashbang prefix",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9319,
            "description": "Are we in html5 mode?",
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9325,
            "description": "Has any change been replacing ?",
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9331,
            "ngdoc": "method",
            "name": "$location#absUrl",
            "description": "This method is getter only.\n\nReturn full url representation with all segments encoded according to rules specified in\n[RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).",
            "return": {
                "description": "full url",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9345,
            "ngdoc": "method",
            "name": "$location#url",
            "description": "This method is getter / setter.\n\nReturn url (e.g. `/path?a=b#hash`) when called without any parameter.\n\nChange path, search and hash, when called with parameter and return `$location`.",
            "params": [
                {
                    "name": "url",
                    "description": "New url without base prefix (e.g. `/path?a=b#hash`)",
                    "type": "String="
                },
                {
                    "name": "replace",
                    "description": "The path that will be changed",
                    "type": "String="
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9372,
            "ngdoc": "method",
            "name": "$location#protocol",
            "description": "This method is getter only.\n\nReturn protocol of current url.",
            "return": {
                "description": "protocol of current url",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9385,
            "ngdoc": "method",
            "name": "$location#host",
            "description": "This method is getter only.\n\nReturn host of current url.",
            "return": {
                "description": "host of current url.",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9398,
            "ngdoc": "method",
            "name": "$location#port",
            "description": "This method is getter only.\n\nReturn port of current url.",
            "return": {
                "description": "port",
                "type": "Number"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9411,
            "ngdoc": "method",
            "name": "$location#path",
            "description": "This method is getter / setter.\n\nReturn path of current url when called without any parameter.\n\nChange path when called with parameter and return `$location`.\n\nNote: Path should always begin with forward slash (/), this method will add the forward slash\nif it is missing.",
            "params": [
                {
                    "name": "path",
                    "description": "New path",
                    "type": "String="
                }
            ],
            "return": {
                "description": "path",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9432,
            "ngdoc": "method",
            "name": "$location#search",
            "description": "This method is getter / setter.\n\nReturn search part (as object) of current url when called without any parameter.\n\nChange search part when called with parameter and return `$location`.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar searchObject = $location.search();\n// => {foo: 'bar', baz: 'xoxo'}\n\n\n// set foo to 'yipee'\n$location.search('foo', 'yipee');\n// => $location\n```",
            "params": [
                {
                    "name": "search",
                    "description": "New search params - string or\nhash object.\n\nWhen called with a single argument the method acts as a setter, setting the `search` component\nof `$location` to the specified value.\n\nIf the argument is a hash object containing an array of values, these values will be encoded\nas duplicate search parameters in the url.",
                    "type": "string|Object.<string>|Object.<Array.<string>>"
                },
                {
                    "name": "paramValue",
                    "description": "If `search` is a string, then `paramValue` will\noverride only a single search property.\n\nIf `paramValue` is an array, it will override the property of the `search` component of\n`$location` specified via the first argument.\n\nIf `paramValue` is `null`, the property specified via the first argument will be deleted.",
                    "type": "(string|Array<string>)="
                }
            ],
            "return": {
                "description": "If called with no arguments returns the parsed `search` object. If called with\none or more arguments returns `$location` object itself.",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9501,
            "ngdoc": "method",
            "name": "$location#hash",
            "description": "This method is getter / setter.\n\nReturn hash fragment when called without any parameter.\n\nChange hash fragment when called with parameter and return `$location`.",
            "params": [
                {
                    "name": "hash",
                    "description": "New hash fragment",
                    "type": "String="
                }
            ],
            "return": {
                "description": "hash",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9517,
            "ngdoc": "method",
            "name": "$location#replace",
            "description": "If called, all changes to $location during current `$digest` will be replacing current history\nrecord, instead of adding new one.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9551,
            "ngdoc": "service",
            "name": "$location",
            "requires": [
                "$rootElement"
            ],
            "description": "The $location service parses the URL in the browser address bar (based on the\n[window.location](https://developer.mozilla.org/en/window.location)) and makes the URL\navailable to your application. Changes to the URL in the address bar are reflected into\n$location service and changes to $location are reflected into the browser address bar.\n\n**The $location service:**\n\n- Exposes the current URL in the browser address bar, so you can\n  - Watch and observe the URL.\n  - Change the URL.\n- Synchronizes the URL with the browser when the user\n  - Changes the address bar.\n  - Clicks the back or forward button (or clicks a History link).\n  - Clicks on a link.\n- Represents the URL object as a set of methods (protocol, host, port, path, search, hash).\n\nFor more information see {@link guide/$location Developer Guide: Using $location}",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9577,
            "ngdoc": "provider",
            "name": "$locationProvider",
            "description": "Use the `$locationProvider` to configure how the application deep linking paths are stored.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9587,
            "ngdoc": "property",
            "name": "$locationProvider#hashPrefix",
            "description": "",
            "params": [
                {
                    "name": "prefix",
                    "description": "Prefix for hash part (containing path and search)",
                    "type": "String="
                }
            ],
            "return": {
                "description": "current value if used as getter or itself (chaining) if used as setter",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9603,
            "ngdoc": "property",
            "name": "$locationProvider#html5Mode",
            "description": "",
            "params": [
                {
                    "name": "mode",
                    "description": "Use HTML5 strategy if available.",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "current value if used as getter or itself (chaining) if used as setter",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9619,
            "ngdoc": "event",
            "name": "$location#$locationChangeStart",
            "eventtype": "broadcast on root scope",
            "description": "Broadcasted before a URL will change. This change can be prevented by calling\n`preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more\ndetails about event object. Upon successful change\n{@link ng.$location#events_$locationChangeSuccess $locationChangeSuccess} is fired.",
            "params": [
                {
                    "name": "angularEvent",
                    "description": "Synthetic event object.",
                    "type": "Object"
                },
                {
                    "name": "newUrl",
                    "description": "New URL",
                    "type": "String"
                },
                {
                    "name": "oldUrl",
                    "description": "URL that was before it was changed.",
                    "type": "String="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9634,
            "ngdoc": "event",
            "name": "$location#$locationChangeSuccess",
            "eventtype": "broadcast on root scope",
            "description": "Broadcasted after a URL was changed.",
            "params": [
                {
                    "name": "angularEvent",
                    "description": "Synthetic event object.",
                    "type": "Object"
                },
                {
                    "name": "newUrl",
                    "description": "New URL",
                    "type": "String"
                },
                {
                    "name": "oldUrl",
                    "description": "URL that was before it was changed.",
                    "type": "String="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9789,
            "ngdoc": "service",
            "name": "$log",
            "requires": [
                "$window"
            ],
            "description": "Simple service for logging. Default implementation safely writes the message\ninto the browser's console (if present).\n\nThe main purpose of this service is to simplify debugging and troubleshooting.\n\nThe default is to log `debug` messages. You can use\n{@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.",
            "example": [
                "\n  <example>\n    <file name=\"script.js\">\n      function LogCtrl($scope, $log) {\n        $scope.$log = $log;\n        $scope.message = 'Hello World!';\n      }\n    </file>\n    <file name=\"index.html\">\n      <div ng-controller=\"LogCtrl\">\n        <p>Reload this page with open console, enter text and hit the log button...</p>\n        Message:\n        <input type=\"text\" ng-model=\"message\"/>\n        <button ng-click=\"$log.log(message)\">log</button>\n        <button ng-click=\"$log.warn(message)\">warn</button>\n        <button ng-click=\"$log.info(message)\">info</button>\n        <button ng-click=\"$log.error(message)\">error</button>\n      </div>\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9825,
            "ngdoc": "provider",
            "name": "$logProvider",
            "description": "Use the `$logProvider` to configure how the application logs messages",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9835,
            "ngdoc": "property",
            "name": "$logProvider#debugEnabled",
            "description": "",
            "params": [
                {
                    "name": "flag",
                    "description": "enable or disable debug level messages",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "current value if used as getter or itself (chaining) if used as setter",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9853,
            "ngdoc": "method",
            "name": "$log#log",
            "description": "Write a log message",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9862,
            "ngdoc": "method",
            "name": "$log#info",
            "description": "Write an information message",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9871,
            "ngdoc": "method",
            "name": "$log#warn",
            "description": "Write a warning message",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9880,
            "ngdoc": "method",
            "name": "$log#error",
            "description": "Write an error message",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 9889,
            "ngdoc": "method",
            "name": "$log#debug",
            "description": "Write a debug message",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 10060,
            "is_constructor": 1,
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 10323,
            "is_constructor": 1,
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 10805,
            "description": "Implementation of the \"Black Hole\" variant from:\n- http://jsperf.com/angularjs-parse-getter/4\n- http://jsperf.com/path-evaluation-simplified/7",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11012,
            "ngdoc": "service",
            "name": "$parse",
            "kind": "function",
            "description": "Converts Angular {@link guide/expression expression} into a function.\n\n```js\n  var getter = $parse('user.name');\n  var setter = getter.assign;\n  var context = {user:{name:'angular'}};\n  var locals = {user:{name:'local'}};\n\n  expect(getter(context)).toEqual('angular');\n  setter(context, 'newValue');\n  expect(context.user.name).toEqual('newValue');\n  expect(getter(context, locals)).toEqual('local');\n```",
            "params": [
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.\n\n   The returned function also has the following properties:\n     * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript\n       literal.\n     * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript\n       constant literals.\n     * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be\n       set to a function to change its value on the given context.",
                "type": "Function(context, locals)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11053,
            "ngdoc": "provider",
            "name": "$parseProvider",
            "kind": "function",
            "description": "`$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}\n service.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11072,
            "deprecated": true,
            "deprecationMessage": "Promise unwrapping via $parse is deprecated and will be removed in the future.",
            "ngdoc": "method",
            "name": "$parseProvider#unwrapPromises",
            "description": "**This feature is deprecated, see deprecation notes below for more info**\n\nIf set to true (default is false), $parse will unwrap promises automatically when a promise is\nfound at any part of the expression. In other words, if set to true, the expression will always\nresult in a non-promise value.\n\nWhile the promise is unresolved, it's treated as undefined, but once resolved and fulfilled,\nthe fulfillment value is used in place of the promise while evaluating the expression.\n\n**Deprecation notice**\n\nThis is a feature that didn't prove to be wildly useful or popular, primarily because of the\ndichotomy between data access in templates (accessed as raw values) and controller code\n(accessed as promises).\n\nIn most code we ended up resolving promises manually in controllers anyway and thus unifying\nthe model access there.\n\nOther downsides of automatic promise unwrapping:\n\n- when building components it's often desirable to receive the raw promises\n- adds complexity and slows down expression evaluation\n- makes expression code pre-generation unattractive due to the amount of code that needs to be\n  generated\n- makes IDE auto-completion and tool support hard\n\n**Warning Logs**\n\nIf the unwrapping is enabled, Angular will log a warning about each expression that unwraps a\npromise (to reduce the noise, each expression is logged only once). To disable this logging use\n`$parseProvider.logPromiseWarnings(false)` api.",
            "params": [
                {
                    "name": "value",
                    "description": "New value.",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "Returns the current setting when used as getter and self if used as\n                        setter.",
                "type": "Boolean|self"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11126,
            "deprecated": true,
            "deprecationMessage": "Promise unwrapping via $parse is deprecated and will be removed in the future.",
            "ngdoc": "method",
            "name": "$parseProvider#logPromiseWarnings",
            "description": "Controls whether Angular should log a warning on any encounter of a promise in an expression.\n\nThe default is set to `true`.\n\nThis setting applies only if `$parseProvider.unwrapPromises` setting is set to true as well.",
            "params": [
                {
                    "name": "value",
                    "description": "New value.",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "Returns the current setting when used as getter and self if used as\n                        setter.",
                "type": "Boolean|self"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11195,
            "ngdoc": "service",
            "name": "$q",
            "requires": [
                "$rootScope"
            ],
            "description": "A promise/deferred implementation inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).\n\n[The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an\ninterface for interacting with an object that represents the result of an action that is\nperformed asynchronously, and may or may not be finished at any given point in time.\n\nFrom the perspective of dealing with error handling, deferred and promise APIs are to\nasynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.\n\n```js\n  // for the purpose of this example let's assume that variables `$q`, `scope` and `okToGreet`\n  // are available in the current lexical scope (they could have been injected or passed in).\n\n  function asyncGreet(name) {\n    var deferred = $q.defer();\n\n    setTimeout(function() {\n      // since this fn executes async in a future turn of the event loop, we need to wrap\n      // our code into an $apply call so that the model changes are properly observed.\n      scope.$apply(function() {\n        deferred.notify('About to greet ' + name + '.');\n\n        if (okToGreet(name)) {\n          deferred.resolve('Hello, ' + name + '!');\n        } else {\n          deferred.reject('Greeting ' + name + ' is not allowed.');\n        }\n      });\n    }, 1000);\n\n    return deferred.promise;\n  }\n\n  var promise = asyncGreet('Robin Hood');\n  promise.then(function(greeting) {\n    alert('Success: ' + greeting);\n  }, function(reason) {\n    alert('Failed: ' + reason);\n  }, function(update) {\n    alert('Got notification: ' + update);\n  });\n```\n\nAt first it might not be obvious why this extra complexity is worth the trouble. The payoff\ncomes in the way of guarantees that promise and deferred APIs make, see\nhttps://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.\n\nAdditionally the promise api allows for composition that is very hard to do with the\ntraditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.\nFor more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the\nsection on serial or parallel joining of promises.\n\n\n# The Deferred API\n\nA new instance of deferred is constructed by calling `$q.defer()`.\n\nThe purpose of the deferred object is to expose the associated Promise instance as well as APIs\nthat can be used for signaling the successful or unsuccessful completion, as well as the status\nof the task.\n\n**Methods**\n\n- `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection\n  constructed via `$q.reject`, the promise will be rejected instead.\n- `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to\n  resolving it with a rejection constructed via `$q.reject`.\n- `notify(value)` - provides updates on the status of the promise's execution. This may be called\n  multiple times before the promise is either resolved or rejected.\n\n**Properties**\n\n- promise – `{Promise}` – promise object associated with this deferred.\n\n\n# The Promise API\n\nA new promise instance is created when a deferred instance is created and can be retrieved by\ncalling `deferred.promise`.\n\nThe purpose of the promise object is to allow for interested parties to get access to the result\nof the deferred task when it completes.\n\n**Methods**\n\n- `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or\n  will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously\n  as soon as the result is available. The callbacks are called with a single argument: the result\n  or rejection reason. Additionally, the notify callback may be called zero or more times to\n  provide a progress indication, before the promise is resolved or rejected.\n\n  This method *returns a new promise* which is resolved or rejected via the return value of the\n  `successCallback`, `errorCallback`. It also notifies via the return value of the\n  `notifyCallback` method. The promise can not be resolved or rejected from the notifyCallback\n  method.\n\n- `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`\n\n- `finally(callback)` – allows you to observe either the fulfillment or rejection of a promise,\n  but to do so without modifying the final value. This is useful to release resources or do some\n  clean-up that needs to be done whether the promise was rejected or resolved. See the [full\n  specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for\n  more information.\n\n  Because `finally` is a reserved word in JavaScript and reserved keywords are not supported as\n  property names by ES3, you'll need to invoke the method like `promise['finally'](callback)` to\n  make your code IE8 and Android 2.x compatible.\n\n# Chaining promises\n\nBecause calling the `then` method of a promise returns a new derived promise, it is easily\npossible to create a chain of promises:\n\n```js\n  promiseB = promiseA.then(function(result) {\n    return result + 1;\n  });\n\n  // promiseB will be resolved immediately after promiseA is resolved and its value\n  // will be the result of promiseA incremented by 1\n```\n\nIt is possible to create chains of any length and since a promise can be resolved with another\npromise (which will defer its resolution further), it is possible to pause/defer resolution of\nthe promises at any point in the chain. This makes it possible to implement powerful APIs like\n$http's response interceptors.\n\n\n# Differences between Kris Kowal's Q and $q\n\n There are two main differences:\n\n- $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation\n  mechanism in angular, which means faster propagation of resolution or rejection into your\n  models and avoiding unnecessary browser repaints, which would result in flickering UI.\n- Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains\n  all the important functionality needed for common async tasks.\n\n # Testing\n\n ```js\n   it('should simulate promise', inject(function($q, $rootScope) {\n     var deferred = $q.defer();\n     var promise = deferred.promise;\n     var resolvedValue;\n\n     promise.then(function(value) { resolvedValue = value; });\n     expect(resolvedValue).toBeUndefined();\n\n     // Simulate resolving of promise\n     deferred.resolve(123);\n     // Note that the 'then' function does not get called synchronously.\n     // This is because we want the promise API to always be async, whether or not\n     // it got called synchronously or asynchronously.\n     expect(resolvedValue).toBeUndefined();\n\n     // Propagate promise resolution to 'then' functions using $apply().\n     $rootScope.$apply();\n     expect(resolvedValue).toEqual(123);\n   }));\n ```",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11373,
            "description": "Constructs a promise manager.",
            "params": [
                {
                    "name": "nextTick",
                    "description": "Function for executing functions in the next turn.",
                    "type": "Function(Function)"
                },
                {
                    "name": "exceptionHandler",
                    "description": "Function into which unexpected exceptions are passed for\n    debugging purposes.",
                    "type": "function(...*)"
                }
            ],
            "return": {
                "description": "Promise manager.",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11383,
            "ngdoc": "method",
            "name": "$q#defer",
            "kind": "function",
            "description": "Creates a `Deferred` object which represents a task which will finish in the future.",
            "return": {
                "description": "Returns a new instance of deferred.",
                "type": "Deferred"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11540,
            "ngdoc": "method",
            "name": "$q#reject",
            "kind": "function",
            "description": "Creates a promise that is resolved as rejected with the specified `reason`. This api should be\nused to forward rejection in a chain of promises. If you are dealing with the last promise in\na promise chain, you don't need to worry about it.\n\nWhen comparing deferreds/promises to the familiar behavior of try/catch/throw, think of\n`reject` as the `throw` keyword in JavaScript. This also means that if you \"catch\" an error via\na promise error callback and you want to forward the error to the promise derived from the\ncurrent promise, you have to \"rethrow\" the error by returning a rejection constructed via\n`reject`.\n\n```js\n  promiseB = promiseA.then(function(result) {\n    // success: do something and resolve promiseB\n    //          with the old or a new result\n    return result;\n  }, function(reason) {\n    // error: handle the error if possible and\n    //        resolve promiseB with newPromiseOrValue,\n    //        otherwise forward the rejection to promiseB\n    if (canHandle(reason)) {\n     // handle the error and recover\n     return newPromiseOrValue;\n    }\n    return $q.reject(reason);\n  });\n```",
            "params": [
                {
                    "name": "reason",
                    "description": "Constant, message, exception or an object representing the rejection reason.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns a promise that was already resolved as rejected with the `reason`.",
                "type": "Promise"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11600,
            "ngdoc": "method",
            "name": "$q#when",
            "kind": "function",
            "description": "Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.\nThis is useful when you are dealing with an object that might or might not be a promise, or if\nthe promise comes from a source that can't be trusted.",
            "params": [
                {
                    "name": "value",
                    "description": "Value or a promise",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns a promise of the passed value or promise",
                "type": "Promise"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11672,
            "ngdoc": "method",
            "name": "$q#all",
            "kind": "function",
            "description": "Combines multiple promises into a single promise that is resolved when all of the input\npromises are resolved.",
            "params": [
                {
                    "name": "promises",
                    "description": "An array or hash of promises.",
                    "type": "Array.<Promise>|Object.<Promise>"
                }
            ],
            "return": {
                "description": "Returns a single promise that will be resolved with an array/hash of values,\n  each value corresponding to the promise at the same index/key in the `promises` array/hash.\n  If any of the promises is resolved with a rejection, this resulting promise will be rejected\n  with the same rejection value.",
                "type": "Promise"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11751,
            "description": "DESIGN NOTES\n\nThe design decisions behind the scope are heavily favored for speed and memory consumption.\n\nThe typical use of scope is to watch the expressions, which most of the time return the same\nvalue as last time so we optimize the operation.\n\nClosures construction is expensive in terms of speed as well as memory:\n  - No closures, instead use prototypical inheritance for API\n  - Internal state needs to be stored on scope directly, which means that private state is\n    exposed as $$____ properties\n\nLoop operations are optimized by using while(count--) { ... }\n  - this means that in order to keep the same order of execution as addition we have to add\n    items to the array at the beginning (unshift) instead of at the end (push)\n\nChild scopes are created and removed often\n  - Using an array would be slow since inserts in middle are expensive so we use linked list\n\nThere are few watches then a lot of observers. This is why you don't want the observer to be\nimplemented in the same way as watch. Watch requires return of initialization function which\nare expensive to construct.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11777,
            "ngdoc": "provider",
            "name": "$rootScopeProvider",
            "description": "Provider for the $rootScope service.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11785,
            "ngdoc": "method",
            "name": "$rootScopeProvider#digestTtl",
            "description": "Sets the number of `$digest` iterations the scope should attempt to execute before giving up and\nassuming that the model is unstable.\n\nThe current default is 10 iterations.\n\nIn complex applications it's possible that the dependencies between `$watch`s will result in\nseveral digest iterations. However if an application needs more than the default 10 digest\niterations for its model to stabilize then you should investigate what is causing the model to\ncontinuously change during the digest.\n\nIncreasing the TTL could have performance implications, so you should not change it without\nproper justification.",
            "params": [
                {
                    "name": "limit",
                    "description": "The number of digest iterations.",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11807,
            "ngdoc": "service",
            "name": "$rootScope",
            "description": "Every application has a single root {@link ng.$rootScope.Scope scope}.\nAll other scopes are descendant scopes of the root scope. Scopes provide separation\nbetween the model and the view, via a mechanism for watching the model for changes.\nThey also provide an event emission/broadcast and subscription facility. See the\n{@link guide/scope developer guide on scopes}.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11833,
            "ngdoc": "type",
            "name": "$rootScope.Scope",
            "description": "A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the\n{@link auto.$injector $injector}. Child scopes are created using the\n{@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when\ncompiled HTML template is executed.)\n\nHere is a simple scope snippet to show how you can interact with the scope.\n```html\n<file src=\"./test/ng/rootScopeSpec.js\" tag=\"docs1\" />\n```\n\n# Inheritance\nA scope can inherit from a parent scope, as in this example:\n```js\n        var parent = $rootScope;\n        var child = parent.$new();\n\n        parent.salutation = \"Hello\";\n        child.name = \"World\";\n        expect(child.salutation).toEqual('Hello');\n\n        child.salutation = \"Welcome\";\n        expect(child.salutation).toEqual('Welcome');\n        expect(parent.salutation).toEqual('Hello');\n```",
            "params": [
                {
                    "name": "providers",
                    "description": "Map of service factory which need to be\n                                      provided for the current scope. Defaults to {@link ng}.",
                    "type": "Object.<string, function()>="
                },
                {
                    "name": "instanceCache",
                    "description": "Provides pre-instantiated services which should\n                             append/override services provided by `providers`. This is handy\n                             when unit-testing and having the need to override a default\n                             service.",
                    "type": "Object.<string, *>="
                }
            ],
            "return": {
                "description": "Newly created scope.",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11887,
            "ngdoc": "property",
            "name": "$rootScope.Scope#$id",
            "return": {
                "description": "Unique scope ID (monotonically increasing alphanumeric sequence) useful for\n  debugging.",
                "type": "Number"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11897,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$new",
            "kind": "function",
            "description": "Creates a new child {@link ng.$rootScope.Scope scope}.\n\nThe parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} and\n{@link ng.$rootScope.Scope#$digest $digest()} events. The scope can be removed from the\nscope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.\n\n{@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is\ndesired for the scope and its child scopes to be permanently detached from the parent and\nthus stop participating in model change detection and listener notification by invoking.",
            "params": [
                {
                    "name": "isolate",
                    "description": "If true, then the scope does not prototypically inherit from the\n        parent scope. The scope is isolated, as it can not see parent scope properties.\n        When creating widgets, it is useful for the widget to not accidentally read parent\n        state.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The newly created child scope.",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 11959,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$watch",
            "kind": "function",
            "description": "Registers a `listener` callback to be executed whenever the `watchExpression` changes.\n\n- The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest\n  $digest()} and should return the value that will be watched. (Since\n  {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the\n  `watchExpression` can execute multiple times per\n  {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)\n- The `listener` is called only when the value from the current `watchExpression` and the\n  previous call to `watchExpression` are not equal (with the exception of the initial run,\n  see below). Inequality is determined according to reference inequality,\n  [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)\n   via the `!==` Javascript operator, unless `objectEquality == true`\n  (see next point)\n- When `objectEquality == true`, inequality of the `watchExpression` is determined\n  according to the {@link angular.equals} function. To save the value of the object for\n  later comparison, the {@link angular.copy} function is used. This therefore means that\n  watching complex objects will have adverse memory and performance implications.\n- The watch `listener` may change the model, which may trigger other `listener`s to fire.\n  This is achieved by rerunning the watchers until no changes are detected. The rerun\n  iteration limit is 10 to prevent an infinite loop deadlock.\n\n\nIf you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,\nyou can register a `watchExpression` function with no `listener`. (Since `watchExpression`\ncan execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a\nchange is detected, be prepared for multiple calls to your listener.)\n\nAfter a watcher is registered with the scope, the `listener` fn is called asynchronously\n(via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the\nwatcher. In rare cases, this is undesirable because the listener is called when the result\nof `watchExpression` didn't change. To detect this scenario within the `listener` fn, you\ncan compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the\nlistener was called due to initialization.\n\nThe example below contains an illustration of using a function as your $watch listener\n\n\n# Example\n```js\n          // let's assume that scope was dependency injected as the $rootScope\n          var scope = $rootScope;\n          scope.name = 'misko';\n          scope.counter = 0;\n\n          expect(scope.counter).toEqual(0);\n          scope.$watch('name', function(newValue, oldValue) {\n            scope.counter = scope.counter + 1;\n          });\n          expect(scope.counter).toEqual(0);\n\n          scope.$digest();\n          // the listener is always called during the first $digest loop after it was registered\n          expect(scope.counter).toEqual(1);\n\n          scope.$digest();\n          // but now it will not be called unless the value changes\n          expect(scope.counter).toEqual(1);\n\n          scope.name = 'adam';\n          scope.$digest();\n          expect(scope.counter).toEqual(2);\n\n\n\n          // Using a listener function\n          var food;\n          scope.foodCounter = 0;\n          expect(scope.foodCounter).toEqual(0);\n          scope.$watch(\n            // This is the listener function\n            function() { return food; },\n            // This is the change handler\n            function(newValue, oldValue) {\n              if ( newValue !== oldValue ) {\n                // Only increment the counter if the value changed\n                scope.foodCounter = scope.foodCounter + 1;\n              }\n            }\n          );\n          // No digest has been run so the counter will be zero\n          expect(scope.foodCounter).toEqual(0);\n\n          // Run the digest but since food has not changed count will still be zero\n          scope.$digest();\n          expect(scope.foodCounter).toEqual(0);\n\n          // Update food and run digest.  Now the counter will increment\n          food = 'cheeseburger';\n          scope.$digest();\n          expect(scope.foodCounter).toEqual(1);\n\n```",
            "params": [
                {
                    "name": "watchExpression",
                    "description": "Expression that is evaluated on each\n   {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers\n   a call to the `listener`.\n\n   - `string`: Evaluated as {@link guide/expression expression}\n   - `function(scope)`: called with current `scope` as a parameter.",
                    "type": "(function()|string)"
                },
                {
                    "name": "listener",
                    "description": "Callback called whenever the return value of\n  the `watchExpression` changes.\n\n   - `string`: Evaluated as {@link guide/expression expression}\n   - `function(newValue, oldValue, scope)`: called with current and previous values as\n     parameters.",
                    "type": "(function()|string)="
                },
                {
                    "name": "objectEquality",
                    "description": "Compare for object equality using {@link angular.equals} instead of\n    comparing for reference equality.",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "Returns a deregistration function for this listener.",
                "type": "Function()"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12119,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$watchCollection",
            "kind": "function",
            "description": "Shallow watches the properties of an object and fires whenever any of the properties change\n(for arrays, this implies watching the array items; for object maps, this implies watching\nthe properties). If a change is detected, the `listener` callback is fired.\n\n- The `obj` collection is observed via standard $watch operation and is examined on every\n  call to $digest() to see if any items have been added, removed, or moved.\n- The `listener` is called whenever anything within the `obj` has changed. Examples include\n  adding, removing, and moving items belonging to an object or array.\n\n\n# Example\n```js\n         $scope.names = ['igor', 'matias', 'misko', 'james'];\n         $scope.dataCount = 4;\n\n         $scope.$watchCollection('names', function(newNames, oldNames) {\n           $scope.dataCount = newNames.length;\n         });\n\n         expect($scope.dataCount).toEqual(4);\n         $scope.$digest();\n\n         //still at 4 ... no changes\n         expect($scope.dataCount).toEqual(4);\n\n         $scope.names.pop();\n         $scope.$digest();\n\n         //now there's been a change\n         expect($scope.dataCount).toEqual(3);\n```",
            "params": [
                {
                    "name": "obj",
                    "description": "Evaluated as {@link guide/expression expression}. The\n   expression value should evaluate to an object or an array which is observed on each\n   {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the\n   collection will trigger a call to the `listener`.",
                    "type": "String|function(scope)"
                },
                {
                    "name": "listener",
                    "description": "a callback function called\n   when a change is detected.\n   - The `newCollection` object is the newly modified data obtained from the `obj` expression\n   - The `oldCollection` object is a copy of the former collection data.\n     Due to performance considerations, the`oldCollection` value is computed only if the\n     `listener` function declares two or more arguments.\n   - The `scope` argument refers to the current scope.",
                    "type": "Function(newCollection, oldCollection, scope)"
                }
            ],
            "return": {
                "description": "Returns a de-registration function for this listener. When the\n   de-registration function is executed, the internal watch operation is terminated.",
                "type": "Function()"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12295,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$digest",
            "kind": "function",
            "description": "Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and\nits children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change\nthe model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}\nuntil no more listeners are firing. This means that it is possible to get into an infinite\nloop. This function will throw `'Maximum iteration limit exceeded.'` if the number of\niterations exceeds 10.\n\nUsually, you don't call `$digest()` directly in\n{@link ng.directive:ngController controllers} or in\n{@link ng.$compileProvider#directive directives}.\nInstead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within\na {@link ng.$compileProvider#directive directives}), which will force a `$digest()`.\n\nIf you want to be notified whenever `$digest()` is called,\nyou can register a `watchExpression` function with\n{@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.\n\nIn unit tests, you may need to call `$digest()` to simulate the scope life cycle.\n\n# Example\n```js\n          var scope = ...;\n          scope.name = 'misko';\n          scope.counter = 0;\n\n          expect(scope.counter).toEqual(0);\n          scope.$watch('name', function(newValue, oldValue) {\n            scope.counter = scope.counter + 1;\n          });\n          expect(scope.counter).toEqual(0);\n\n          scope.$digest();\n          // the listener is always called during the first $digest loop after it was registered\n          expect(scope.counter).toEqual(1);\n\n          scope.$digest();\n          // but now it will not be called unless the value changes\n          expect(scope.counter).toEqual(1);\n\n          scope.name = 'adam';\n          scope.$digest();\n          expect(scope.counter).toEqual(2);\n```",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12454,
            "ngdoc": "event",
            "name": "$rootScope.Scope#$destroy",
            "eventtype": "broadcast on scope being destroyed",
            "description": "Broadcasted when a scope and its children are being destroyed.\n\nNote that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\nclean up DOM bindings before an element is removed from the DOM.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12466,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$destroy",
            "kind": "function",
            "description": "Removes the current scope (and all of its children) from the parent scope. Removal implies\nthat calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer\npropagate to the current scope and its children. Removal also implies that the current\nscope is eligible for garbage collection.\n\nThe `$destroy()` is usually used by directives such as\n{@link ng.directive:ngRepeat ngRepeat} for managing the\nunrolling of the loop.\n\nJust before a scope is destroyed, a `$destroy` event is broadcasted on this scope.\nApplication code can register a `$destroy` event handler that will give it a chance to\nperform any necessary cleanup.\n\nNote that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\nclean up DOM bindings before an element is removed from the DOM.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12527,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$eval",
            "kind": "function",
            "description": "Executes the `expression` on the current scope and returns the result. Any exceptions in\nthe expression are propagated (uncaught). This is useful when evaluating Angular\nexpressions.\n\n# Example\n```js\n          var scope = ng.$rootScope.Scope();\n          scope.a = 1;\n          scope.b = 2;\n\n          expect(scope.$eval('a+b')).toEqual(3);\n          expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);\n```",
            "params": [
                {
                    "name": "expression",
                    "description": "An angular expression to be executed.\n\n   - `string`: execute using the rules as defined in  {@link guide/expression expression}.\n   - `function(scope)`: execute the function with the current `scope` parameter.",
                    "type": "(string|function())="
                },
                {
                    "name": "locals",
                    "description": "Local variables object, useful for overriding values in scope.",
                    "type": "(object)="
                }
            ],
            "return": {
                "description": "The result of evaluating the expression.",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12559,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$evalAsync",
            "kind": "function",
            "description": "Executes the expression on the current scope at a later point in time.\n\nThe `$evalAsync` makes no guarantees as to when the `expression` will be executed, only\nthat:\n\n  - it will execute after the function that scheduled the evaluation (preferably before DOM\n    rendering).\n  - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after\n    `expression` execution.\n\nAny exceptions from the execution of the expression are forwarded to the\n{@link ng.$exceptionHandler $exceptionHandler} service.\n\n__Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle\nwill be scheduled. However, it is encouraged to always call code that changes the model\nfrom within an `$apply` call. That includes code evaluated via `$evalAsync`.",
            "params": [
                {
                    "name": "expression",
                    "description": "An angular expression to be executed.\n\n   - `string`: execute using the rules as defined in {@link guide/expression expression}.\n   - `function(scope)`: execute the function with the current `scope` parameter.",
                    "type": "(string|function())="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12606,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$apply",
            "kind": "function",
            "description": "`$apply()` is used to execute an expression in angular from outside of the angular\nframework. (For example from browser DOM events, setTimeout, XHR or third party libraries).\nBecause we are calling into the angular framework we need to perform proper scope life\ncycle of {@link ng.$exceptionHandler exception handling},\n{@link ng.$rootScope.Scope#$digest executing watches}.\n\n## Life cycle\n\n# Pseudo-Code of `$apply()`\n```js\n          function $apply(expr) {\n            try {\n              return $eval(expr);\n            } catch (e) {\n              $exceptionHandler(e);\n            } finally {\n              $root.$digest();\n            }\n          }\n```\n\n\nScope's `$apply()` method transitions through the following stages:\n\n1. The {@link guide/expression expression} is executed using the\n   {@link ng.$rootScope.Scope#$eval $eval()} method.\n2. Any exceptions from the execution of the expression are forwarded to the\n   {@link ng.$exceptionHandler $exceptionHandler} service.\n3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the\n   expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.",
            "params": [
                {
                    "name": "exp",
                    "description": "An angular expression to be executed.\n\n   - `string`: execute using the rules as defined in {@link guide/expression expression}.\n   - `function(scope)`: execute the function with current `scope` parameter.",
                    "type": "(string|function())="
                }
            ],
            "return": {
                "description": "The result of evaluating the expression.",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12668,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$on",
            "kind": "function",
            "description": "Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for\ndiscussion of event life cycle.\n\nThe event listener function format is: `function(event, args...)`. The `event` object\npassed into the listener has the following attributes:\n\n  - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or\n    `$broadcast`-ed.\n  - `currentScope` - `{Scope}`: the current scope which is handling the event.\n  - `name` - `{string}`: name of the event.\n  - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel\n    further event propagation (available only for events that were `$emit`-ed).\n  - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag\n    to true.\n  - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.",
            "params": [
                {
                    "name": "name",
                    "description": "Event name to listen on.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "Function to call when the event is emitted.",
                    "type": "function(event, ...args)"
                }
            ],
            "return": {
                "description": "Returns a deregistration function for this listener.",
                "type": "Function()"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12717,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$emit",
            "kind": "function",
            "description": "Dispatches an event `name` upwards through the scope hierarchy notifying the\nregistered {@link ng.$rootScope.Scope#$on} listeners.\n\nThe event life cycle starts at the scope on which `$emit` was called. All\n{@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\nnotified. Afterwards, the event traverses upwards toward the root scope and calls all\nregistered listeners along the way. The event will stop propagating if one of the listeners\ncancels it.\n\nAny exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\nonto the {@link ng.$exceptionHandler $exceptionHandler} service.",
            "params": [
                {
                    "name": "name",
                    "description": "Event name to emit.",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Optional one or more arguments which will be passed onto the event listeners.",
                    "type": "...*"
                }
            ],
            "return": {
                "description": "Event object (see {@link ng.$rootScope.Scope#$on}).",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12785,
            "ngdoc": "method",
            "name": "$rootScope.Scope#$broadcast",
            "kind": "function",
            "description": "Dispatches an event `name` downwards to all child scopes (and their children) notifying the\nregistered {@link ng.$rootScope.Scope#$on} listeners.\n\nThe event life cycle starts at the scope on which `$broadcast` was called. All\n{@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\nnotified. Afterwards, the event propagates to all direct and indirect scopes of the current\nscope and calls all registered listeners along the way. The event cannot be canceled.\n\nAny exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\nonto the {@link ng.$exceptionHandler $exceptionHandler} service.",
            "params": [
                {
                    "name": "name",
                    "description": "Event name to broadcast.",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Optional one or more arguments which will be passed onto the event listeners.",
                    "type": "...*"
                }
            ],
            "return": {
                "description": "Event object, see {@link ng.$rootScope.Scope#$on}",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12890,
            "description": "function used as an initial value for watchers.\nbecause it's unique we can easily tell it apart from other values",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12898,
            "description": "Private service to sanitize uris for links and images. Used by $compile and $sanitize.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12906,
            "description": "Retrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during a[href] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to a[href] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "params": [
                {
                    "name": "regexp",
                    "description": "New regexp to whitelist urls with.",
                    "type": "RegExp="
                }
            ],
            "return": {
                "description": "Current RegExp if called without value or self for\n   chaining otherwise.",
                "type": "RegExp|ng.$compileProvider"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 12931,
            "description": "Retrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during img[src] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to img[src] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "params": [
                {
                    "name": "regexp",
                    "description": "New regexp to whitelist urls with.",
                    "type": "RegExp="
                }
            ],
            "return": {
                "description": "Current RegExp if called without value or self for\n   chaining otherwise.",
                "type": "RegExp|ng.$compileProvider"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13033,
            "ngdoc": "service",
            "name": "$sceDelegate",
            "kind": "function",
            "description": "`$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict\nContextual Escaping (SCE)} services to AngularJS.\n\nTypically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of\nthe `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is\nbecause, while the `$sce` provides numerous shorthand methods, etc., you really only need to\noverride 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things\nwork because `$sce` delegates to `$sceDelegate` for these operations.\n\nRefer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.\n\nThe default instance of `$sceDelegate` should work out of the box with little pain.  While you\ncan override it completely to change the behavior of `$sce`, the common case would\ninvolve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting\nyour own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as\ntemplates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist\n$sceDelegateProvider.resourceUrlWhitelist} and {@link\nng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13060,
            "ngdoc": "provider",
            "name": "$sceDelegateProvider",
            "description": "The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate\n$sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure\nthat the URLs used for sourcing Angular templates are safe.  Refer {@link\nng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and\n{@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}\n\nFor the general details about this service in Angular, read the main page for {@link ng.$sce\nStrict Contextual Escaping (SCE)}.\n\n**Example**:  Consider the following case. <a name=\"example\"></a>\n\n- your app is hosted at url `http://myapp.example.com/`\n- but some of your templates are hosted on other domains you control such as\n  `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.\n- and you have an open redirect at `http://myapp.example.com/clickThru?...`.\n\nHere is what a secure configuration for this scenario might look like:\n\n<pre class=\"prettyprint\">\n   angular.module('myApp', []).config(function($sceDelegateProvider) {\n     $sceDelegateProvider.resourceUrlWhitelist([\n       // Allow same origin resource loads.\n       'self',\n       // Allow loading from our assets domain.  Notice the difference between * and **.\n       'http://srv*.assets.example.com/**']);\n\n     // The blacklist overrides the whitelist so the open redirect here is blocked.\n     $sceDelegateProvider.resourceUrlBlacklist([\n       'http://myapp.example.com/clickThru**']);\n     });\n</pre>",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13105,
            "ngdoc": "method",
            "name": "$sceDelegateProvider#resourceUrlWhitelist",
            "kind": "function",
            "params": [
                {
                    "name": "whitelist",
                    "description": "When provided, replaces the resourceUrlWhitelist with the value\n    provided.  This must be an array or null.  A snapshot of this array is used so further\n    changes to the array are ignored.\n\n    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items\n    allowed in this array.\n\n    Note: **an empty whitelist array will block all URLs**!",
                    "type": "Array="
                }
            ],
            "return": {
                "description": "the currently set whitelist array.\n\nThe **default value** when no whitelist has been explicitly set is `['self']` allowing only\nsame origin resource requests.",
                "type": "Array"
            },
            "description": "Sets/Gets the whitelist of trusted resource URLs.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13134,
            "ngdoc": "method",
            "name": "$sceDelegateProvider#resourceUrlBlacklist",
            "kind": "function",
            "params": [
                {
                    "name": "blacklist",
                    "description": "When provided, replaces the resourceUrlBlacklist with the value\n    provided.  This must be an array or null.  A snapshot of this array is used so further\n    changes to the array are ignored.\n\n    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items\n    allowed in this array.\n\n    The typical usage for the blacklist is to **block\n    [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as\n    these would otherwise be trusted but actually return content from the redirected domain.\n\n    Finally, **the blacklist overrides the whitelist** and has the final say.",
                    "type": "Array="
                }
            ],
            "return": {
                "description": "the currently set blacklist array.\n\nThe **default value** when no whitelist has been explicitly set is the empty array (i.e. there\nis no blacklist.)",
                "type": "Array"
            },
            "description": "Sets/Gets the blacklist of trusted resource URLs.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13237,
            "ngdoc": "method",
            "name": "$sceDelegate#trustAs",
            "description": "Returns an object that is trusted by angular for use in specified strict\ncontextual escaping contexts (such as ng-bind-html, ng-include, any src\nattribute interpolation, any dom event binding attribute interpolation\nsuch as for onclick,  etc.) that uses the provided value.\nSee {@link ng.$sce $sce} for enabling strict contextual escaping.",
            "params": [
                {
                    "name": "type",
                    "description": "The kind of context in which this value is safe for use.  e.g. url,\n  resourceUrl, html, js and css.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that that should be considered trusted/safe.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "A value that can be used to stand in for the provided `value` in places\nwhere Angular expects a $sce.trustAs() return value.",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13274,
            "ngdoc": "method",
            "name": "$sceDelegate#valueOf",
            "description": "If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs\n`$sceDelegate.trustAs`}, returns the value that had been passed to {@link\nng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.\n\nIf the passed parameter is not a value that had been returned by {@link\nng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.",
            "params": [
                {
                    "name": "value",
                    "description": "The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}\n     call or anything else.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The `value` that was originally provided to {@link ng.$sceDelegate#trustAs\n    `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns\n    `value` unchanged.",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13300,
            "ngdoc": "method",
            "name": "$sceDelegate#getTrusted",
            "description": "Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and\nreturns the originally supplied value if the queried context type is a supertype of the\ncreated type.  If this condition isn't satisfied, throws an exception.",
            "params": [
                {
                    "name": "type",
                    "description": "The kind of context in which this value is to be used.",
                    "type": "String"
                },
                {
                    "name": "maybeTrusted",
                    "description": "The result of a prior {@link ng.$sceDelegate#trustAs\n    `$sceDelegate.trustAs`} call.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The value the was originally provided to {@link ng.$sceDelegate#trustAs\n    `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13347,
            "ngdoc": "provider",
            "name": "$sceProvider",
            "description": "The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.\n-   enable/disable Strict Contextual Escaping (SCE) in a module\n-   override the default implementation with a custom delegate\n\nRead more about {@link ng.$sce Strict Contextual Escaping (SCE)}.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13361,
            "ngdoc": "service",
            "name": "$sce",
            "kind": "function",
            "description": "`$sce` is a service that provides Strict Contextual Escaping services to AngularJS.\n\n# Strict Contextual Escaping\n\nStrict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain\ncontexts to result in a value that is marked as safe to use for that context.  One example of\nsuch a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer\nto these contexts as privileged or SCE contexts.\n\nAs of version 1.2, Angular ships with SCE enabled by default.\n\nNote:  When enabled (the default), IE8 in quirks mode is not supported.  In this mode, IE8 allows\none to execute arbitrary javascript by the use of the expression() syntax.  Refer\n<http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.\nYou can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`\nto the top of your HTML document.\n\nSCE assists in writing code in way that (a) is secure by default and (b) makes auditing for\nsecurity vulnerabilities such as XSS, clickjacking, etc. a lot easier.\n\nHere's an example of a binding in a privileged context:\n\n<pre class=\"prettyprint\">\n    <input ng-model=\"userHtml\">\n    <div ng-bind-html=\"userHtml\">\n</pre>\n\nNotice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE\ndisabled, this application allows the user to render arbitrary HTML into the DIV.\nIn a more realistic example, one may be rendering user comments, blog articles, etc. via\nbindings.  (HTML is just one example of a context where rendering user controlled input creates\nsecurity vulnerabilities.)\n\nFor the case of HTML, you might use a library, either on the client side, or on the server side,\nto sanitize unsafe HTML before binding to the value and rendering it in the document.\n\nHow would you ensure that every place that used these types of bindings was bound to a value that\nwas sanitized by your library (or returned as safe for rendering by your server?)  How can you\nensure that you didn't accidentally delete the line that sanitized the value, or renamed some\nproperties/fields and forgot to update the binding to the sanitized value?\n\nTo be secure by default, you want to ensure that any such bindings are disallowed unless you can\ndetermine that something explicitly says it's safe to use a value for binding in that\ncontext.  You can then audit your code (a simple grep would do) to ensure that this is only done\nfor those values that you can easily tell are safe - because they were received from your server,\nsanitized by your library, etc.  You can organize your codebase to help with this - perhaps\nallowing only the files in a specific directory to do this.  Ensuring that the internal API\nexposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.\n\nIn the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}\n(and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to\nobtain values that will be accepted by SCE / privileged contexts.\n\n\n## How does it work?\n\nIn privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted\n$sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link\nng.$sce#parse $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the\n{@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.\n\nAs an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link\nng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly\nsimplified):\n\n<pre class=\"prettyprint\">\n  var ngBindHtmlDirective = ['$sce', function($sce) {\n    return function(scope, element, attr) {\n      scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {\n        element.html(value || '');\n      });\n    };\n  }];\n</pre>\n\n## Impact on loading templates\n\nThis applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as\n`templateUrl`'s specified by {@link guide/directive directives}.\n\nBy default, Angular only loads templates from the same domain and protocol as the application\ndocument.  This is done by calling {@link ng.$sce#getTrustedResourceUrl\n$sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or\nprotocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist\nthem} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.\n\n*Please note*:\nThe browser's\n[Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\nand [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\npolicy apply in addition to this and may further restrict whether the template is successfully\nloaded.  This means that without the right CORS policy, loading templates from a different domain\nwon't work on all browsers.  Also, loading templates from `file://` URL does not work on some\nbrowsers.\n\n## This feels like too much overhead for the developer?\n\nIt's important to remember that SCE only applies to interpolation expressions.\n\nIf your expressions are constant literals, they're automatically trusted and you don't need to\ncall `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.\n`<div ng-bind-html=\"'<b>implicitly trusted</b>'\"></div>`) just works.\n\nAdditionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them\nthrough {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.\n\nThe included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load\ntemplates in `ng-include` from your application's domain without having to even know about SCE.\nIt blocks loading templates from other domains or loading templates over http from an https\nserved document.  You can change these by setting your own custom {@link\nng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link\nng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.\n\nThis significantly reduces the overhead.  It is far easier to pay the small overhead and have an\napplication that's secure and can be audited to verify that with much more ease than bolting\nsecurity onto an application later.\n\n<a name=\"contexts\"></a>\n## What trusted context types are supported?\n\n| Context             | Notes          |\n|---------------------|----------------|\n| `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |\n| `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |\n| `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |\n| `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |\n| `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |\n\n## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name=\"resourceUrlPatternItem\"></a>\n\n Each element in these arrays must be one of the following:\n\n - **'self'**\n   - The special **string**, `'self'`, can be used to match against all URLs of the **same\n     domain** as the application document using the **same protocol**.\n - **String** (except the special value `'self'`)\n   - The string is matched against the full *normalized / absolute URL* of the resource\n     being tested (substring matches are not good enough.)\n   - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters\n     match themselves.\n   - `*`: matches zero or more occurrences of any character other than one of the following 6\n     characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use\n     in a whitelist.\n   - `**`: matches zero or more occurrences of *any* character.  As such, it's not\n     not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.\n     http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might\n     not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.\n     http://foo.example.com/templates/**).\n - **RegExp** (*see caveat below*)\n   - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax\n     (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to\n     accidentally introduce a bug when one updates a complex expression (imho, all regexes should\n     have good test coverage.).  For instance, the use of `.` in the regex is correct only in a\n     small number of cases.  A `.` character in the regex used when matching the scheme or a\n     subdomain could be matched against a `:` or literal `.` that was likely not intended.   It\n     is highly recommended to use the string patterns and only fall back to regular expressions\n     if they as a last resort.\n   - The regular expression must be an instance of RegExp (i.e. not a string.)  It is\n     matched against the **entire** *normalized / absolute URL* of the resource being tested\n     (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags\n     present on the RegExp (such as multiline, global, ignoreCase) are ignored.\n   - If you are generating your JavaScript from some other templating engine (not\n     recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),\n     remember to escape your regular expression (and be aware that you might need more than\n     one level of escaping depending on your templating engine and the way you interpolated\n     the value.)  Do make use of your platform's escaping mechanism as it might be good\n     enough before coding your own.  e.g. Ruby has\n     [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)\n     and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).\n     Javascript lacks a similar built in function for escaping.  Take a look at Google\n     Closure library's [goog.string.regExpEscape(s)](\n     http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).\n\nRefer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.\n\n## Show me an example using SCE.",
            "example": [
                "\n<example module=\"mySceApp\" deps=\"angular-sanitize.js\">\n<file name=\"index.html\">\n <div ng-controller=\"myAppController as myCtrl\">\n   <i ng-bind-html=\"myCtrl.explicitlyTrustedHtml\" id=\"explicitlyTrustedHtml\"></i><br><br>\n   <b>User comments</b><br>\n   By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when\n   $sanitize is available.  If $sanitize isn't available, this results in an error instead of an\n   exploit.\n   <div class=\"well\">\n     <div ng-repeat=\"userComment in myCtrl.userComments\">\n       <b>{{userComment.name}}</b>:\n       <span ng-bind-html=\"userComment.htmlComment\" class=\"htmlComment\"></span>\n       <br>\n     </div>\n   </div>\n </div>\n</file>\n\n<file name=\"script.js\">\n var mySceApp = angular.module('mySceApp', ['ngSanitize']);\n\n mySceApp.controller(\"myAppController\", function myAppController($http, $templateCache, $sce) {\n   var self = this;\n   $http.get(\"test_data.json\", {cache: $templateCache}).success(function(userComments) {\n     self.userComments = userComments;\n   });\n   self.explicitlyTrustedHtml = $sce.trustAsHtml(\n       '<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +\n       'sanitization.&quot;\">Hover over this text.</span>');\n });\n</file>\n\n<file name=\"test_data.json\">\n[\n { \"name\": \"Alice\",\n   \"htmlComment\":\n       \"<span onmouseover='this.textContent=\\\"PWN3D!\\\"'>Is <i>anyone</i> reading this?</span>\"\n },\n { \"name\": \"Bob\",\n   \"htmlComment\": \"<i>Yes!</i>  Am I the only other one?\"\n }\n]\n</file>\n\n<file name=\"protractor.js\" type=\"protractor\">\n describe('SCE doc demo', function() {\n   it('should sanitize untrusted values', function() {\n     expect(element(by.css('.htmlComment')).getInnerHtml())\n         .toBe('<span>Is <i>anyone</i> reading this?</span>');\n   });\n\n   it('should NOT sanitize explicitly trusted values', function() {\n     expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(\n         '<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +\n         'sanitization.&quot;\">Hover over this text.</span>');\n   });\n });\n</file>\n</example>\n\n\n\n## Can I disable SCE completely?\n\nYes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits\nfor little coding overhead.  It will be much harder to take an SCE disabled application and\neither secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE\nfor cases where you have a lot of existing code that was written before SCE was introduced and\nyou're migrating them a module at a time.\n\nThat said, here's how you can completely disable SCE:\n\n<pre class=\"prettyprint\">\n  angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {\n    // Completely disable SCE.  For demonstration purposes only!\n    // Do not use in new projects.\n    $sceProvider.enabled(false);\n  });\n</pre>\n"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13632,
            "ngdoc": "method",
            "name": "$sceProvider#enabled",
            "kind": "function",
            "params": [
                {
                    "name": "value",
                    "description": "If provided, then enables/disables SCE.",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "true if SCE is enabled, false otherwise.",
                "type": "Boolean"
            },
            "description": "Enables/disables SCE and returns the current value.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13710,
            "ngdoc": "method",
            "name": "$sce#isEnabled",
            "kind": "function",
            "return": {
                "description": "true if SCE is enabled, false otherwise.  If you want to set the value, you\nhave to do it at module config time on {@link ng.$sceProvider $sceProvider}.",
                "type": "Boolean"
            },
            "description": "Returns a boolean indicating if SCE is enabled.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13733,
            "ngdoc": "method",
            "name": "$sce#parse",
            "description": "Converts Angular {@link guide/expression expression} into a function.  This is like {@link\nng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it\nwraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,\n*result*)}",
            "params": [
                {
                    "name": "type",
                    "description": "The kind of SCE context in which this result will be used.",
                    "type": "String"
                },
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.",
                "type": "Function(context, locals)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13763,
            "ngdoc": "method",
            "name": "$sce#trustAs",
            "description": "Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,\nreturns an object that is trusted by angular for use in specified strict contextual\nescaping contexts (such as ng-bind-html, ng-include, any src attribute\ninterpolation, any dom event binding attribute interpolation such as for onclick,  etc.)\nthat uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual\nescaping.",
            "params": [
                {
                    "name": "type",
                    "description": "The kind of context in which this value is safe for use.  e.g. url,\n  resource_url, html, js and css.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that that should be considered trusted/safe.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "A value that can be used to stand in for the provided `value` in places\nwhere Angular expects a $sce.trustAs() return value.",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13782,
            "ngdoc": "method",
            "name": "$sce#trustAsHtml",
            "description": "Shorthand method.  `$sce.trustAsHtml(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to trustAs.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "An object that can be passed to {@link ng.$sce#getTrustedHtml\n    $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives\n    only accept expressions that are either literal constants or are the\n    return value of {@link ng.$sce#trustAs $sce.trustAs}.)",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13797,
            "ngdoc": "method",
            "name": "$sce#trustAsUrl",
            "description": "Shorthand method.  `$sce.trustAsUrl(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to trustAs.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "An object that can be passed to {@link ng.$sce#getTrustedUrl\n    $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives\n    only accept expressions that are either literal constants or are the\n    return value of {@link ng.$sce#trustAs $sce.trustAs}.)",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13812,
            "ngdoc": "method",
            "name": "$sce#trustAsResourceUrl",
            "description": "Shorthand method.  `$sce.trustAsResourceUrl(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to trustAs.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "An object that can be passed to {@link ng.$sce#getTrustedResourceUrl\n    $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives\n    only accept expressions that are either literal constants or are the return\n    value of {@link ng.$sce#trustAs $sce.trustAs}.)",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13827,
            "ngdoc": "method",
            "name": "$sce#trustAsJs",
            "description": "Shorthand method.  `$sce.trustAsJs(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to trustAs.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "An object that can be passed to {@link ng.$sce#getTrustedJs\n    $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives\n    only accept expressions that are either literal constants or are the\n    return value of {@link ng.$sce#trustAs $sce.trustAs}.)",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13842,
            "ngdoc": "method",
            "name": "$sce#getTrusted",
            "description": "Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,\ntakes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the\noriginally supplied value if the queried context type is a supertype of the created type.\nIf this condition isn't satisfied, throws an exception.",
            "params": [
                {
                    "name": "type",
                    "description": "The kind of context in which this value is to be used.",
                    "type": "String"
                },
                {
                    "name": "maybeTrusted",
                    "description": "The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}\n                        call.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The value the was originally provided to\n             {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.\n             Otherwise, throws an exception.",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13860,
            "ngdoc": "method",
            "name": "$sce#getTrustedHtml",
            "description": "Shorthand method.  `$sce.getTrustedHtml(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to pass to `$sce.getTrusted`.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The return value of `$sce.getTrusted($sce.HTML, value)`",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13872,
            "ngdoc": "method",
            "name": "$sce#getTrustedCss",
            "description": "Shorthand method.  `$sce.getTrustedCss(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to pass to `$sce.getTrusted`.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The return value of `$sce.getTrusted($sce.CSS, value)`",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13884,
            "ngdoc": "method",
            "name": "$sce#getTrustedUrl",
            "description": "Shorthand method.  `$sce.getTrustedUrl(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to pass to `$sce.getTrusted`.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The return value of `$sce.getTrusted($sce.URL, value)`",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13896,
            "ngdoc": "method",
            "name": "$sce#getTrustedResourceUrl",
            "description": "Shorthand method.  `$sce.getTrustedResourceUrl(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to pass to `$sceDelegate.getTrusted`.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13908,
            "ngdoc": "method",
            "name": "$sce#getTrustedJs",
            "description": "Shorthand method.  `$sce.getTrustedJs(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}",
            "params": [
                {
                    "name": "value",
                    "description": "The value to pass to `$sce.getTrusted`.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The return value of `$sce.getTrusted($sce.JS, value)`",
                "type": "*"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13920,
            "ngdoc": "method",
            "name": "$sce#parseAsHtml",
            "description": "Shorthand method.  `$sce.parseAsHtml(expression string)` →\n    {@link ng.$sce#parse `$sce.parseAs($sce.HTML, value)`}",
            "params": [
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.",
                "type": "Function(context, locals)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13937,
            "ngdoc": "method",
            "name": "$sce#parseAsCss",
            "description": "Shorthand method.  `$sce.parseAsCss(value)` →\n    {@link ng.$sce#parse `$sce.parseAs($sce.CSS, value)`}",
            "params": [
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.",
                "type": "Function(context, locals)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13954,
            "ngdoc": "method",
            "name": "$sce#parseAsUrl",
            "description": "Shorthand method.  `$sce.parseAsUrl(value)` →\n    {@link ng.$sce#parse `$sce.parseAs($sce.URL, value)`}",
            "params": [
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.",
                "type": "Function(context, locals)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13971,
            "ngdoc": "method",
            "name": "$sce#parseAsResourceUrl",
            "description": "Shorthand method.  `$sce.parseAsResourceUrl(value)` →\n    {@link ng.$sce#parse `$sce.parseAs($sce.RESOURCE_URL, value)`}",
            "params": [
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.",
                "type": "Function(context, locals)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 13988,
            "ngdoc": "method",
            "name": "$sce#parseAsJs",
            "description": "Shorthand method.  `$sce.parseAsJs(value)` →\n    {@link ng.$sce#parse `$sce.parseAs($sce.JS, value)`}",
            "params": [
                {
                    "name": "expression",
                    "description": "String expression to compile.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a function which represents the compiled expression:\n\n   * `context` – `{object}` – an object against which any expressions embedded in the strings\n     are evaluated against (typically a scope object).\n   * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     `context`.",
                "type": "Function(context, locals)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14027,
            "description": "This is very simple implementation of testing browser's features.",
            "name": "{boolean} animations Does the browser support CSS animation events ?",
            "requires": [
                "$window",
                "$document"
            ],
            "itemtype": "property",
            "type": "Boolean",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14125,
            "ngdoc": "service",
            "name": "$timeout",
            "description": "Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch\nblock and delegates any exceptions to\n{@link ng.$exceptionHandler $exceptionHandler} service.\n\nThe return value of registering a timeout function is a promise, which will be resolved when\nthe timeout is reached and the timeout function is executed.\n\nTo cancel a timeout request, call `$timeout.cancel(promise)`.\n\nIn tests you can use {@link ngMock.$timeout `$timeout.flush()`} to\nsynchronously flush the queue of deferred functions.",
            "params": [
                {
                    "name": "fn",
                    "description": "A function, whose execution should be delayed.",
                    "type": "Function()"
                },
                {
                    "name": "delay",
                    "description": "Delay in milliseconds.",
                    "type": "Number=",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "invokeApply",
                    "description": "If set to `false` skips model dirty checking, otherwise\n  will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "Promise that will be resolved when the timeout is reached. The value this\n  promise will be resolved with is the return value of the `fn` function.",
                "type": "Promise"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14177,
            "ngdoc": "method",
            "name": "$timeout#cancel",
            "description": "Cancels a task associated with the `promise`. As a result of this, the promise will be\nresolved with a rejection.",
            "params": [
                {
                    "name": "promise",
                    "description": "Promise returned by the `$timeout` function.",
                    "type": "Promise="
                }
            ],
            "return": {
                "description": "Returns `true` if the task hasn't executed yet and was successfully\n  canceled.",
                "type": "Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14213,
            "description": "Normalizes and parses a URL.",
            "kind": "function",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to be parsed.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the normalized URL as a dictionary.\n  | member name   | Description    |\n   |---------------|----------------|\n   | href          | A normalized version of the provided URL if it was not an absolute URL |\n   | protocol      | The protocol including the trailing colon                              |\n   | host          | The host and port (if the port is non-default) of the normalizedUrl    |\n   | search        | The search params, minus the question mark                             |\n   | hash          | The hash string, minus the hash symbol\n   | hostname      | The hostname\n   | port          | The port, without \":\"\n   | pathname      | The pathname, beginning with \"/\"",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14292,
            "description": "Parse a request URL and determine whether this is a same-origin request as the application document.",
            "params": [
                {
                    "name": "requestUrl",
                    "description": "The url of the request as a string that will be resolved\nor a parsed URL object.",
                    "type": "String|object"
                }
            ],
            "return": {
                "description": "Whether the request is for the same origin as the application document.",
                "type": "Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14305,
            "ngdoc": "service",
            "name": "$window",
            "description": "A reference to the browser's `window` object. While `window`\nis globally available in JavaScript, it causes testability problems, because\nit is a global variable. In angular we always refer to it through the\n`$window` service, so it may be overridden, removed or mocked for testing.\n\nExpressions, like the one defined for the `ngClick` directive in the example\nbelow, are evaluated with respect to the current scope.  Therefore, there is\nno risk of inadvertently coding in a dependency on a global value in such an\nexpression.",
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <script>\n        function Ctrl($scope, $window) {\n          $scope.greeting = 'Hello, World!';\n          $scope.doGreeting = function(greeting) {\n              $window.alert(greeting);\n          };\n        }\n      </script>\n      <div ng-controller=\"Ctrl\">\n        <input type=\"text\" ng-model=\"greeting\" />\n        <button ng-click=\"doGreeting(greeting)\">ALERT</button>\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n     it('should display the greeting in the input box', function() {\n      element(by.model('greeting')).sendKeys('Hello, E2E Tests');\n      // If we click the button it will block the test runner\n      // element(':button').click();\n     });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14349,
            "ngdoc": "provider",
            "name": "$filterProvider",
            "description": "Filters are just functions which transform input to an output. However filters need to be\nDependency Injected. To achieve this a filter definition consists of a factory function which is\nannotated with dependencies and is responsible for creating a filter function.\n\n```js\n  // Filter registration\n  function MyModule($provide, $filterProvider) {\n    // create a service to demonstrate injection (not always needed)\n    $provide.value('greet', function(name){\n      return 'Hello ' + name + '!';\n    });\n\n    // register a filter factory which uses the\n    // greet service to demonstrate DI.\n    $filterProvider.register('greet', function(greet){\n      // return the filter function which uses the greet service\n      // to generate salutation\n      return function(text) {\n        // filters need to be forgiving so check input validity\n        return text && greet(text) || text;\n      };\n    });\n  }\n```\n\nThe filter function is registered with the `$injector` under the filter name suffix with\n`Filter`.\n\n```js\n  it('should be the same instance', inject(\n    function($filterProvider) {\n      $filterProvider.register('reverse', function(){\n        return ...;\n      });\n    },\n    function($filter, reverseFilter) {\n      expect($filter('reverse')).toBe(reverseFilter);\n    });\n```\n\n\nFor more information about how angular filters work, and how to create your own filters, see\n{@link guide/filter Filters} in the Angular Developer Guide.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14398,
            "ngdoc": "method",
            "name": "$filterProvider#register",
            "description": "Register filter factory function.",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the filter.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The filter factory function which is injectable.",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14409,
            "ngdoc": "service",
            "name": "$filter",
            "kind": "function",
            "description": "Filters are used for formatting data displayed to the user.\n\nThe general syntax in templates is as follows:\n\n        {{ expression [| filter_name[:parameter_value] ... ] }}",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the filter function to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the filter function",
                "type": "Function"
            },
            "example": [
                "\n  <example name=\"$filter\" module=\"filterExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"MainCtrl\">\n       <h3>{{ originalText }}</h3>\n       <h3>{{ filteredText }}</h3>\n      </div>\n    </file>\n\n    <file name=\"script.js\">\n     angular.module('filterExample', [])\n     .controller('MainCtrl', function($scope, $filter) {\n       $scope.originalText = 'hello';\n       $scope.filteredText = $filter('uppercase')($scope.originalText);\n     });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14444,
            "ngdoc": "method",
            "name": "$controllerProvider#register",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the filter function, or an object map of filters where\n   the keys are the filter names and the values are the filter factories.",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "Registered filter instance, or if a map of filters was provided then a map\n   of the registered filter instances.",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14496,
            "ngdoc": "filter",
            "name": "filter",
            "kind": "function",
            "description": "Selects a subset of items from `array` and returns it as a new array.",
            "params": [
                {
                    "name": "array",
                    "description": "The source array.",
                    "type": "Array"
                },
                {
                    "name": "expression",
                    "description": "The predicate to be used for selecting items from\n  `array`.\n\n  Can be one of:\n\n  - `string`: The string is evaluated as an expression and the resulting value is used for substring match against\n    the contents of the `array`. All strings or objects with string properties in `array` that contain this string\n    will be returned. The predicate can be negated by prefixing the string with `!`.\n\n  - `Object`: A pattern object can be used to filter specific properties on objects contained\n    by `array`. For example `{name:\"M\", phone:\"1\"}` predicate will return an array of items\n    which have property `name` containing \"M\" and property `phone` containing \"1\". A special\n    property name `$` can be used (as in `{$:\"text\"}`) to accept a match against any\n    property of the object. That's equivalent to the simple substring match with a `string`\n    as described above.\n\n  - `function(value)`: A predicate function can be used to write arbitrary filters. The function is\n    called for each element of `array`. The final result is an array of those elements that\n    the predicate returned true for.",
                    "type": "String|Object|function()"
                },
                {
                    "name": "comparator",
                    "description": "Comparator which is used in\n    determining if the expected value (from the filter expression) and actual value (from\n    the object in the array) should be considered a match.\n\n  Can be one of:\n\n  - `function(actual, expected)`:\n    The function will be given the object value and the predicate value to compare and\n    should return true if the item should be included in filtered result.\n\n  - `true`: A shorthand for `function(actual, expected) { return angular.equals(expected, actual)}`.\n    this is essentially strict comparison of expected and actual.\n\n  - `false|undefined`: A short hand for a function which will look for a substring match in case\n    insensitive way.",
                    "type": "Function(actual, expected)|true|undefined"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <div ng-init=\"friends = [{name:'John', phone:'555-1276'},\n                               {name:'Mary', phone:'800-BIG-MARY'},\n                               {name:'Mike', phone:'555-4321'},\n                               {name:'Adam', phone:'555-5678'},\n                               {name:'Julie', phone:'555-8765'},\n                               {name:'Juliette', phone:'555-5678'}]\"></div>\n\n      Search: <input ng-model=\"searchText\">\n      <table id=\"searchTextResults\">\n        <tr><th>Name</th><th>Phone</th></tr>\n        <tr ng-repeat=\"friend in friends | filter:searchText\">\n          <td>{{friend.name}}</td>\n          <td>{{friend.phone}}</td>\n        </tr>\n      </table>\n      <hr>\n      Any: <input ng-model=\"search.$\"> <br>\n      Name only <input ng-model=\"search.name\"><br>\n      Phone only <input ng-model=\"search.phone\"><br>\n      Equality <input type=\"checkbox\" ng-model=\"strict\"><br>\n      <table id=\"searchObjResults\">\n        <tr><th>Name</th><th>Phone</th></tr>\n        <tr ng-repeat=\"friendObj in friends | filter:search:strict\">\n          <td>{{friendObj.name}}</td>\n          <td>{{friendObj.phone}}</td>\n        </tr>\n      </table>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var expectFriendNames = function(expectedNames, key) {\n        element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {\n          arr.forEach(function(wd, i) {\n            expect(wd.getText()).toMatch(expectedNames[i]);\n          });\n        });\n      };\n\n      it('should search across all fields when filtering with a string', function() {\n        var searchText = element(by.model('searchText'));\n        searchText.clear();\n        searchText.sendKeys('m');\n        expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');\n\n        searchText.clear();\n        searchText.sendKeys('76');\n        expectFriendNames(['John', 'Julie'], 'friend');\n      });\n\n      it('should search in specific fields when filtering with a predicate object', function() {\n        var searchAny = element(by.model('search.$'));\n        searchAny.clear();\n        searchAny.sendKeys('i');\n        expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');\n      });\n      it('should use a equal comparison when comparator is true', function() {\n        var searchName = element(by.model('search.name'));\n        var strict = element(by.model('strict'));\n        searchName.clear();\n        searchName.sendKeys('Julie');\n        strict.click();\n        expectFriendNames(['Julie'], 'friendObj');\n      });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14715,
            "ngdoc": "filter",
            "name": "currency",
            "kind": "function",
            "description": "Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default\nsymbol for current locale is used.",
            "params": [
                {
                    "name": "amount",
                    "description": "Input to filter.",
                    "type": "Number"
                },
                {
                    "name": "symbol",
                    "description": "Currency symbol or identifier to be displayed.",
                    "type": "String="
                }
            ],
            "return": {
                "description": "Formatted number.",
                "type": "String"
            },
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <script>\n        function Ctrl($scope) {\n          $scope.amount = 1234.56;\n        }\n      </script>\n      <div ng-controller=\"Ctrl\">\n        <input type=\"number\" ng-model=\"amount\"> <br>\n        default currency symbol ($): <span id=\"currency-default\">{{amount | currency}}</span><br>\n        custom currency identifier (USD$): <span>{{amount | currency:\"USD$\"}}</span>\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should init with 1234.56', function() {\n        expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');\n        expect(element(by.binding('amount | currency:\"USD$\"')).getText()).toBe('USD$1,234.56');\n      });\n      it('should update', function() {\n        if (browser.params.browser == 'safari') {\n          // Safari does not understand the minus key. See\n          // https://github.com/angular/protractor/issues/481\n          return;\n        }\n        element(by.model('amount')).clear();\n        element(by.model('amount')).sendKeys('-1234');\n        expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');\n        expect(element(by.binding('amount | currency:\"USD$\"')).getText()).toBe('(USD$1,234.00)');\n      });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14772,
            "ngdoc": "filter",
            "name": "number",
            "kind": "function",
            "description": "Formats a number as text.\n\nIf the input is not a number an empty string is returned.",
            "params": [
                {
                    "name": "number",
                    "description": "Number to format.",
                    "type": "Number|string"
                },
                {
                    "name": "fractionSize",
                    "description": "Number of decimal places to round the number to.\nIf this is not provided then the fraction size is computed from the current locale's number\nformatting pattern. In the case of the default locale, it will be 3.",
                    "type": "(number|string)="
                }
            ],
            "return": {
                "description": "Number rounded to decimalPlaces and places a “,” after each third digit.",
                "type": "String"
            },
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <script>\n        function Ctrl($scope) {\n          $scope.val = 1234.56789;\n        }\n      </script>\n      <div ng-controller=\"Ctrl\">\n        Enter number: <input ng-model='val'><br>\n        Default formatting: <span id='number-default'>{{val | number}}</span><br>\n        No fractions: <span>{{val | number:0}}</span><br>\n        Negative number: <span>{{-val | number:4}}</span>\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should format numbers', function() {\n        expect(element(by.id('number-default')).getText()).toBe('1,234.568');\n        expect(element(by.binding('val | number:0')).getText()).toBe('1,235');\n        expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');\n      });\n\n      it('should update', function() {\n        element(by.model('val')).clear();\n        element(by.model('val')).sendKeys('3374.333');\n        expect(element(by.id('number-default')).getText()).toBe('3,374.333');\n        expect(element(by.binding('val | number:0')).getText()).toBe('3,374');\n        expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');\n     });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 14984,
            "ngdoc": "filter",
            "name": "date",
            "kind": "function",
            "description": "Formats `date` to a string based on the requested `format`.\n\n  `format` string can be composed of the following elements:\n\n  * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)\n  * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n  * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)\n  * `'MMMM'`: Month in year (January-December)\n  * `'MMM'`: Month in year (Jan-Dec)\n  * `'MM'`: Month in year, padded (01-12)\n  * `'M'`: Month in year (1-12)\n  * `'dd'`: Day in month, padded (01-31)\n  * `'d'`: Day in month (1-31)\n  * `'EEEE'`: Day in Week,(Sunday-Saturday)\n  * `'EEE'`: Day in Week, (Sun-Sat)\n  * `'HH'`: Hour in day, padded (00-23)\n  * `'H'`: Hour in day (0-23)\n  * `'hh'`: Hour in am/pm, padded (01-12)\n  * `'h'`: Hour in am/pm, (1-12)\n  * `'mm'`: Minute in hour, padded (00-59)\n  * `'m'`: Minute in hour (0-59)\n  * `'ss'`: Second in minute, padded (00-59)\n  * `'s'`: Second in minute (0-59)\n  * `'.sss' or ',sss'`: Millisecond in second, padded (000-999)\n  * `'a'`: am/pm marker\n  * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)\n\n  `format` string can also be one of the following predefined\n  {@link guide/i18n localizable formats}:\n\n  * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale\n    (e.g. Sep 3, 2010 12:05:08 pm)\n  * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 pm)\n  * `'fullDate'`: equivalent to `'EEEE, MMMM d,y'` for en_US  locale\n    (e.g. Friday, September 3, 2010)\n  * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)\n  * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)\n  * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)\n  * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 pm)\n  * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 pm)\n\n  `format` string can contain literal values. These need to be quoted with single quotes (e.g.\n  `\"h 'in the morning'\"`). In order to output single quote, use two single quotes in a sequence\n  (e.g. `\"h 'o''clock'\"`).",
            "params": [
                {
                    "name": "date",
                    "description": "Date to format either as Date object, milliseconds (string or\n   number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.SSSZ and its\n   shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is\n   specified in the string input, the time is considered to be in the local timezone.",
                    "type": "(Date|number|string)"
                },
                {
                    "name": "format",
                    "description": "Formatting rules (see Description). If not specified,\n   `mediumDate` is used.",
                    "type": "String="
                }
            ],
            "return": {
                "description": "Formatted string or the input if input is not recognized as date/millis.",
                "type": "String"
            },
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:\n          <span>{{1288323623006 | date:'medium'}}</span><br>\n      <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:\n         <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>\n      <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:\n         <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should format date', function() {\n        expect(element(by.binding(\"1288323623006 | date:'medium'\")).getText()).\n           toMatch(/Oct 2\\d, 2010 \\d{1,2}:\\d{2}:\\d{2} (AM|PM)/);\n        expect(element(by.binding(\"1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'\")).getText()).\n           toMatch(/2010\\-10\\-2\\d \\d{2}:\\d{2}:\\d{2} (\\-|\\+)?\\d{4}/);\n        expect(element(by.binding(\"'1288323623006' | date:'MM/dd/yyyy @ h:mma'\")).getText()).\n           toMatch(/10\\/2\\d\\/2010 @ \\d{1,2}:\\d{2}(AM|PM)/);\n      });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15141,
            "ngdoc": "filter",
            "name": "json",
            "kind": "function",
            "description": "Allows you to convert a JavaScript object into JSON string.\n\n  This filter is mostly useful for debugging. When using the double curly {{value}} notation\n  the binding is automatically converted to JSON.",
            "params": [
                {
                    "name": "object",
                    "description": "Any JavaScript object (including arrays and primitive types) to filter.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "JSON string.",
                "type": "String"
            },
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <pre>{{ {'name':'value'} | json }}</pre>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should jsonify filtered objects', function() {\n        expect(element(by.binding(\"{'name':'value'}\")).getText()).toMatch(/\\{\\n  \"name\": ?\"value\"\\n}/);\n      });\n    </file>\n  </example>\n"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15176,
            "ngdoc": "filter",
            "name": "lowercase",
            "kind": "function",
            "description": "Converts string to lowercase.",
            "see": [
                "angular.lowercase"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15187,
            "ngdoc": "filter",
            "name": "uppercase",
            "kind": "function",
            "description": "Converts string to uppercase.",
            "see": [
                "angular.uppercase"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15197,
            "ngdoc": "filter",
            "name": "limitTo",
            "kind": "function",
            "description": "Creates a new array or string containing only a specified number of elements. The elements\nare taken from either the beginning or the end of the source array or string, as specified by\nthe value and sign (positive or negative) of `limit`.",
            "params": [
                {
                    "name": "input",
                    "description": "Source array or string to be limited.",
                    "type": "Array|string"
                },
                {
                    "name": "limit",
                    "description": "The length of the returned array or string. If the `limit` number\n    is positive, `limit` number of items from the beginning of the source array/string are copied.\n    If the number is negative, `limit` number  of items from the end of the source array/string\n    are copied. The `limit` will be trimmed if it exceeds `array.length`",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "A new sub-array or substring of length `limit` or less if input array\n    had less than `limit` elements.",
                "type": "Array|string"
            },
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <script>\n        function Ctrl($scope) {\n          $scope.numbers = [1,2,3,4,5,6,7,8,9];\n          $scope.letters = \"abcdefghi\";\n          $scope.numLimit = 3;\n          $scope.letterLimit = 3;\n        }\n      </script>\n      <div ng-controller=\"Ctrl\">\n        Limit {{numbers}} to: <input type=\"integer\" ng-model=\"numLimit\">\n        <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>\n        Limit {{letters}} to: <input type=\"integer\" ng-model=\"letterLimit\">\n        <p>Output letters: {{ letters | limitTo:letterLimit }}</p>\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var numLimitInput = element(by.model('numLimit'));\n      var letterLimitInput = element(by.model('letterLimit'));\n      var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));\n      var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));\n\n      it('should limit the number array to first three items', function() {\n        expect(numLimitInput.getAttribute('value')).toBe('3');\n        expect(letterLimitInput.getAttribute('value')).toBe('3');\n        expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');\n        expect(limitedLetters.getText()).toEqual('Output letters: abc');\n      });\n\n      it('should update the output when -3 is entered', function() {\n        numLimitInput.clear();\n        numLimitInput.sendKeys('-3');\n        letterLimitInput.clear();\n        letterLimitInput.sendKeys('-3');\n        expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');\n        expect(limitedLetters.getText()).toEqual('Output letters: ghi');\n      });\n\n      it('should not exceed the maximum size of input array', function() {\n        numLimitInput.clear();\n        numLimitInput.sendKeys('100');\n        letterLimitInput.clear();\n        letterLimitInput.sendKeys('100');\n        expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');\n        expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');\n      });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15310,
            "ngdoc": "filter",
            "name": "orderBy",
            "kind": "function",
            "description": "Orders a specified `array` by the `expression` predicate. It is ordered alphabetically\nfor strings and numerically for numbers. Note: if you notice numbers are not being sorted\ncorrectly, make sure they are actually being saved as numbers and not strings.",
            "params": [
                {
                    "name": "array",
                    "description": "The array to sort.",
                    "type": "Array"
                },
                {
                    "name": "expression",
                    "description": "A predicate to be\n   used by the comparator to determine the order of elements.\n\n   Can be one of:\n\n   - `function`: Getter function. The result of this function will be sorted using the\n     `<`, `=`, `>` operator.\n   - `string`: An Angular expression which evaluates to an object to order by, such as 'name'\n     to sort by a property called 'name'. Optionally prefixed with `+` or `-` to control\n     ascending or descending sort order (for example, +name or -name).\n   - `Array`: An array of function or string predicates. The first predicate in the array\n     is used for sorting, but when two items are equivalent, the next predicate is used.",
                    "type": "function(*)|string|Array.<(function(*)|string)>"
                },
                {
                    "name": "reverse",
                    "description": "Reverse the order of the array.",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "Sorted copy of the source array.",
                "type": "Array"
            },
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <script>\n        function Ctrl($scope) {\n          $scope.friends =\n              [{name:'John', phone:'555-1212', age:10},\n               {name:'Mary', phone:'555-9876', age:19},\n               {name:'Mike', phone:'555-4321', age:21},\n               {name:'Adam', phone:'555-5678', age:35},\n               {name:'Julie', phone:'555-8765', age:29}]\n          $scope.predicate = '-age';\n        }\n      </script>\n      <div ng-controller=\"Ctrl\">\n        <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>\n        <hr/>\n        [ <a href=\"\" ng-click=\"predicate=''\">unsorted</a> ]\n        <table class=\"friend\">\n          <tr>\n            <th><a href=\"\" ng-click=\"predicate = 'name'; reverse=false\">Name</a>\n                (<a href=\"\" ng-click=\"predicate = '-name'; reverse=false\">^</a>)</th>\n            <th><a href=\"\" ng-click=\"predicate = 'phone'; reverse=!reverse\">Phone Number</a></th>\n            <th><a href=\"\" ng-click=\"predicate = 'age'; reverse=!reverse\">Age</a></th>\n          </tr>\n          <tr ng-repeat=\"friend in friends | orderBy:predicate:reverse\">\n            <td>{{friend.name}}</td>\n            <td>{{friend.phone}}</td>\n            <td>{{friend.age}}</td>\n          </tr>\n        </table>\n      </div>\n    </file>\n  </example>\n\nIt's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the\nfilter routine with `$filter('orderBy')`, and calling the returned filter routine with the\ndesired parameters.\n\nExample:",
                "\n <example>\n   <file name=\"index.html\">\n     <div ng-controller=\"Ctrl\">\n       <table class=\"friend\">\n         <tr>\n           <th><a href=\"\" ng-click=\"reverse=false;order('name', false)\">Name</a>\n             (<a href=\"\" ng-click=\"order('-name',false)\">^</a>)</th>\n           <th><a href=\"\" ng-click=\"reverse=!reverse;order('phone', reverse)\">Phone Number</a></th>\n           <th><a href=\"\" ng-click=\"reverse=!reverse;order('age',reverse)\">Age</a></th>\n         </tr>\n         <tr ng-repeat=\"friend in friends\">\n           <td>{{friend.name}}</td>\n           <td>{{friend.phone}}</td>\n           <td>{{friend.age}}</td>\n         </tr>\n       </table>\n     </div>\n   </file>\n\n   <file name=\"script.js\">\n     function Ctrl($scope, $filter) {\n       var orderBy = $filter('orderBy');\n       $scope.friends = [\n         { name: 'John',    phone: '555-1212',    age: 10 },\n         { name: 'Mary',    phone: '555-9876',    age: 19 },\n         { name: 'Mike',    phone: '555-4321',    age: 21 },\n         { name: 'Adam',    phone: '555-5678',    age: 35 },\n         { name: 'Julie',   phone: '555-8765',    age: 29 }\n       ];\n\n       $scope.order = function(predicate, reverse) {\n         $scope.friends = orderBy($scope.friends, predicate, reverse);\n       };\n       $scope.order('-age',false);\n     }\n   </file>\n</example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15485,
            "ngdoc": "directive",
            "name": "a",
            "restrict": "E",
            "description": "Modifies the default behavior of the html A tag so that the default action is prevented when\nthe href attribute is empty.\n\nThis change permits the easy creation of action links with the `ngClick` directive\nwithout changing the location or causing page reloads, e.g.:\n`<a href=\"\" ng-click=\"list.addItem()\">Add Item</a>`",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15533,
            "ngdoc": "directive",
            "name": "ngHref",
            "restrict": "A",
            "priority": "99",
            "description": "Using Angular markup like `{{hash}}` in an href attribute will\nmake the link go to the wrong URL if the user clicks it before\nAngular has a chance to replace the `{{hash}}` markup with its\nvalue. Until Angular replaces the markup the link will be broken\nand will most likely return a 404 error.\n\nThe `ngHref` directive solves this problem.\n\nThe wrong way to write it:\n```html\n<a href=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n```\n\nThe correct way to write it:\n```html\n<a ng-href=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n```",
            "element": "A",
            "params": [
                {
                    "name": "ngHref",
                    "description": "any string which can contain `{{}}` markup.",
                    "type": "Template"
                }
            ],
            "example": [
                "\nThis example shows various combinations of `href`, `ng-href` and `ng-click` attributes\nin links and their different behaviors:\n   <example>\n     <file name=\"index.html\">\n       <input ng-model=\"value\" /><br />\n       <a id=\"link-1\" href ng-click=\"value = 1\">link 1</a> (link, don't reload)<br />\n       <a id=\"link-2\" href=\"\" ng-click=\"value = 2\">link 2</a> (link, don't reload)<br />\n       <a id=\"link-3\" ng-href=\"/{{'123'}}\">link 3</a> (link, reload!)<br />\n       <a id=\"link-4\" href=\"\" name=\"xx\" ng-click=\"value = 4\">anchor</a> (link, don't reload)<br />\n       <a id=\"link-5\" name=\"xxx\" ng-click=\"value = 5\">anchor</a> (no link)<br />\n       <a id=\"link-6\" ng-href=\"{{value}}\">link</a> (link, change location)\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should execute ng-click but not reload when href without value', function() {\n         element(by.id('link-1')).click();\n         expect(element(by.model('value')).getAttribute('value')).toEqual('1');\n         expect(element(by.id('link-1')).getAttribute('href')).toBe('');\n       });\n\n       it('should execute ng-click but not reload when href empty string', function() {\n         element(by.id('link-2')).click();\n         expect(element(by.model('value')).getAttribute('value')).toEqual('2');\n         expect(element(by.id('link-2')).getAttribute('href')).toBe('');\n       });\n\n       it('should execute ng-click and change url when ng-href specified', function() {\n         expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\\/123$/);\n\n         element(by.id('link-3')).click();\n\n         // At this point, we navigate away from an Angular page, so we need\n         // to use browser.driver to get the base webdriver.\n\n         browser.wait(function() {\n           return browser.driver.getCurrentUrl().then(function(url) {\n             return url.match(/\\/123$/);\n           });\n         }, 1000, 'page should navigate to /123');\n       });\n\n       xit('should execute ng-click but not reload when href empty string and name specified', function() {\n         element(by.id('link-4')).click();\n         expect(element(by.model('value')).getAttribute('value')).toEqual('4');\n         expect(element(by.id('link-4')).getAttribute('href')).toBe('');\n       });\n\n       it('should execute ng-click but not reload when no href but name specified', function() {\n         element(by.id('link-5')).click();\n         expect(element(by.model('value')).getAttribute('value')).toEqual('5');\n         expect(element(by.id('link-5')).getAttribute('href')).toBe(null);\n       });\n\n       it('should only change url when only ng-href', function() {\n         element(by.model('value')).clear();\n         element(by.model('value')).sendKeys('6');\n         expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\\/6$/);\n\n         element(by.id('link-6')).click();\n\n         // At this point, we navigate away from an Angular page, so we need\n         // to use browser.driver to get the base webdriver.\n         browser.wait(function() {\n           return browser.driver.getCurrentUrl().then(function(url) {\n             return url.match(/\\/6$/);\n           });\n         }, 1000, 'page should navigate to /6');\n       });\n     </file>\n   </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15633,
            "ngdoc": "directive",
            "name": "ngSrc",
            "restrict": "A",
            "priority": "99",
            "description": "Using Angular markup like `{{hash}}` in a `src` attribute doesn't\nwork right: The browser will fetch from the URL with the literal\ntext `{{hash}}` until Angular replaces the expression inside\n`{{hash}}`. The `ngSrc` directive solves this problem.\n\nThe buggy way to write it:\n```html\n<img src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n```\n\nThe correct way to write it:\n```html\n<img ng-src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n```",
            "element": "IMG",
            "params": [
                {
                    "name": "ngSrc",
                    "description": "any string which can contain `{{}}` markup.",
                    "type": "Template"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15659,
            "ngdoc": "directive",
            "name": "ngSrcset",
            "restrict": "A",
            "priority": "99",
            "description": "Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't\nwork right: The browser will fetch from the URL with the literal\ntext `{{hash}}` until Angular replaces the expression inside\n`{{hash}}`. The `ngSrcset` directive solves this problem.\n\nThe buggy way to write it:\n```html\n<img srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\"/>\n```\n\nThe correct way to write it:\n```html\n<img ng-srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\"/>\n```",
            "element": "IMG",
            "params": [
                {
                    "name": "ngSrcset",
                    "description": "any string which can contain `{{}}` markup.",
                    "type": "Template"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15685,
            "ngdoc": "directive",
            "name": "ngDisabled",
            "restrict": "A",
            "priority": "100",
            "description": "The following markup will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:\n```html\n<div ng-init=\"scope = { isDisabled: false }\">\n <button disabled=\"{{scope.isDisabled}}\">Disabled</button>\n</div>\n```\n\nThe HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as disabled. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngDisabled` directive solves this problem for the `disabled` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "example": [
                "\n   <example>\n     <file name=\"index.html\">\n       Click me to toggle: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n       <button ng-model=\"button\" ng-disabled=\"checked\">Button</button>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should toggle button', function() {\n         expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();\n         element(by.model('checked')).click();\n         expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();\n       });\n     </file>\n   </example>"
            ],
            "element": "INPUT",
            "params": [
                {
                    "name": "ngDisabled",
                    "description": "If the {@link guide/expression expression} is truthy,\n    then special attribute \"disabled\" will be set on the element",
                    "type": "Expression"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15729,
            "ngdoc": "directive",
            "name": "ngChecked",
            "restrict": "A",
            "priority": "100",
            "description": "The HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as checked. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngChecked` directive solves this problem for the `checked` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "example": [
                "\n   <example>\n     <file name=\"index.html\">\n       Check me to check both: <input type=\"checkbox\" ng-model=\"master\"><br/>\n       <input id=\"checkSlave\" type=\"checkbox\" ng-checked=\"master\">\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check both checkBoxes', function() {\n         expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();\n         element(by.model('master')).click();\n         expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();\n       });\n     </file>\n   </example>"
            ],
            "element": "INPUT",
            "params": [
                {
                    "name": "ngChecked",
                    "description": "If the {@link guide/expression expression} is truthy,\n    then special attribute \"checked\" will be set on the element",
                    "type": "Expression"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15764,
            "ngdoc": "directive",
            "name": "ngReadonly",
            "restrict": "A",
            "priority": "100",
            "description": "The HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as readonly. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngReadonly` directive solves this problem for the `readonly` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "example": [
                "\n   <example>\n     <file name=\"index.html\">\n       Check me to make text readonly: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n       <input type=\"text\" ng-readonly=\"checked\" value=\"I'm Angular\"/>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should toggle readonly attr', function() {\n         expect(element(by.css('[type=\"text\"]')).getAttribute('readonly')).toBeFalsy();\n         element(by.model('checked')).click();\n         expect(element(by.css('[type=\"text\"]')).getAttribute('readonly')).toBeTruthy();\n       });\n     </file>\n   </example>"
            ],
            "element": "INPUT",
            "params": [
                {
                    "name": "ngReadonly",
                    "description": "If the {@link guide/expression expression} is truthy,\n    then special attribute \"readonly\" will be set on the element",
                    "type": "Expression"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15799,
            "ngdoc": "directive",
            "name": "ngSelected",
            "restrict": "A",
            "priority": "100",
            "description": "The HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as selected. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngSelected` directive solves this problem for the `selected` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "example": [
                "\n   <example>\n     <file name=\"index.html\">\n       Check me to select: <input type=\"checkbox\" ng-model=\"selected\"><br/>\n       <select>\n         <option>Hello!</option>\n         <option id=\"greet\" ng-selected=\"selected\">Greetings!</option>\n       </select>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should select Greetings!', function() {\n         expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();\n         element(by.model('selected')).click();\n         expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();\n       });\n     </file>\n   </example>"
            ],
            "element": "OPTION",
            "params": [
                {
                    "name": "ngSelected",
                    "description": "If the {@link guide/expression expression} is truthy,\n    then special attribute \"selected\" will be set on the element",
                    "type": "Expression"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15837,
            "ngdoc": "directive",
            "name": "ngOpen",
            "restrict": "A",
            "priority": "100",
            "description": "The HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as open. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngOpen` directive solves this problem for the `open` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "example": [
                "\n    <example>\n      <file name=\"index.html\">\n        Check me check multiple: <input type=\"checkbox\" ng-model=\"open\"><br/>\n        <details id=\"details\" ng-open=\"open\">\n           <summary>Show/Hide me</summary>\n        </details>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should toggle open', function() {\n          expect(element(by.id('details')).getAttribute('open')).toBeFalsy();\n          element(by.model('open')).click();\n          expect(element(by.id('details')).getAttribute('open')).toBeTruthy();\n        });\n      </file>\n    </example>"
            ],
            "element": "DETAILS",
            "params": [
                {
                    "name": "ngOpen",
                    "description": "If the {@link guide/expression expression} is truthy,\n    then special attribute \"open\" will be set on the element",
                    "type": "Expression"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 15938,
            "ngdoc": "type",
            "name": "{Object} $error Is an object hash, containing references to all invalid controls or\n forms, where:\n\n - keys are validation tokens (error names),\n - values are arrays of controls or forms that are invalid for given error name.\n\n\n Built-in validation tokens:\n\n - `email`\n - `max`\n - `maxlength`\n - `min`\n - `minlength`\n - `number`\n - `pattern`\n - `required`\n - `url`",
            "itemtype": "property",
            "type": "Boolean",
            "description": "`FormController` keeps track of all its controls and nested forms as well as the state of them,\nsuch as being valid/invalid or dirty/pristine.\n\nEach {@link ng.directive:form form} directive creates an instance\nof `FormController`.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 16003,
            "ngdoc": "method",
            "name": "form.FormController#$addControl",
            "description": "Register a control with the form.\n\nInput elements using ngModelController do this automatically when they are linked.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 16023,
            "ngdoc": "method",
            "name": "form.FormController#$removeControl",
            "description": "Deregister a control from the form.\n\nInput elements using ngModelController do this automatically when they are destroyed.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 16043,
            "ngdoc": "method",
            "name": "form.FormController#$setValidity",
            "description": "Sets the validity of a form control.\n\nThis method will also propagate to parent forms.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 16090,
            "ngdoc": "method",
            "name": "form.FormController#$setDirty",
            "description": "Sets the form to a dirty state.\n\nThis method can be called to add the 'ng-dirty' class and set the form to a dirty\nstate (ng-dirty class). This method will also propagate to parent forms.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 16108,
            "ngdoc": "method",
            "name": "form.FormController#$setPristine",
            "description": "Sets the form to its pristine state.\n\nThis method can be called to remove the 'ng-dirty' class and set the form to its pristine\nstate (ng-pristine class). This method will also propagate to all the controls contained\nin this form.\n\nSetting a form back to a pristine state is often useful when we want to 'reuse' a form after\nsaving or resetting it.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 16134,
            "ngdoc": "directive",
            "name": "ngForm",
            "restrict": "EAC",
            "description": "Nestable alias of {@link ng.directive:form `form`} directive. HTML\ndoes not allow nesting of form elements. It is useful to nest forms, for example if the validity of a\nsub-group of controls needs to be determined.\n\nNote: the purpose of `ngForm` is to group controls,\nbut not to be a replacement for the `<form>` tag with all of its capabilities\n(e.g. posting to the server, ...).",
            "params": [
                {
                    "name": "ngForm|name",
                    "description": "Name of the form. If specified, the form controller will be published into\n                      related scope, under this name.",
                    "type": "String="
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 16153,
            "ngdoc": "directive",
            "name": "form",
            "restrict": "E",
            "description": "Directive that instantiates\n{@link form.FormController FormController}.\n\nIf the `name` attribute is specified, the form controller is published onto the current scope under\nthis name.\n\n# Alias: {@link ng.directive:ngForm `ngForm`}\n\nIn Angular forms can be nested. This means that the outer form is valid when all of the child\nforms are valid as well. However, browsers do not allow nesting of `<form>` elements, so\nAngular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to\n`<form>` but can be nested.  This allows you to have nested forms, which is very useful when\nusing Angular validation directives in forms that are dynamically generated using the\n{@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`\nattribute of input elements using interpolation, you have to wrap each set of repeated inputs in an\n`ngForm` directive and nest these in an outer `form` element.\n\n\n# CSS classes\n - `ng-valid` is set if the form is valid.\n - `ng-invalid` is set if the form is invalid.\n - `ng-pristine` is set if the form is pristine.\n - `ng-dirty` is set if the form is dirty.\n\nKeep in mind that ngAnimate can detect each of these classes when added and removed.\n\n\n# Submitting a form and preventing the default action\n\nSince the role of forms in client-side Angular applications is different than in classical\nroundtrip apps, it is desirable for the browser not to translate the form submission into a full\npage reload that sends the data to the server. Instead some javascript logic should be triggered\nto handle the form submission in an application-specific way.\n\nFor this reason, Angular prevents the default action (form submission to the server) unless the\n`<form>` element has an `action` attribute specified.\n\nYou can use one of the following two ways to specify what javascript method should be called when\na form is submitted:\n\n- {@link ng.directive:ngSubmit ngSubmit} directive on the form element\n- {@link ng.directive:ngClick ngClick} directive on the first\n button or input field of type submit (input[type=submit])\n\nTo prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}\nor {@link ng.directive:ngClick ngClick} directives.\nThis is because of the following form submission rules in the HTML specification:\n\n- If a form has only one input field then hitting enter in this field triggers form submit\n(`ngSubmit`)\n- if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter\ndoesn't trigger submit\n- if a form has one or more input fields and one or more buttons or input[type=submit] then\nhitting enter in any of the input fields will trigger the click handler on the *first* button or\ninput[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the form. If specified, the form controller will be published into\n                      related scope, under this name.\n\n## Animation Hooks\n\nAnimations in ngForm are triggered when any of the associated CSS classes are added and removed.\nThese classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any\nother validations that are performed within the form. Animations in ngForm are similar to how\nthey work in ngClass and animations can be hooked into using CSS transitions, keyframes as well\nas JS animations.\n\nThe following example shows a simple way to utilize CSS transitions to style a form element\nthat has been rendered as invalid after it has been validated:\n\n<pre>\n//be sure to include ngAnimate as a module to hook into more\n//advanced animations\n.my-form {\n  transition:0.5s linear all;\n  background: white;\n}\n.my-form.ng-invalid {\n  background: red;\n  color:white;\n}\n</pre>",
                    "type": "String="
                }
            ],
            "example": [
                "\n   <example deps=\"angular-animate.js\" animations=\"true\" fixBase=\"true\">\n     <file name=\"index.html\">\n      <script>\n        function Ctrl($scope) {\n          $scope.userType = 'guest';\n        }\n      </script>\n      <style>\n       .my-form {\n         -webkit-transition:all linear 0.5s;\n         transition:all linear 0.5s;\n         background: transparent;\n       }\n       .my-form.ng-invalid {\n         background: red;\n       }\n      </style>\n      <form name=\"myForm\" ng-controller=\"Ctrl\" class=\"my-form\">\n        userType: <input name=\"input\" ng-model=\"userType\" required>\n        <span class=\"error\" ng-show=\"myForm.input.$error.required\">Required!</span><br>\n        <tt>userType = {{userType}}</tt><br>\n        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>\n        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br>\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>\n       </form>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should initialize to model', function() {\n         var userType = element(by.binding('userType'));\n         var valid = element(by.binding('myForm.input.$valid'));\n\n         expect(userType.getText()).toContain('guest');\n         expect(valid.getText()).toContain('true');\n       });\n\n       it('should be invalid if empty', function() {\n         var userType = element(by.binding('userType'));\n         var valid = element(by.binding('myForm.input.$valid'));\n         var userInput = element(by.model('userType'));\n\n         userInput.clear();\n         userInput.sendKeys('');\n\n         expect(userType.getText()).toEqual('userType =');\n         expect(valid.getText()).toContain('false');\n       });\n     </file>\n   </example>\n"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 16368,
            "ngdoc": "input",
            "name": "input[text]",
            "description": "Standard HTML text input with angular data binding.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Adds `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngMinlength",
                    "description": "Sets `minlength` validation error key if the value is shorter than\n   minlength.",
                    "type": "Number="
                },
                {
                    "name": "ngMaxlength",
                    "description": "Sets `maxlength` validation error key if the value is longer than\n   maxlength.",
                    "type": "Number="
                },
                {
                    "name": "ngPattern",
                    "description": "Sets `pattern` validation error key if the value does not match the\n   RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   patterns defined as scope expressions.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                },
                {
                    "name": "ngTrim",
                    "description": "If set to false Angular will not automatically trim the input.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "example": [
                "\n     <example name=\"text-input-directive\">\n       <file name=\"index.html\">\n        <script>\n          function Ctrl($scope) {\n            $scope.text = 'guest';\n            $scope.word = /^\\s*\\w*\\s*$/;\n          }\n        </script>\n        <form name=\"myForm\" ng-controller=\"Ctrl\">\n          Single word: <input type=\"text\" name=\"input\" ng-model=\"text\"\n                              ng-pattern=\"word\" required ng-trim=\"false\">\n          <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n            Required!</span>\n          <span class=\"error\" ng-show=\"myForm.input.$error.pattern\">\n            Single word only!</span>\n\n          <tt>text = {{text}}</tt><br/>\n          <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n          <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n          <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n          <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n         </form>\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         var text = element(by.binding('text'));\n         var valid = element(by.binding('myForm.input.$valid'));\n         var input = element(by.model('text'));\n\n         it('should initialize to model', function() {\n           expect(text.getText()).toContain('guest');\n           expect(valid.getText()).toContain('true');\n         });\n\n         it('should be invalid if empty', function() {\n           input.clear();\n           input.sendKeys('');\n\n           expect(text.getText()).toEqual('text =');\n           expect(valid.getText()).toContain('false');\n         });\n\n         it('should be invalid if multi word', function() {\n           input.clear();\n           input.sendKeys('hello world');\n\n           expect(valid.getText()).toContain('false');\n         });\n       </file>\n     </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 16446,
            "ngdoc": "input",
            "name": "input[number]",
            "description": "Text input with number validation and transformation. Sets the `number` validation\nerror if not a valid number.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "min",
                    "description": "Sets the `min` validation error key if the value entered is less than `min`.",
                    "type": "String="
                },
                {
                    "name": "max",
                    "description": "Sets the `max` validation error key if the value entered is greater than `max`.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngMinlength",
                    "description": "Sets `minlength` validation error key if the value is shorter than\n   minlength.",
                    "type": "Number="
                },
                {
                    "name": "ngMaxlength",
                    "description": "Sets `maxlength` validation error key if the value is longer than\n   maxlength.",
                    "type": "Number="
                },
                {
                    "name": "ngPattern",
                    "description": "Sets `pattern` validation error key if the value does not match the\n   RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   patterns defined as scope expressions.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n     <example name=\"number-input-directive\">\n       <file name=\"index.html\">\n        <script>\n          function Ctrl($scope) {\n            $scope.value = 12;\n          }\n        </script>\n        <form name=\"myForm\" ng-controller=\"Ctrl\">\n          Number: <input type=\"number\" name=\"input\" ng-model=\"value\"\n                         min=\"0\" max=\"99\" required>\n          <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n            Required!</span>\n          <span class=\"error\" ng-show=\"myForm.input.$error.number\">\n            Not valid number!</span>\n          <tt>value = {{value}}</tt><br/>\n          <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n          <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n          <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n          <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n         </form>\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         var value = element(by.binding('value'));\n         var valid = element(by.binding('myForm.input.$valid'));\n         var input = element(by.model('value'));\n\n         it('should initialize to model', function() {\n           expect(value.getText()).toContain('12');\n           expect(valid.getText()).toContain('true');\n         });\n\n         it('should be invalid if empty', function() {\n           input.clear();\n           input.sendKeys('');\n           expect(value.getText()).toEqual('value =');\n           expect(valid.getText()).toContain('false');\n         });\n\n         it('should be invalid if over max', function() {\n           input.clear();\n           input.sendKeys('123');\n           expect(value.getText()).toEqual('value =');\n           expect(valid.getText()).toContain('false');\n         });\n       </file>\n     </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 16523,
            "ngdoc": "input",
            "name": "input[url]",
            "description": "Text input with URL validation. Sets the `url` validation error key if the content is not a\nvalid URL.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngMinlength",
                    "description": "Sets `minlength` validation error key if the value is shorter than\n   minlength.",
                    "type": "Number="
                },
                {
                    "name": "ngMaxlength",
                    "description": "Sets `maxlength` validation error key if the value is longer than\n   maxlength.",
                    "type": "Number="
                },
                {
                    "name": "ngPattern",
                    "description": "Sets `pattern` validation error key if the value does not match the\n   RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   patterns defined as scope expressions.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n     <example name=\"url-input-directive\">\n       <file name=\"index.html\">\n        <script>\n          function Ctrl($scope) {\n            $scope.text = 'http://google.com';\n          }\n        </script>\n        <form name=\"myForm\" ng-controller=\"Ctrl\">\n          URL: <input type=\"url\" name=\"input\" ng-model=\"text\" required>\n          <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n            Required!</span>\n          <span class=\"error\" ng-show=\"myForm.input.$error.url\">\n            Not valid url!</span>\n          <tt>text = {{text}}</tt><br/>\n          <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n          <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n          <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n          <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n          <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>\n         </form>\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         var text = element(by.binding('text'));\n         var valid = element(by.binding('myForm.input.$valid'));\n         var input = element(by.model('text'));\n\n         it('should initialize to model', function() {\n           expect(text.getText()).toContain('http://google.com');\n           expect(valid.getText()).toContain('true');\n         });\n\n         it('should be invalid if empty', function() {\n           input.clear();\n           input.sendKeys('');\n\n           expect(text.getText()).toEqual('text =');\n           expect(valid.getText()).toContain('false');\n         });\n\n         it('should be invalid if not url', function() {\n           input.clear();\n           input.sendKeys('box');\n\n           expect(valid.getText()).toContain('false');\n         });\n       </file>\n     </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 16599,
            "ngdoc": "input",
            "name": "input[email]",
            "description": "Text input with email validation. Sets the `email` validation error key if not a valid email\naddress.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngMinlength",
                    "description": "Sets `minlength` validation error key if the value is shorter than\n   minlength.",
                    "type": "Number="
                },
                {
                    "name": "ngMaxlength",
                    "description": "Sets `maxlength` validation error key if the value is longer than\n   maxlength.",
                    "type": "Number="
                },
                {
                    "name": "ngPattern",
                    "description": "Sets `pattern` validation error key if the value does not match the\n   RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   patterns defined as scope expressions.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n     <example name=\"email-input-directive\">\n       <file name=\"index.html\">\n        <script>\n          function Ctrl($scope) {\n            $scope.text = 'me@example.com';\n          }\n        </script>\n          <form name=\"myForm\" ng-controller=\"Ctrl\">\n            Email: <input type=\"email\" name=\"input\" ng-model=\"text\" required>\n            <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n              Required!</span>\n            <span class=\"error\" ng-show=\"myForm.input.$error.email\">\n              Not valid email!</span>\n            <tt>text = {{text}}</tt><br/>\n            <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n            <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n            <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n            <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n            <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>\n          </form>\n        </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         var text = element(by.binding('text'));\n         var valid = element(by.binding('myForm.input.$valid'));\n         var input = element(by.model('text'));\n\n         it('should initialize to model', function() {\n           expect(text.getText()).toContain('me@example.com');\n           expect(valid.getText()).toContain('true');\n         });\n\n         it('should be invalid if empty', function() {\n           input.clear();\n           input.sendKeys('');\n           expect(text.getText()).toEqual('text =');\n           expect(valid.getText()).toContain('false');\n         });\n\n         it('should be invalid if not email', function() {\n           input.clear();\n           input.sendKeys('xxx');\n\n           expect(valid.getText()).toContain('false');\n         });\n       </file>\n     </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 16674,
            "ngdoc": "input",
            "name": "input[radio]",
            "description": "HTML radio button.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to which the expression should be set when selected.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                },
                {
                    "name": "ngValue",
                    "description": "Angular expression which sets the value to which the expression should\n   be set when selected.",
                    "type": "String"
                }
            ],
            "example": [
                "\n     <example name=\"radio-input-directive\">\n       <file name=\"index.html\">\n        <script>\n          function Ctrl($scope) {\n            $scope.color = 'blue';\n            $scope.specialValue = {\n              \"id\": \"12345\",\n              \"value\": \"green\"\n            };\n          }\n        </script>\n        <form name=\"myForm\" ng-controller=\"Ctrl\">\n          <input type=\"radio\" ng-model=\"color\" value=\"red\">  Red <br/>\n          <input type=\"radio\" ng-model=\"color\" ng-value=\"specialValue\"> Green <br/>\n          <input type=\"radio\" ng-model=\"color\" value=\"blue\"> Blue <br/>\n          <tt>color = {{color | json}}</tt><br/>\n         </form>\n         Note that `ng-value=\"specialValue\"` sets radio item's value to be the value of `$scope.specialValue`.\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         it('should change state', function() {\n           var color = element(by.binding('color'));\n\n           expect(color.getText()).toContain('blue');\n\n           element.all(by.model('color')).get(0).click();\n\n           expect(color.getText()).toContain('red');\n         });\n       </file>\n     </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 16725,
            "ngdoc": "input",
            "name": "input[checkbox]",
            "description": "HTML checkbox.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "ngTrueValue",
                    "description": "The value to which the expression should be set when selected.",
                    "type": "String="
                },
                {
                    "name": "ngFalseValue",
                    "description": "The value to which the expression should be set when not selected.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n     <example name=\"checkbox-input-directive\">\n       <file name=\"index.html\">\n        <script>\n          function Ctrl($scope) {\n            $scope.value1 = true;\n            $scope.value2 = 'YES'\n          }\n        </script>\n        <form name=\"myForm\" ng-controller=\"Ctrl\">\n          Value1: <input type=\"checkbox\" ng-model=\"value1\"> <br/>\n          Value2: <input type=\"checkbox\" ng-model=\"value2\"\n                         ng-true-value=\"YES\" ng-false-value=\"NO\"> <br/>\n          <tt>value1 = {{value1}}</tt><br/>\n          <tt>value2 = {{value2}}</tt><br/>\n         </form>\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         it('should change state', function() {\n           var value1 = element(by.binding('value1'));\n           var value2 = element(by.binding('value2'));\n\n           expect(value1.getText()).toContain('true');\n           expect(value2.getText()).toContain('YES');\n\n           element(by.model('value1')).click();\n           element(by.model('value2')).click();\n\n           expect(value1.getText()).toContain('false');\n           expect(value2.getText()).toContain('NO');\n         });\n       </file>\n     </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 17078,
            "ngdoc": "directive",
            "name": "textarea",
            "restrict": "E",
            "description": "HTML textarea element control with angular data-binding. The data-binding and validation\nproperties of this element are exactly the same as those of the\n{@link ng.directive:input input element}.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngMinlength",
                    "description": "Sets `minlength` validation error key if the value is shorter than\n   minlength.",
                    "type": "Number="
                },
                {
                    "name": "ngMaxlength",
                    "description": "Sets `maxlength` validation error key if the value is longer than\n   maxlength.",
                    "type": "Number="
                },
                {
                    "name": "ngPattern",
                    "description": "Sets `pattern` validation error key if the value does not match the\n   RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   patterns defined as scope expressions.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                },
                {
                    "name": "ngTrim",
                    "description": "If set to false Angular will not automatically trim the input.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 17107,
            "ngdoc": "directive",
            "name": "input",
            "restrict": "E",
            "description": "HTML input element control with angular data-binding. Input control follows HTML5 input types\nand polyfills the HTML5 validation behavior for older browsers.",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "Sets `required` validation error key if the value is not entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Sets `required` attribute if set to true",
                    "type": "Boolean="
                },
                {
                    "name": "ngMinlength",
                    "description": "Sets `minlength` validation error key if the value is shorter than\n   minlength.",
                    "type": "Number="
                },
                {
                    "name": "ngMaxlength",
                    "description": "Sets `maxlength` validation error key if the value is longer than\n   maxlength.",
                    "type": "Number="
                },
                {
                    "name": "ngPattern",
                    "description": "Sets `pattern` validation error key if the value does not match the\n   RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   patterns defined as scope expressions.",
                    "type": "String="
                },
                {
                    "name": "ngChange",
                    "description": "Angular expression to be executed when input changes due to user\n   interaction with the input element.",
                    "type": "String="
                }
            ],
            "example": [
                "\n   <example name=\"input-directive\">\n     <file name=\"index.html\">\n      <script>\n        function Ctrl($scope) {\n          $scope.user = {name: 'guest', last: 'visitor'};\n        }\n      </script>\n      <div ng-controller=\"Ctrl\">\n        <form name=\"myForm\">\n          User name: <input type=\"text\" name=\"userName\" ng-model=\"user.name\" required>\n          <span class=\"error\" ng-show=\"myForm.userName.$error.required\">\n            Required!</span><br>\n          Last name: <input type=\"text\" name=\"lastName\" ng-model=\"user.last\"\n            ng-minlength=\"3\" ng-maxlength=\"10\">\n          <span class=\"error\" ng-show=\"myForm.lastName.$error.minlength\">\n            Too short!</span>\n          <span class=\"error\" ng-show=\"myForm.lastName.$error.maxlength\">\n            Too long!</span><br>\n        </form>\n        <hr>\n        <tt>user = {{user}}</tt><br/>\n        <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>\n        <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>\n        <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>\n        <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br>\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>\n        <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>\n        <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>\n      </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var user = element(by.binding('{{user}}'));\n       var userNameValid = element(by.binding('myForm.userName.$valid'));\n       var lastNameValid = element(by.binding('myForm.lastName.$valid'));\n       var lastNameError = element(by.binding('myForm.lastName.$error'));\n       var formValid = element(by.binding('myForm.$valid'));\n       var userNameInput = element(by.model('user.name'));\n       var userLastInput = element(by.model('user.last'));\n\n       it('should initialize to model', function() {\n         expect(user.getText()).toContain('{\"name\":\"guest\",\"last\":\"visitor\"}');\n         expect(userNameValid.getText()).toContain('true');\n         expect(formValid.getText()).toContain('true');\n       });\n\n       it('should be invalid if empty when required', function() {\n         userNameInput.clear();\n         userNameInput.sendKeys('');\n\n         expect(user.getText()).toContain('{\"last\":\"visitor\"}');\n         expect(userNameValid.getText()).toContain('false');\n         expect(formValid.getText()).toContain('false');\n       });\n\n       it('should be valid if empty when min length is set', function() {\n         userLastInput.clear();\n         userLastInput.sendKeys('');\n\n         expect(user.getText()).toContain('{\"name\":\"guest\",\"last\":\"\"}');\n         expect(lastNameValid.getText()).toContain('true');\n         expect(formValid.getText()).toContain('true');\n       });\n\n       it('should be invalid if less than required min length', function() {\n         userLastInput.clear();\n         userLastInput.sendKeys('xx');\n\n         expect(user.getText()).toContain('{\"name\":\"guest\"}');\n         expect(lastNameValid.getText()).toContain('false');\n         expect(lastNameError.getText()).toContain('minlength');\n         expect(formValid.getText()).toContain('false');\n       });\n\n       it('should be invalid if longer than max length', function() {\n         userLastInput.clear();\n         userLastInput.sendKeys('some ridiculously long name');\n\n         expect(user.getText()).toContain('{\"name\":\"guest\"}');\n         expect(lastNameValid.getText()).toContain('false');\n         expect(lastNameError.getText()).toContain('maxlength');\n         expect(formValid.getText()).toContain('false');\n       });\n     </file>\n   </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 17235,
            "ngdoc": "type",
            "name": "{boolean} $invalid True if at least one error on the control.",
            "itemtype": "property",
            "type": "String",
            "description": "`NgModelController` provides API for the `ng-model` directive. The controller contains\nservices for data-binding, validation, CSS updates, and value formatting and parsing. It\npurposefully does not contain any logic which deals with DOM rendering or listening to\nDOM events. Such DOM related logic should be provided by other directives which make use of\n`NgModelController` for data-binding.\n\n## Custom Control Example\nThis example shows how to use `NgModelController` with a custom control to achieve\ndata-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)\ncollaborate together to achieve the desired result.\n\nNote that `contenteditable` is an HTML5 attribute, which tells the browser to let the element\ncontents be edited in place by the user.  This will not work on older browsers.\n\nWe are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}\nmodule to automatically remove \"bad\" content like inline event listener (e.g. `<span onclick=\"...\">`).\nHowever, as we are using `$sce` the model can still decide to to provide unsafe content if it marks\nthat content using the `$sce` service.\n\n<example name=\"NgModelController\" module=\"customControl\" deps=\"angular-sanitize.js\">\n   <file name=\"style.css\">\n     [contenteditable] {\n       border: 1px solid black;\n       background-color: white;\n       min-height: 20px;\n     }\n\n     .ng-invalid {\n       border: 1px solid red;\n     }\n\n   </file>\n   <file name=\"script.js\">\n     angular.module('customControl', ['ngSanitize']).\n       directive('contenteditable', ['$sce', function($sce) {\n         return {\n           restrict: 'A', // only activate on element attribute\n           require: '?ngModel', // get a hold of NgModelController\n           link: function(scope, element, attrs, ngModel) {\n             if(!ngModel) return; // do nothing if no ng-model\n\n             // Specify how UI should be updated\n             ngModel.$render = function() {\n               element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));\n             };\n\n             // Listen for change events to enable binding\n             element.on('blur keyup change', function() {\n               scope.$apply(read);\n             });\n             read(); // initialize\n\n             // Write data to the model\n             function read() {\n               var html = element.html();\n               // When we clear the content editable the browser leaves a <br> behind\n               // If strip-br attribute is provided then we strip this out\n               if( attrs.stripBr && html == '<br>' ) {\n                 html = '';\n               }\n               ngModel.$setViewValue(html);\n             }\n           }\n         };\n       }]);\n   </file>\n   <file name=\"index.html\">\n     <form name=\"myForm\">\n      <div contenteditable\n           name=\"myWidget\" ng-model=\"userContent\"\n           strip-br=\"true\"\n           required>Change me!</div>\n       <span ng-show=\"myForm.myWidget.$error.required\">Required!</span>\n      <hr>\n      <textarea ng-model=\"userContent\"></textarea>\n     </form>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n   it('should data-bind and become invalid', function() {\n     if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {\n       // SafariDriver can't handle contenteditable\n       // and Firefox driver can't clear contenteditables very well\n       return;\n     }\n     var contentEditable = element(by.css('[contenteditable]'));\n     var content = 'Change me!';\n\n     expect(contentEditable.getText()).toEqual(content);\n\n     contentEditable.clear();\n     contentEditable.sendKeys(protractor.Key.BACK_SPACE);\n     expect(contentEditable.getText()).toEqual('');\n     expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);\n   });\n   </file>\n</example>",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 17395,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$render",
            "description": "Called when the view needs to be updated. It is expected that the user of the ng-model\ndirective will implement this method.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 17405,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$isEmpty",
            "description": "This is called when we need to determine if the value of the input is empty.\n\nFor instance, the required directive does this to work out if the input has data or not.\nThe default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.\n\nYou can override this for input directives whose concept of being empty is different to the\ndefault. The `checkboxInputType` directive does this because in its case a value of `false`\nimplies empty.",
            "params": [
                {
                    "name": "value",
                    "description": "Reference to check.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "True if `value` is empty.",
                "type": "Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 17442,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$setValidity",
            "description": "Change the validity state, and notifies the form when the control changes validity. (i.e. it\ndoes not notify form if given validator is already marked as invalid).\n\nThis method should be called by validators - i.e. the parser or formatter functions.",
            "params": [
                {
                    "name": "validationErrorKey",
                    "description": "Name of the validator. the `validationErrorKey` will assign\n       to `$error[validationErrorKey]=isValid` so that it is available for data-binding.\n       The `validationErrorKey` should be in camelCase and will get converted into dash-case\n       for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`\n       class and can be bound to as  `{{someForm.someControl.$error.myError}}` .",
                    "type": "String"
                },
                {
                    "name": "isValid",
                    "description": "Whether the current state is valid (true) or invalid (false).",
                    "type": "Boolean"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 17485,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$setPristine",
            "description": "Sets the control to its pristine state.\n\nThis method can be called to remove the 'ng-dirty' class and set the control to its pristine\nstate (ng-pristine class).",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 17502,
            "ngdoc": "method",
            "name": "ngModel.NgModelController#$setViewValue",
            "description": "Update the view value.\n\nThis method should be called when the view value changes, typically from within a DOM event handler.\nFor example {@link ng.directive:input input} and\n{@link ng.directive:select select} directives call it.\n\nIt will update the $viewValue, then pass this value through each of the functions in `$parsers`,\nwhich includes any validators. The value that comes out of this `$parsers` pipeline, be applied to\n`$modelValue` and the **expression** specified in the `ng-model` attribute.\n\nLastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.\n\nNote that calling this function does not trigger a `$digest`.",
            "params": [
                {
                    "name": "value",
                    "description": "Value from the view.",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 17580,
            "ngdoc": "directive",
            "name": "ngModel",
            "element": "input",
            "description": "The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a\nproperty on the scope using {@link ngModel.NgModelController NgModelController},\nwhich is created and exposed by this directive.\n\n`ngModel` is responsible for:\n\n- Binding the view into the model, which other directives such as `input`, `textarea` or `select`\n  require.\n- Providing validation behavior (i.e. required, number, email, url).\n- Keeping the state of the control (valid/invalid, dirty/pristine, validation errors).\n- Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`) including animations.\n- Registering the control with its parent {@link ng.directive:form form}.\n\nNote: `ngModel` will try to bind to the property given by evaluating the expression on the\ncurrent scope. If the property doesn't already exist on this scope, it will be created\nimplicitly and added to the scope.\n\nFor best practices on using `ngModel`, see:\n\n - [https://github.com/angular/angular.js/wiki/Understanding-Scopes]\n\nFor basic examples, how to use `ngModel`, see:\n\n - {@link ng.directive:input input}\n   - {@link input[text] text}\n   - {@link input[checkbox] checkbox}\n   - {@link input[radio] radio}\n   - {@link input[number] number}\n   - {@link input[email] email}\n   - {@link input[url] url}\n - {@link ng.directive:select select}\n - {@link ng.directive:textarea textarea}\n\n# CSS classes\nThe following CSS classes are added and removed on the associated input/select/textarea element\ndepending on the validity of the model.\n\n - `ng-valid` is set if the model is valid.\n - `ng-invalid` is set if the model is invalid.\n - `ng-pristine` is set if the model is pristine.\n - `ng-dirty` is set if the model is dirty.\n\nKeep in mind that ngAnimate can detect each of these classes when added and removed.\n\n## Animation Hooks\n\nAnimations within models are triggered when any of the associated CSS classes are added and removed\non the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,\n`.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.\nThe animations that are triggered within ngModel are similar to how they work in ngClass and\nanimations can be hooked into using CSS transitions, keyframes as well as JS animations.\n\nThe following example shows a simple way to utilize CSS transitions to style an input element\nthat has been rendered as invalid after it has been validated:\n\n<pre>\n//be sure to include ngAnimate as a module to hook into more\n//advanced animations\n.my-input {\n  transition:0.5s linear all;\n  background: white;\n}\n.my-input.ng-invalid {\n  background: red;\n  color:white;\n}\n</pre>",
            "example": [
                "\n<example deps=\"angular-animate.js\" animations=\"true\" fixBase=\"true\">\n    <file name=\"index.html\">\n      <script>\n       function Ctrl($scope) {\n         $scope.val = '1';\n       }\n      </script>\n      <style>\n        .my-input {\n          -webkit-transition:all linear 0.5s;\n          transition:all linear 0.5s;\n          background: transparent;\n        }\n        .my-input.ng-invalid {\n          color:white;\n          background: red;\n        }\n      </style>\n      Update input to see transitions when valid/invalid.\n      Integer is a valid value.\n      <form name=\"testForm\" ng-controller=\"Ctrl\">\n        <input ng-model=\"val\" ng-pattern=\"/^\\d+$/\" name=\"anim\" class=\"my-input\" />\n      </form>\n    </file>\n</example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 17702,
            "ngdoc": "directive",
            "name": "ngChange",
            "description": "Evaluate the given expression when the user changes the input.\nThe expression is evaluated immediately, unlike the JavaScript onchange event\nwhich only triggers at the end of a change (usually, when the user leaves the\nform element or presses the return key).\nThe expression is not evaluated when the value change is coming from the model.\n\nNote, this directive requires `ngModel` to be present.",
            "element": "input",
            "params": [
                {
                    "name": "ngChange",
                    "description": "{@link guide/expression Expression} to evaluate upon change\nin input value.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n<example name=\"ngChange-directive\">\n  <file name=\"index.html\">\n    <script>\n      function Controller($scope) {\n        $scope.counter = 0;\n        $scope.change = function() {\n          $scope.counter++;\n        };\n      }\n    </script>\n    <div ng-controller=\"Controller\">\n      <input type=\"checkbox\" ng-model=\"confirmed\" ng-change=\"change()\" id=\"ng-change-example1\" />\n      <input type=\"checkbox\" ng-model=\"confirmed\" id=\"ng-change-example2\" />\n      <label for=\"ng-change-example2\">Confirmed</label><br />\n      <tt>debug = {{confirmed}}</tt><br/>\n      <tt>counter = {{counter}}</tt><br/>\n    </div>\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    var counter = element(by.binding('counter'));\n    var debug = element(by.binding('confirmed'));\n\n    it('should evaluate the expression if changing from view', function() {\n      expect(counter.getText()).toContain('0');\n\n      element(by.id('ng-change-example1')).click();\n\n      expect(counter.getText()).toContain('1');\n      expect(debug.getText()).toContain('true');\n    });\n\n    it('should not evaluate the expression if changing from model', function() {\n      element(by.id('ng-change-example2')).click();\n\n      expect(counter.getText()).toContain('0');\n      expect(debug.getText()).toContain('true');\n    });\n  </file>\n</example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 17798,
            "ngdoc": "directive",
            "name": "ngList",
            "description": "Text input that converts between a delimited string and an array of strings. The delimiter\ncan be a fixed string (by default a comma) or a regular expression.",
            "element": "input",
            "params": [
                {
                    "name": "ngList",
                    "description": "optional delimiter that should be used to split the value. If\n  specified in form `/something/` then the value will be converted into a regular expression.",
                    "type": "String="
                }
            ],
            "example": [
                "\n   <example name=\"ngList-directive\">\n     <file name=\"index.html\">\n      <script>\n        function Ctrl($scope) {\n          $scope.names = ['igor', 'misko', 'vojta'];\n        }\n      </script>\n      <form name=\"myForm\" ng-controller=\"Ctrl\">\n        List: <input name=\"namesInput\" ng-model=\"names\" ng-list required>\n        <span class=\"error\" ng-show=\"myForm.namesInput.$error.required\">\n          Required!</span>\n        <br>\n        <tt>names = {{names}}</tt><br/>\n        <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>\n        <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n       </form>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var listInput = element(by.model('names'));\n       var names = element(by.binding('{{names}}'));\n       var valid = element(by.binding('myForm.namesInput.$valid'));\n       var error = element(by.css('span.error'));\n\n       it('should initialize to model', function() {\n         expect(names.getText()).toContain('[\"igor\",\"misko\",\"vojta\"]');\n         expect(valid.getText()).toContain('true');\n         expect(error.getCssValue('display')).toBe('none');\n       });\n\n       it('should be invalid if empty', function() {\n         listInput.clear();\n         listInput.sendKeys('');\n\n         expect(names.getText()).toContain('');\n         expect(valid.getText()).toContain('false');\n         expect(error.getCssValue('display')).not.toBe('none');        });\n     </file>\n   </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 17893,
            "ngdoc": "directive",
            "name": "ngValue",
            "description": "Binds the given expression to the value of `input[select]` or `input[radio]`, so\nthat when the element is selected, the `ngModel` of that element is set to the\nbound value.\n\n`ngValue` is useful when dynamically generating lists of radio buttons using `ng-repeat`, as\nshown below.",
            "element": "input",
            "params": [
                {
                    "name": "ngValue",
                    "description": "angular expression, whose value will be bound to the `value` attribute\n  of the `input` element",
                    "type": "String="
                }
            ],
            "example": [
                "\n   <example name=\"ngValue-directive\">\n     <file name=\"index.html\">\n      <script>\n         function Ctrl($scope) {\n           $scope.names = ['pizza', 'unicorns', 'robots'];\n           $scope.my = { favorite: 'unicorns' };\n         }\n      </script>\n       <form ng-controller=\"Ctrl\">\n         <h2>Which is your favorite?</h2>\n           <label ng-repeat=\"name in names\" for=\"{{name}}\">\n             {{name}}\n             <input type=\"radio\"\n                    ng-model=\"my.favorite\"\n                    ng-value=\"name\"\n                    id=\"{{name}}\"\n                    name=\"favorite\">\n           </label>\n         <div>You chose {{my.favorite}}</div>\n       </form>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var favorite = element(by.binding('my.favorite'));\n\n       it('should initialize to model', function() {\n         expect(favorite.getText()).toContain('unicorns');\n       });\n       it('should bind the values to the inputs', function() {\n         element.all(by.model('my.favorite')).get(0).click();\n         expect(favorite.getText()).toContain('pizza');\n       });\n     </file>\n   </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 17963,
            "ngdoc": "directive",
            "name": "ngBind",
            "restrict": "AC",
            "description": "The `ngBind` attribute tells Angular to replace the text content of the specified HTML element\nwith the value of a given expression, and to update the text content when the value of that\nexpression changes.\n\nTypically, you don't use `ngBind` directly, but instead you use the double curly markup like\n`{{ expression }}` which is similar but less verbose.\n\nIt is preferable to use `ngBind` instead of `{{ expression }}` when a template is momentarily\ndisplayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an\nelement attribute, it makes the bindings invisible to the user while the page is loading.\n\nAn alternative solution to this problem would be using the\n{@link ng.directive:ngCloak ngCloak} directive.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngBind",
                    "description": "{@link guide/expression Expression} to evaluate.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\nEnter a name in the Live Preview text box; the greeting below the text box changes instantly.\n  <example>\n    <file name=\"index.html\">\n      <script>\n        function Ctrl($scope) {\n          $scope.name = 'Whirled';\n        }\n      </script>\n      <div ng-controller=\"Ctrl\">\n        Enter name: <input type=\"text\" ng-model=\"name\"><br>\n        Hello <span ng-bind=\"name\"></span>!\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-bind', function() {\n        var nameInput = element(by.model('name'));\n\n        expect(element(by.binding('name')).getText()).toBe('Whirled');\n        nameInput.clear();\n        nameInput.sendKeys('world');\n        expect(element(by.binding('name')).getText()).toBe('world');\n      });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18029,
            "ngdoc": "directive",
            "name": "ngBindTemplate",
            "description": "The `ngBindTemplate` directive specifies that the element\ntext content should be replaced with the interpolation of the template\nin the `ngBindTemplate` attribute.\nUnlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`\nexpressions. This directive is needed since some HTML elements\n(such as TITLE and OPTION) cannot contain SPAN elements.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngBindTemplate",
                    "description": "template of form\n  <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.",
                    "type": "String"
                }
            ],
            "example": [
                "\nTry it here: enter text in text box and watch the greeting change.\n  <example>\n    <file name=\"index.html\">\n      <script>\n        function Ctrl($scope) {\n          $scope.salutation = 'Hello';\n          $scope.name = 'World';\n        }\n      </script>\n      <div ng-controller=\"Ctrl\">\n       Salutation: <input type=\"text\" ng-model=\"salutation\"><br>\n       Name: <input type=\"text\" ng-model=\"name\"><br>\n       <pre ng-bind-template=\"{{salutation}} {{name}}!\"></pre>\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-bind', function() {\n        var salutationElem = element(by.binding('salutation'));\n        var salutationInput = element(by.model('salutation'));\n        var nameInput = element(by.model('name'));\n\n        expect(salutationElem.getText()).toBe('Hello World!');\n\n        salutationInput.clear();\n        salutationInput.sendKeys('Greetings');\n        nameInput.clear();\n        nameInput.sendKeys('user');\n\n        expect(salutationElem.getText()).toBe('Greetings user!');\n      });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18091,
            "ngdoc": "directive",
            "name": "ngBindHtml",
            "description": "Creates a binding that will innerHTML the result of evaluating the `expression` into the current\nelement in a secure way.  By default, the innerHTML-ed content will be sanitized using the {@link\nngSanitize.$sanitize $sanitize} service.  To utilize this functionality, ensure that `$sanitize`\nis available, for example, by including {@link ngSanitize} in your module's dependencies (not in\ncore Angular.)  You may also bypass sanitization for values you know are safe. To do so, bind to\nan explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example\nunder {@link ng.$sce#Example Strict Contextual Escaping (SCE)}.\n\nNote: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you\nwill have an exception (instead of an exploit.)",
            "element": "ANY",
            "params": [
                {
                    "name": "ngBindHtml",
                    "description": "{@link guide/expression Expression} to evaluate.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  Try it here: enter text in text box and watch the greeting change.\n\n  <example module=\"ngBindHtmlExample\" deps=\"angular-sanitize.js\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ngBindHtmlCtrl\">\n       <p ng-bind-html=\"myHTML\"></p>\n      </div>\n    </file>\n\n    <file name=\"script.js\">\n      angular.module('ngBindHtmlExample', ['ngSanitize'])\n\n      .controller('ngBindHtmlCtrl', ['$scope', function ngBindHtmlCtrl($scope) {\n        $scope.myHTML =\n           'I am an <code>HTML</code>string with <a href=\"#\">links!</a> and other <em>stuff</em>';\n      }]);\n    </file>\n\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-bind-html', function() {\n        expect(element(by.binding('myHTML')).getText()).toBe(\n            'I am an HTMLstring with links! and other stuff');\n      });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18266,
            "ngdoc": "directive",
            "name": "ngClass",
            "restrict": "AC",
            "description": "The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding\nan expression that represents all classes to be added.\n\nThe directive operates in three different ways, depending on which of three types the expression\nevaluates to:\n\n1. If the expression evaluates to a string, the string should be one or more space-delimited class\nnames.\n\n2. If the expression evaluates to an array, each element of the array should be a string that is\none or more space-delimited class names.\n\n3. If the expression evaluates to an object, then for each key-value pair of the\nobject with a truthy value the corresponding key is used as a class name.\n\nThe directive won't add duplicate classes if a particular class was already set.\n\nWhen the expression changes, the previously added classes are removed and only then the\nnew classes are added.",
            "animations": "add - happens just before the class is applied to the element\nremove - happens just before the class is removed from the element",
            "element": "ANY",
            "params": [
                {
                    "name": "ngClass",
                    "description": "{@link guide/expression Expression} to eval. The result\n  of the evaluation can be a string representing space delimited class\n  names, an array, or a map of class names to boolean values. In the case of a map, the\n  names of the properties whose values are truthy will be added as css classes to the\n  element.",
                    "type": "Expression"
                }
            ],
            "example": [
                " Example that demonstrates basic bindings via ngClass directive.\n  <example>\n    <file name=\"index.html\">\n      <p ng-class=\"{strike: deleted, bold: important, red: error}\">Map Syntax Example</p>\n      <input type=\"checkbox\" ng-model=\"deleted\"> deleted (apply \"strike\" class)<br>\n      <input type=\"checkbox\" ng-model=\"important\"> important (apply \"bold\" class)<br>\n      <input type=\"checkbox\" ng-model=\"error\"> error (apply \"red\" class)\n      <hr>\n      <p ng-class=\"style\">Using String Syntax</p>\n      <input type=\"text\" ng-model=\"style\" placeholder=\"Type: bold strike red\">\n      <hr>\n      <p ng-class=\"[style1, style2, style3]\">Using Array Syntax</p>\n      <input ng-model=\"style1\" placeholder=\"Type: bold, strike or red\"><br>\n      <input ng-model=\"style2\" placeholder=\"Type: bold, strike or red\"><br>\n      <input ng-model=\"style3\" placeholder=\"Type: bold, strike or red\"><br>\n    </file>\n    <file name=\"style.css\">\n      .strike {\n        text-decoration: line-through;\n      }\n      .bold {\n          font-weight: bold;\n      }\n      .red {\n          color: red;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var ps = element.all(by.css('p'));\n\n      it('should let you toggle the class', function() {\n\n        expect(ps.first().getAttribute('class')).not.toMatch(/bold/);\n        expect(ps.first().getAttribute('class')).not.toMatch(/red/);\n\n        element(by.model('important')).click();\n        expect(ps.first().getAttribute('class')).toMatch(/bold/);\n\n        element(by.model('error')).click();\n        expect(ps.first().getAttribute('class')).toMatch(/red/);\n      });\n\n      it('should let you toggle string example', function() {\n        expect(ps.get(1).getAttribute('class')).toBe('');\n        element(by.model('style')).clear();\n        element(by.model('style')).sendKeys('red');\n        expect(ps.get(1).getAttribute('class')).toBe('red');\n      });\n\n      it('array example should have 3 classes', function() {\n        expect(ps.last().getAttribute('class')).toBe('');\n        element(by.model('style1')).sendKeys('bold');\n        element(by.model('style2')).sendKeys('strike');\n        element(by.model('style3')).sendKeys('red');\n        expect(ps.last().getAttribute('class')).toBe('bold strike red');\n      });\n    </file>\n  </example>\n\n  ## Animations\n\n  The example below demonstrates how to perform animations using ngClass.\n\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n     <input id=\"setbtn\" type=\"button\" value=\"set\" ng-click=\"myVar='my-class'\">\n     <input id=\"clearbtn\" type=\"button\" value=\"clear\" ng-click=\"myVar=''\">\n     <br>\n     <span class=\"base-class\" ng-class=\"myVar\">Sample Text</span>\n    </file>\n    <file name=\"style.css\">\n      .base-class {\n        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n      }\n\n      .base-class.my-class {\n        color: red;\n        font-size:3em;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-class', function() {\n        expect(element(by.css('.base-class')).getAttribute('class')).not.\n          toMatch(/my-class/);\n\n        element(by.id('setbtn')).click();\n\n        expect(element(by.css('.base-class')).getAttribute('class')).\n          toMatch(/my-class/);\n\n        element(by.id('clearbtn')).click();\n\n        expect(element(by.css('.base-class')).getAttribute('class')).not.\n          toMatch(/my-class/);\n      });\n    </file>\n  </example>\n\n\n  ## ngClass and pre-existing CSS3 Transitions/Animations\n  The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.\n  Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder\n  any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure\n  to view the step by step details of {@link ngAnimate.$animate#addclass $animate.addClass} and\n  {@link ngAnimate.$animate#removeclass $animate.removeClass}."
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18412,
            "ngdoc": "directive",
            "name": "ngClassOdd",
            "restrict": "AC",
            "description": "The `ngClassOdd` and `ngClassEven` directives work exactly as\n{@link ng.directive:ngClass ngClass}, except they work in\nconjunction with `ngRepeat` and take effect only on odd (even) rows.\n\nThis directive can be applied only within the scope of an\n{@link ng.directive:ngRepeat ngRepeat}.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngClassOdd",
                    "description": "{@link guide/expression Expression} to eval. The result\n  of the evaluation can be a string representing space delimited class names or an array.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n       <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n         <li ng-repeat=\"name in names\">\n          <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n            {{name}}\n          </span>\n         </li>\n       </ol>\n    </file>\n    <file name=\"style.css\">\n      .odd {\n        color: red;\n      }\n      .even {\n        color: blue;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-class-odd and ng-class-even', function() {\n        expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).\n          toMatch(/odd/);\n        expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).\n          toMatch(/even/);\n      });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18460,
            "ngdoc": "directive",
            "name": "ngClassEven",
            "restrict": "AC",
            "description": "The `ngClassOdd` and `ngClassEven` directives work exactly as\n{@link ng.directive:ngClass ngClass}, except they work in\nconjunction with `ngRepeat` and take effect only on odd (even) rows.\n\nThis directive can be applied only within the scope of an\n{@link ng.directive:ngRepeat ngRepeat}.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngClassEven",
                    "description": "{@link guide/expression Expression} to eval. The\n  result of the evaluation can be a string representing space delimited class names or an array.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n       <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n         <li ng-repeat=\"name in names\">\n          <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n            {{name}} &nbsp; &nbsp; &nbsp;\n          </span>\n         </li>\n       </ol>\n    </file>\n    <file name=\"style.css\">\n      .odd {\n        color: red;\n      }\n      .even {\n        color: blue;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-class-odd and ng-class-even', function() {\n        expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).\n          toMatch(/odd/);\n        expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).\n          toMatch(/even/);\n      });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18508,
            "ngdoc": "directive",
            "name": "ngCloak",
            "restrict": "AC",
            "description": "The `ngCloak` directive is used to prevent the Angular html template from being briefly\ndisplayed by the browser in its raw (uncompiled) form while your application is loading. Use this\ndirective to avoid the undesirable flicker effect caused by the html template display.\n\nThe directive can be applied to the `<body>` element, but the preferred usage is to apply\nmultiple `ngCloak` directives to small portions of the page to permit progressive rendering\nof the browser view.\n\n`ngCloak` works in cooperation with the following css rule embedded within `angular.js` and\n`angular.min.js`.\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```css\n[ng\\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {\n  display: none !important;\n}\n```\n\nWhen this css rule is loaded by the browser, all html elements (including their children) that\nare tagged with the `ngCloak` directive are hidden. When Angular encounters this directive\nduring the compilation of the template it deletes the `ngCloak` element attribute, making\nthe compiled element visible.\n\nFor the best result, the `angular.js` script must be loaded in the head section of the html\ndocument; alternatively, the css rule above must be included in the external stylesheet of the\napplication.\n\nLegacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they\ncannot match the `[ng\\:cloak]` selector. To work around this limitation, you must add the css\nclass `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.",
            "element": "ANY",
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n       <div id=\"template1\" ng-cloak>{{ 'hello' }}</div>\n       <div id=\"template2\" ng-cloak class=\"ng-cloak\">{{ 'hello IE7' }}</div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should remove the template directive and css class', function() {\n        expect($('#template1').getAttribute('ng-cloak')).\n          toBeNull();\n        expect($('#template2').getAttribute('ng-cloak')).\n          toBeNull();\n      });\n    </file>\n  </example>\n"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18571,
            "ngdoc": "directive",
            "name": "ngController",
            "description": "The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular\nsupports the principles behind the Model-View-Controller design pattern.\n\nMVC components in angular:\n\n* Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties\n  are accessed through bindings.\n* View — The template (HTML with data bindings) that is rendered into the View.\n* Controller — The `ngController` directive specifies a Controller class; the class contains business\n  logic behind the application to decorate the scope with functions and values\n\nNote that you can also attach controllers to the DOM by declaring it in a route definition\nvia the {@link ngRoute.$route $route} service. A common mistake is to declare the controller\nagain using `ng-controller` in the template itself.  This will cause the controller to be attached\nand executed twice.",
            "element": "ANY",
            "scope": "",
            "params": [
                {
                    "name": "ngController",
                    "description": "Name of a globally accessible constructor function or an\n    {@link guide/expression expression} that on the current scope evaluates to a\n    constructor function. The controller instance can be published into a scope property\n    by specifying `as propertyName`.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\nHere is a simple form for editing user contact information. Adding, removing, clearing, and\ngreeting are methods declared on the controller (see source tab). These methods can\neasily be called from the angular markup. Any changes to the data are automatically reflected\nin the View without the need for a manual update.\n\nTwo different declaration styles are included below:\n\n* one binds methods and properties directly onto the controller using `this`:\n`ng-controller=\"SettingsController1 as settings\"`\n* one injects `$scope` into the controller:\n`ng-controller=\"SettingsController2\"`\n\nThe second option is more common in the Angular community, and is generally used in boilerplates\nand in this guide. However, there are advantages to binding properties directly to the controller\nand avoiding scope.\n\n* Using `controller as` makes it obvious which controller you are accessing in the template when\nmultiple controllers apply to an element.\n* If you are writing your controllers as classes you have easier access to the properties and\nmethods, which will appear on the scope, from inside the controller code.\n* Since there is always a `.` in the bindings, you don't have to worry about prototypal\ninheritance masking primitives.\n\nThis example demonstrates the `controller as` syntax.\n\n<example name=\"ngControllerAs\">\n  <file name=\"index.html\">\n   <div id=\"ctrl-as-exmpl\" ng-controller=\"SettingsController1 as settings\">\n     Name: <input type=\"text\" ng-model=\"settings.name\"/>\n     [ <a href=\"\" ng-click=\"settings.greet()\">greet</a> ]<br/>\n     Contact:\n     <ul>\n       <li ng-repeat=\"contact in settings.contacts\">\n         <select ng-model=\"contact.type\">\n            <option>phone</option>\n            <option>email</option>\n         </select>\n         <input type=\"text\" ng-model=\"contact.value\"/>\n         [ <a href=\"\" ng-click=\"settings.clearContact(contact)\">clear</a>\n         | <a href=\"\" ng-click=\"settings.removeContact(contact)\">X</a> ]\n       </li>\n       <li>[ <a href=\"\" ng-click=\"settings.addContact()\">add</a> ]</li>\n    </ul>\n   </div>\n  </file>\n  <file name=\"app.js\">\n   function SettingsController1() {\n     this.name = \"John Smith\";\n     this.contacts = [\n       {type: 'phone', value: '408 555 1212'},\n       {type: 'email', value: 'john.smith@example.org'} ];\n   }\n\n   SettingsController1.prototype.greet = function() {\n     alert(this.name);\n   };\n\n   SettingsController1.prototype.addContact = function() {\n     this.contacts.push({type: 'email', value: 'yourname@example.org'});\n   };\n\n   SettingsController1.prototype.removeContact = function(contactToRemove) {\n    var index = this.contacts.indexOf(contactToRemove);\n     this.contacts.splice(index, 1);\n   };\n\n   SettingsController1.prototype.clearContact = function(contact) {\n     contact.type = 'phone';\n     contact.value = '';\n   };\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should check controller as', function() {\n      var container = element(by.id('ctrl-as-exmpl'));\n        expect(container.findElement(by.model('settings.name'))\n          .getAttribute('value')).toBe('John Smith');\n\n      var firstRepeat =\n          container.findElement(by.repeater('contact in settings.contacts').row(0));\n      var secondRepeat =\n          container.findElement(by.repeater('contact in settings.contacts').row(1));\n\n      expect(firstRepeat.findElement(by.model('contact.value')).getAttribute('value'))\n          .toBe('408 555 1212');\n\n      expect(secondRepeat.findElement(by.model('contact.value')).getAttribute('value'))\n          .toBe('john.smith@example.org');\n\n      firstRepeat.findElement(by.linkText('clear')).click();\n\n      expect(firstRepeat.findElement(by.model('contact.value')).getAttribute('value'))\n          .toBe('');\n\n      container.findElement(by.linkText('add')).click();\n\n      expect(container.findElement(by.repeater('contact in settings.contacts').row(2))\n          .findElement(by.model('contact.value'))\n          .getAttribute('value'))\n          .toBe('yourname@example.org');\n    });\n  </file>\n</example>\n\nThis example demonstrates the \"attach to `$scope`\" style of controller.\n\n<example name=\"ngController\">\n <file name=\"index.html\">\n  <div id=\"ctrl-exmpl\" ng-controller=\"SettingsController2\">\n    Name: <input type=\"text\" ng-model=\"name\"/>\n    [ <a href=\"\" ng-click=\"greet()\">greet</a> ]<br/>\n    Contact:\n    <ul>\n      <li ng-repeat=\"contact in contacts\">\n        <select ng-model=\"contact.type\">\n           <option>phone</option>\n           <option>email</option>\n        </select>\n        <input type=\"text\" ng-model=\"contact.value\"/>\n        [ <a href=\"\" ng-click=\"clearContact(contact)\">clear</a>\n        | <a href=\"\" ng-click=\"removeContact(contact)\">X</a> ]\n      </li>\n      <li>[ <a href=\"\" ng-click=\"addContact()\">add</a> ]</li>\n   </ul>\n  </div>\n </file>\n <file name=\"app.js\">\n  function SettingsController2($scope) {\n    $scope.name = \"John Smith\";\n    $scope.contacts = [\n      {type:'phone', value:'408 555 1212'},\n      {type:'email', value:'john.smith@example.org'} ];\n\n    $scope.greet = function() {\n      alert($scope.name);\n    };\n\n    $scope.addContact = function() {\n      $scope.contacts.push({type:'email', value:'yourname@example.org'});\n    };\n\n    $scope.removeContact = function(contactToRemove) {\n      var index = $scope.contacts.indexOf(contactToRemove);\n      $scope.contacts.splice(index, 1);\n    };\n\n    $scope.clearContact = function(contact) {\n      contact.type = 'phone';\n      contact.value = '';\n    };\n  }\n </file>\n <file name=\"protractor.js\" type=\"protractor\">\n   it('should check controller', function() {\n     var container = element(by.id('ctrl-exmpl'));\n\n     expect(container.findElement(by.model('name'))\n         .getAttribute('value')).toBe('John Smith');\n\n     var firstRepeat =\n         container.findElement(by.repeater('contact in contacts').row(0));\n     var secondRepeat =\n         container.findElement(by.repeater('contact in contacts').row(1));\n\n     expect(firstRepeat.findElement(by.model('contact.value')).getAttribute('value'))\n         .toBe('408 555 1212');\n     expect(secondRepeat.findElement(by.model('contact.value')).getAttribute('value'))\n         .toBe('john.smith@example.org');\n\n     firstRepeat.findElement(by.linkText('clear')).click();\n\n     expect(firstRepeat.findElement(by.model('contact.value')).getAttribute('value'))\n         .toBe('');\n\n     container.findElement(by.linkText('add')).click();\n\n     expect(container.findElement(by.repeater('contact in contacts').row(2))\n         .findElement(by.model('contact.value'))\n         .getAttribute('value'))\n         .toBe('yourname@example.org');\n   });\n </file>\n</example>\n"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18792,
            "ngdoc": "directive",
            "name": "ngCsp",
            "element": "html",
            "description": "Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.\n\nThis is necessary when developing things like Google Chrome Extensions.\n\nCSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).\nFor us to be compatible, we just need to implement the \"getterFn\" in $parse without violating\nany of these restrictions.\n\nAngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`\ndirective will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will\nevaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will\nbe raised.\n\nCSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically\nincludes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).\nTo make those directives work in CSP mode, include the `angular-csp.css` manually.\n\nIn order to use this feature put the `ngCsp` directive on the root element of the application.\n\n*Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*",
            "example": [
                "\nThis example shows how to apply the `ngCsp` directive to the `html` tag.\n  ```html\n    <!doctype html>\n    <html ng-app ng-csp>\n    ...\n    ...\n    </html>\n  ```"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18834,
            "ngdoc": "directive",
            "name": "ngClick",
            "description": "The ngClick directive allows you to specify custom behavior when\nan element is clicked.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngClick",
                    "description": "{@link guide/expression Expression} to evaluate upon\nclick. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-click=\"count = count + 1\" ng-init=\"count=0\">\n       Increment\n     </button>\n     count: {{count}}\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-click', function() {\n        expect(element(by.binding('count')).getText()).toMatch('0');\n        element(by.css('button')).click();\n        expect(element(by.binding('count')).getText()).toMatch('1');\n      });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18892,
            "ngdoc": "directive",
            "name": "ngDblclick",
            "description": "The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngDblclick",
                    "description": "{@link guide/expression Expression} to evaluate upon\na dblclick. (The Event object is available as `$event`)",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-dblclick=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (on double click)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18916,
            "ngdoc": "directive",
            "name": "ngMousedown",
            "description": "The ngMousedown directive allows you to specify custom behavior on mousedown event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngMousedown",
                    "description": "{@link guide/expression Expression} to evaluate upon\nmousedown. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-mousedown=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (on mouse down)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18940,
            "ngdoc": "directive",
            "name": "ngMouseup",
            "description": "Specify custom behavior on mouseup event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngMouseup",
                    "description": "{@link guide/expression Expression} to evaluate upon\nmouseup. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-mouseup=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (on mouse up)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18963,
            "ngdoc": "directive",
            "name": "ngMouseover",
            "description": "Specify custom behavior on mouseover event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngMouseover",
                    "description": "{@link guide/expression Expression} to evaluate upon\nmouseover. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-mouseover=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (when mouse is over)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 18987,
            "ngdoc": "directive",
            "name": "ngMouseenter",
            "description": "Specify custom behavior on mouseenter event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngMouseenter",
                    "description": "{@link guide/expression Expression} to evaluate upon\nmouseenter. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-mouseenter=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (when mouse enters)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19011,
            "ngdoc": "directive",
            "name": "ngMouseleave",
            "description": "Specify custom behavior on mouseleave event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngMouseleave",
                    "description": "{@link guide/expression Expression} to evaluate upon\nmouseleave. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-mouseleave=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (when mouse leaves)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19035,
            "ngdoc": "directive",
            "name": "ngMousemove",
            "description": "Specify custom behavior on mousemove event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngMousemove",
                    "description": "{@link guide/expression Expression} to evaluate upon\nmousemove. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <button ng-mousemove=\"count = count + 1\" ng-init=\"count=0\">\n       Increment (when mouse moves)\n     </button>\n     count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19059,
            "ngdoc": "directive",
            "name": "ngKeydown",
            "description": "Specify custom behavior on keydown event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngKeydown",
                    "description": "{@link guide/expression Expression} to evaluate upon\nkeydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <input ng-keydown=\"count = count + 1\" ng-init=\"count=0\">\n     key down count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19081,
            "ngdoc": "directive",
            "name": "ngKeyup",
            "description": "Specify custom behavior on keyup event.",
            "element": "ANY",
            "priority": "0",
            "params": [
                {
                    "name": "ngKeyup",
                    "description": "{@link guide/expression Expression} to evaluate upon\nkeyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n      <p>Typing in the input box below updates the key count</p>\n      <input ng-keyup=\"count = count + 1\" ng-init=\"count=0\"> key up count: {{count}}\n\n      <p>Typing in the input box below updates the keycode</p>\n      <input ng-keyup=\"event=$event\">\n      <p>event keyCode: {{ event.keyCode }}</p>\n      <p>event altKey: {{ event.altKey }}</p>\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19108,
            "ngdoc": "directive",
            "name": "ngKeypress",
            "description": "Specify custom behavior on keypress event.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngKeypress",
                    "description": "{@link guide/expression Expression} to evaluate upon\nkeypress. ({@link guide/expression#-event- Event object is available as `$event`}\nand can be interrogated for keyCode, altKey, etc.)",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <input ng-keypress=\"count = count + 1\" ng-init=\"count=0\">\n     key press count: {{count}}\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19130,
            "ngdoc": "directive",
            "name": "ngSubmit",
            "description": "Enables binding angular expressions to onsubmit events.\n\nAdditionally it prevents the default action (which for form means sending the request to the\nserver and reloading the current page), but only if the form does not contain `action`,\n`data-action`, or `x-action` attributes.",
            "element": "form",
            "priority": "0",
            "params": [
                {
                    "name": "ngSubmit",
                    "description": "{@link guide/expression Expression} to eval.\n({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <script>\n       function Ctrl($scope) {\n         $scope.list = [];\n         $scope.text = 'hello';\n         $scope.submit = function() {\n           if ($scope.text) {\n             $scope.list.push(this.text);\n             $scope.text = '';\n           }\n         };\n       }\n     </script>\n     <form ng-submit=\"submit()\" ng-controller=\"Ctrl\">\n       Enter text and hit enter:\n       <input type=\"text\" ng-model=\"text\" name=\"text\" />\n       <input type=\"submit\" id=\"submit\" value=\"Submit\" />\n       <pre>list={{list}}</pre>\n     </form>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-submit', function() {\n        expect(element(by.binding('list')).getText()).toBe('list=[]');\n        element(by.css('#submit')).click();\n        expect(element(by.binding('list')).getText()).toContain('hello');\n        expect(element(by.input('text')).getAttribute('value')).toBe('');\n      });\n      it('should ignore empty strings', function() {\n        expect(element(by.binding('list')).getText()).toBe('list=[]');\n        element(by.css('#submit')).click();\n        element(by.css('#submit')).click();\n        expect(element(by.binding('list')).getText()).toContain('hello');\n       });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19185,
            "ngdoc": "directive",
            "name": "ngFocus",
            "description": "Specify custom behavior on focus event.",
            "element": "window, input, select, textarea, a",
            "priority": "0",
            "params": [
                {
                    "name": "ngFocus",
                    "description": "{@link guide/expression Expression} to evaluate upon\nfocus. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\nSee {@link ng.directive:ngClick ngClick}"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19201,
            "ngdoc": "directive",
            "name": "ngBlur",
            "description": "Specify custom behavior on blur event.",
            "element": "window, input, select, textarea, a",
            "priority": "0",
            "params": [
                {
                    "name": "ngBlur",
                    "description": "{@link guide/expression Expression} to evaluate upon\nblur. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\nSee {@link ng.directive:ngClick ngClick}"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19217,
            "ngdoc": "directive",
            "name": "ngCopy",
            "description": "Specify custom behavior on copy event.",
            "element": "window, input, select, textarea, a",
            "priority": "0",
            "params": [
                {
                    "name": "ngCopy",
                    "description": "{@link guide/expression Expression} to evaluate upon\ncopy. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <input ng-copy=\"copied=true\" ng-init=\"copied=false; value='copy me'\" ng-model=\"value\">\n     copied: {{copied}}\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19238,
            "ngdoc": "directive",
            "name": "ngCut",
            "description": "Specify custom behavior on cut event.",
            "element": "window, input, select, textarea, a",
            "priority": "0",
            "params": [
                {
                    "name": "ngCut",
                    "description": "{@link guide/expression Expression} to evaluate upon\ncut. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <input ng-cut=\"cut=true\" ng-init=\"cut=false; value='cut me'\" ng-model=\"value\">\n     cut: {{cut}}\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19259,
            "ngdoc": "directive",
            "name": "ngPaste",
            "description": "Specify custom behavior on paste event.",
            "element": "window, input, select, textarea, a",
            "priority": "0",
            "params": [
                {
                    "name": "ngPaste",
                    "description": "{@link guide/expression Expression} to evaluate upon\npaste. ({@link guide/expression#-event- Event object is available as `$event`})",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n     <input ng-paste=\"paste=true\" ng-init=\"paste=false\" placeholder='paste here'>\n     pasted: {{paste}}\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19280,
            "ngdoc": "directive",
            "name": "ngIf",
            "restrict": "A",
            "description": "The `ngIf` directive removes or recreates a portion of the DOM tree based on an\n{expression}. If the expression assigned to `ngIf` evaluates to a false\nvalue then the element is removed from the DOM, otherwise a clone of the\nelement is reinserted into the DOM.\n\n`ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the\nelement in the DOM rather than changing its visibility via the `display` css property.  A common\ncase when this difference is significant is when using css selectors that rely on an element's\nposition within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.\n\nNote that when an element is removed using `ngIf` its scope is destroyed and a new scope\nis created when the element is restored.  The scope created within `ngIf` inherits from\nits parent scope using\n[prototypal inheritance](https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance).\nAn important implication of this is if `ngModel` is used within `ngIf` to bind to\na javascript primitive defined in the parent scope. In this case any modifications made to the\nvariable within the child scope will override (hide) the value in the parent scope.\n\nAlso, `ngIf` recreates elements using their compiled state. An example of this behavior\nis if an element's class attribute is directly modified after it's compiled, using something like\njQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element\nthe added class will be lost because the original compiled state is used to regenerate the element.\n\nAdditionally, you can provide animations via the `ngAnimate` module to animate the `enter`\nand `leave` effects.",
            "animations": "enter - happens just after the ngIf contents change and a new DOM element is created and injected into the ngIf container\nleave - happens just before the ngIf contents are removed from the DOM",
            "element": "ANY",
            "scope": "",
            "priority": "600",
            "params": [
                {
                    "name": "ngIf",
                    "description": "If the {@link guide/expression expression} is falsy then\n    the element is removed from the DOM tree. If it is truthy a copy of the compiled\n    element is added to the DOM tree.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n   <file name=\"index.html\">\n     Click me: <input type=\"checkbox\" ng-model=\"checked\" ng-init=\"checked=true\" /><br/>\n     Show when checked:\n     <span ng-if=\"checked\" class=\"animate-if\">\n       I'm removed when the checkbox is unchecked.\n     </span>\n   </file>\n   <file name=\"animations.css\">\n     .animate-if {\n       background:white;\n       border:1px solid black;\n       padding:10px;\n     }\n\n     .animate-if.ng-enter, .animate-if.ng-leave {\n       -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n       transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n     }\n\n     .animate-if.ng-enter,\n     .animate-if.ng-leave.ng-leave-active {\n       opacity:0;\n     }\n\n     .animate-if.ng-leave,\n     .animate-if.ng-enter.ng-enter-active {\n       opacity:1;\n     }\n   </file>\n </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19403,
            "ngdoc": "directive",
            "name": "ngInclude",
            "restrict": "ECA",
            "description": "Fetches, compiles and includes an external HTML fragment.\n\nBy default, the template URL is restricted to the same domain and protocol as the\napplication document. This is done by calling {@link ng.$sce#getTrustedResourceUrl\n$sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols\nyou may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or\n[wrap them](ng.$sce#trustAsResourceUrl) as trusted values. Refer to Angular's {@link\nng.$sce Strict Contextual Escaping}.\n\nIn addition, the browser's\n[Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\nand [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\npolicy may further restrict whether the template is successfully loaded.\nFor example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`\naccess on some browsers.",
            "animations": "enter - animation is used to bring new content into the browser.\nleave - animation is used to animate existing content away.\n\nThe enter and leave animation occur concurrently.",
            "scope": "",
            "priority": "400",
            "params": [
                {
                    "name": "ngInclude|src",
                    "description": "angular expression evaluating to URL. If the source is a string constant,\n                make sure you wrap it in **single** quotes, e.g. `src=\"'myPartialTemplate.html'\"`.",
                    "type": "String"
                },
                {
                    "name": "onload",
                    "description": "Expression to evaluate when a new partial is loaded.",
                    "type": "String="
                },
                {
                    "name": "autoscroll",
                    "description": "Whether `ngInclude` should call {@link ng.$anchorScroll\n                 $anchorScroll} to scroll the viewport after the content is loaded.\n\n                 - If the attribute is not set, disable scrolling.\n                 - If the attribute is set without value, enable scrolling.\n                 - Otherwise enable scrolling only if the expression evaluates to truthy value.",
                    "type": "String="
                }
            ],
            "example": [
                "\n <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n   <file name=\"index.html\">\n    <div ng-controller=\"Ctrl\">\n      <select ng-model=\"template\" ng-options=\"t.name for t in templates\">\n       <option value=\"\">(blank)</option>\n      </select>\n      url of the template: <tt>{{template.url}}</tt>\n      <hr/>\n      <div class=\"slide-animate-container\">\n        <div class=\"slide-animate\" ng-include=\"template.url\"></div>\n      </div>\n    </div>\n   </file>\n   <file name=\"script.js\">\n     function Ctrl($scope) {\n       $scope.templates =\n         [ { name: 'template1.html', url: 'template1.html'},\n           { name: 'template2.html', url: 'template2.html'} ];\n       $scope.template = $scope.templates[0];\n     }\n    </file>\n   <file name=\"template1.html\">\n     Content of template1.html\n   </file>\n   <file name=\"template2.html\">\n     Content of template2.html\n   </file>\n   <file name=\"animations.css\">\n     .slide-animate-container {\n       position:relative;\n       background:white;\n       border:1px solid black;\n       height:40px;\n       overflow:hidden;\n     }\n\n     .slide-animate {\n       padding:10px;\n     }\n\n     .slide-animate.ng-enter, .slide-animate.ng-leave {\n       -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n       transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n\n       position:absolute;\n       top:0;\n       left:0;\n       right:0;\n       bottom:0;\n       display:block;\n       padding:10px;\n     }\n\n     .slide-animate.ng-enter {\n       top:-50px;\n     }\n     .slide-animate.ng-enter.ng-enter-active {\n       top:0;\n     }\n\n     .slide-animate.ng-leave {\n       top:0;\n     }\n     .slide-animate.ng-leave.ng-leave-active {\n       top:50px;\n     }\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     var templateSelect = element(by.model('template'));\n     var includeElem = element(by.css('[ng-include]'));\n\n     it('should load template1.html', function() {\n       expect(includeElem.getText()).toMatch(/Content of template1.html/);\n     });\n\n     it('should load template2.html', function() {\n       if (browser.params.browser == 'firefox') {\n         // Firefox can't handle using selects\n         // See https://github.com/angular/protractor/issues/480\n         return;\n       }\n       templateSelect.click();\n       templateSelect.element.all(by.css('option')).get(2).click();\n       expect(includeElem.getText()).toMatch(/Content of template2.html/);\n     });\n\n     it('should change to blank', function() {\n       if (browser.params.browser == 'firefox') {\n         // Firefox can't handle using selects\n         return;\n       }\n       templateSelect.click();\n       templateSelect.element.all(by.css('option')).get(0).click();\n       expect(includeElem.isPresent()).toBe(false);\n     });\n   </file>\n </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19546,
            "ngdoc": "event",
            "name": "ngInclude#$includeContentRequested",
            "eventtype": "emit on the scope ngInclude was declared in",
            "description": "Emitted every time the ngInclude content is requested.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19555,
            "ngdoc": "event",
            "name": "ngInclude#$includeContentLoaded",
            "eventtype": "emit on the current ngInclude scope",
            "description": "Emitted every time the ngInclude content is reloaded.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19661,
            "ngdoc": "directive",
            "name": "ngInit",
            "restrict": "AC",
            "description": "The `ngInit` directive allows you to evaluate an expression in the\ncurrent scope.\n\n<div class=\"alert alert-error\">\nThe only appropriate use of `ngInit` is for aliasing special properties of\n{@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you\nshould use {@link guide/controller controllers} rather than `ngInit`\nto initialize values on a scope.\n</div>\n<div class=\"alert alert-warning\">\n**Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make\nsure you have parenthesis for correct precedence:\n<pre class=\"prettyprint\">\n  <div ng-init=\"test1 = (data | orderBy:'name')\"></div>\n</pre>\n</div>",
            "priority": "450",
            "element": "ANY",
            "params": [
                {
                    "name": "ngInit",
                    "description": "{@link guide/expression Expression} to eval.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n  <script>\n    function Ctrl($scope) {\n      $scope.list = [['a', 'b'], ['c', 'd']];\n    }\n  </script>\n  <div ng-controller=\"Ctrl\">\n    <div ng-repeat=\"innerList in list\" ng-init=\"outerIndex = $index\">\n      <div ng-repeat=\"value in innerList\" ng-init=\"innerIndex = $index\">\n         <span class=\"example-init\">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>\n      </div>\n    </div>\n  </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should alias index positions', function() {\n        var elements = element.all(by.css('.example-init'));\n        expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');\n        expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');\n        expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');\n        expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');\n      });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19727,
            "ngdoc": "directive",
            "name": "ngNonBindable",
            "restrict": "AC",
            "priority": "1000",
            "description": "The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current\nDOM element. This is useful if the element contains what appears to be Angular directives and\nbindings but which should be ignored by Angular. This could be the case if you have a site that\ndisplays snippets of code, for instance.",
            "element": "ANY",
            "example": [
                "\nIn this example there are two locations where a simple interpolation binding (`{{}}`) is present,\nbut the one wrapped in `ngNonBindable` is left alone.",
                "\n   <example>\n     <file name=\"index.html\">\n       <div>Normal: {{1 + 2}}</div>\n       <div ng-non-bindable>Ignored: {{1 + 2}}</div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ng-non-bindable', function() {\n        expect(element(by.binding('1 + 2')).getText()).toContain('3');\n        expect(element.all(by.css('div')).last().getText()).toMatch(/1 \\+ 2/);\n      });\n     </file>\n   </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19761,
            "ngdoc": "directive",
            "name": "ngPluralize",
            "restrict": "EA",
            "description": "`ngPluralize` is a directive that displays messages according to en-US localization rules.\nThese rules are bundled with angular.js, but can be overridden\n(see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive\nby specifying the mappings between\n[plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\nand the strings to be displayed.\n\n# Plural categories and explicit number rules\nThere are two\n[plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\nin Angular's default en-US locale: \"one\" and \"other\".\n\nWhile a plural category may match many numbers (for example, in en-US locale, \"other\" can match\nany number that is not 1), an explicit number rule can only match one number. For example, the\nexplicit number rule for \"3\" matches the number 3. There are examples of plural categories\nand explicit number rules throughout the rest of this documentation.\n\n# Configuring ngPluralize\nYou configure ngPluralize by providing 2 attributes: `count` and `when`.\nYou can also provide an optional attribute, `offset`.\n\nThe value of the `count` attribute can be either a string or an {@link guide/expression\nAngular expression}; these are evaluated on the current scope for its bound value.\n\nThe `when` attribute specifies the mappings between plural categories and the actual\nstring to be displayed. The value of the attribute should be a JSON object.\n\nThe following example shows how to configure ngPluralize:\n\n```html\n<ng-pluralize count=\"personCount\"\n                when=\"{'0': 'Nobody is viewing.',\n                     'one': '1 person is viewing.',\n                     'other': '{} people are viewing.'}\">\n</ng-pluralize>\n```\n\nIn the example, `\"0: Nobody is viewing.\"` is an explicit number rule. If you did not\nspecify this rule, 0 would be matched to the \"other\" category and \"0 people are viewing\"\nwould be shown instead of \"Nobody is viewing\". You can specify an explicit number rule for\nother numbers, for example 12, so that instead of showing \"12 people are viewing\", you can\nshow \"a dozen people are viewing\".\n\nYou can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted\ninto pluralized strings. In the previous example, Angular will replace `{}` with\n<span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder\nfor <span ng-non-bindable>{{numberExpression}}</span>.\n\n# Configuring ngPluralize with offset\nThe `offset` attribute allows further customization of pluralized text, which can result in\na better user experience. For example, instead of the message \"4 people are viewing this document\",\nyou might display \"John, Kate and 2 others are viewing this document\".\nThe offset attribute allows you to offset a number by any desired value.\nLet's take a look at an example:\n\n```html\n<ng-pluralize count=\"personCount\" offset=2\n              when=\"{'0': 'Nobody is viewing.',\n                     '1': '{{person1}} is viewing.',\n                     '2': '{{person1}} and {{person2}} are viewing.',\n                     'one': '{{person1}}, {{person2}} and one other person are viewing.',\n                     'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n</ng-pluralize>\n```\n\nNotice that we are still using two plural categories(one, other), but we added\nthree explicit number rules 0, 1 and 2.\nWhen one person, perhaps John, views the document, \"John is viewing\" will be shown.\nWhen three people view the document, no explicit number rule is found, so\nan offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.\nIn this case, plural category 'one' is matched and \"John, Marry and one other person are viewing\"\nis shown.\n\nNote that when you specify offsets, you must provide explicit number rules for\nnumbers from 0 up to and including the offset. If you use an offset of 3, for example,\nyou must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for\nplural categories \"one\" and \"other\".",
            "params": [
                {
                    "name": "count",
                    "description": "The variable to be bound to.",
                    "type": "String|expression"
                },
                {
                    "name": "when",
                    "description": "The mapping between plural category to its corresponding strings.",
                    "type": "String"
                },
                {
                    "name": "offset",
                    "description": "Offset to deduct from the total number.",
                    "type": "Number="
                }
            ],
            "example": [
                "\n   <example>\n     <file name=\"index.html\">\n       <script>\n         function Ctrl($scope) {\n           $scope.person1 = 'Igor';\n           $scope.person2 = 'Misko';\n           $scope.personCount = 1;\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         Person 1:<input type=\"text\" ng-model=\"person1\" value=\"Igor\" /><br/>\n         Person 2:<input type=\"text\" ng-model=\"person2\" value=\"Misko\" /><br/>\n         Number of People:<input type=\"text\" ng-model=\"personCount\" value=\"1\" /><br/>\n\n         <!--- Example with simple pluralization rules for en locale --->\n         Without Offset:\n         <ng-pluralize count=\"personCount\"\n                       when=\"{'0': 'Nobody is viewing.',\n                              'one': '1 person is viewing.',\n                              'other': '{} people are viewing.'}\">\n         </ng-pluralize><br>\n\n         <!--- Example with offset --->\n         With Offset(2):\n         <ng-pluralize count=\"personCount\" offset=2\n                       when=\"{'0': 'Nobody is viewing.',\n                              '1': '{{person1}} is viewing.',\n                              '2': '{{person1}} and {{person2}} are viewing.',\n                              'one': '{{person1}}, {{person2}} and one other person are viewing.',\n                              'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n         </ng-pluralize>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should show correct pluralized string', function() {\n         var withoutOffset = element.all(by.css('ng-pluralize')).get(0);\n         var withOffset = element.all(by.css('ng-pluralize')).get(1);\n         var countInput = element(by.model('personCount'));\n\n         expect(withoutOffset.getText()).toEqual('1 person is viewing.');\n         expect(withOffset.getText()).toEqual('Igor is viewing.');\n\n         countInput.clear();\n         countInput.sendKeys('0');\n\n         expect(withoutOffset.getText()).toEqual('Nobody is viewing.');\n         expect(withOffset.getText()).toEqual('Nobody is viewing.');\n\n         countInput.clear();\n         countInput.sendKeys('2');\n\n         expect(withoutOffset.getText()).toEqual('2 people are viewing.');\n         expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');\n\n         countInput.clear();\n         countInput.sendKeys('3');\n\n         expect(withoutOffset.getText()).toEqual('3 people are viewing.');\n         expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');\n\n         countInput.clear();\n         countInput.sendKeys('4');\n\n         expect(withoutOffset.getText()).toEqual('4 people are viewing.');\n         expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');\n       });\n       it('should show data-bound names', function() {\n         var withOffset = element.all(by.css('ng-pluralize')).get(1);\n         var personCount = element(by.model('personCount'));\n         var person1 = element(by.model('person1'));\n         var person2 = element(by.model('person2'));\n         personCount.clear();\n         personCount.sendKeys('4');\n         person1.clear();\n         person1.sendKeys('Di');\n         person2.clear();\n         person2.sendKeys('Vojta');\n         expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');\n       });\n     </file>\n   </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 19976,
            "ngdoc": "directive",
            "name": "ngRepeat",
            "description": "The `ngRepeat` directive instantiates a template once per item from a collection. Each template\ninstance gets its own scope, where the given loop variable is set to the current collection item,\nand `$index` is set to the item index or key.\n\nSpecial properties are exposed on the local scope of each template instance, including:\n\n| Variable  | Type            | Details                                                                     |\n|-----------|-----------------|-----------------------------------------------------------------------------|\n| `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |\n| `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |\n| `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |\n| `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |\n| `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |\n| `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |\n\nCreating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.\nThis may be useful when, for instance, nesting ngRepeats.\n\n# Special repeat start and end points\nTo repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending\nthe range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.\nThe **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)\nup to and including the ending HTML tag where **ng-repeat-end** is placed.\n\nThe example below makes use of this feature:\n```html\n  <header ng-repeat-start=\"item in items\">\n    Header {{ item }}\n  </header>\n  <div class=\"body\">\n    Body {{ item }}\n  </div>\n  <footer ng-repeat-end>\n    Footer {{ item }}\n  </footer>\n```\n\nAnd with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:\n```html\n  <header>\n    Header A\n  </header>\n  <div class=\"body\">\n    Body A\n  </div>\n  <footer>\n    Footer A\n  </footer>\n  <header>\n    Header B\n  </header>\n  <div class=\"body\">\n    Body B\n  </div>\n  <footer>\n    Footer B\n  </footer>\n```\n\nThe custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such\nas **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).",
            "animations": "**.enter** - when a new item is added to the list or when an item is revealed after a filter\n\n**.leave** - when an item is removed from the list or when an item is filtered out\n\n**.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered",
            "element": "ANY",
            "scope": "",
            "priority": "1000",
            "params": [
                {
                    "name": "ngRepeat",
                    "description": "The expression indicating how to enumerate a collection. These\n  formats are currently supported:\n\n  * `variable in expression` – where variable is the user defined loop variable and `expression`\n    is a scope expression giving the collection to enumerate.\n\n    For example: `album in artist.albums`.\n\n  * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,\n    and `expression` is the scope expression giving the collection to enumerate.\n\n    For example: `(name, age) in {'adam':10, 'amalie':12}`.\n\n  * `variable in expression track by tracking_expression` – You can also provide an optional tracking function\n    which can be used to associate the objects in the collection with the DOM elements. If no tracking function\n    is specified the ng-repeat associates elements by identity in the collection. It is an error to have\n    more than one tracking function to resolve to the same key. (This would mean that two distinct objects are\n    mapped to the same DOM element, which is not possible.)  Filters should be applied to the expression,\n    before specifying a tracking expression.\n\n    For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements\n    will be associated by item identity in the array.\n\n    For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique\n    `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements\n    with the corresponding item in the array by identity. Moving the same object in array would move the DOM\n    element in the same way in the DOM.\n\n    For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this\n    case the object identity does not matter. Two objects are considered equivalent as long as their `id`\n    property is same.\n\n    For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter\n    to items in conjunction with a tracking expression.",
                    "type": "Repeat_expression"
                }
            ],
            "example": [
                "\nThis example initializes the scope to a list of names and\nthen uses `ngRepeat` to display every person:\n <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n   <file name=\"index.html\">\n     <div ng-init=\"friends = [\n       {name:'John', age:25, gender:'boy'},\n       {name:'Jessie', age:30, gender:'girl'},\n       {name:'Johanna', age:28, gender:'girl'},\n       {name:'Joy', age:15, gender:'girl'},\n       {name:'Mary', age:28, gender:'girl'},\n       {name:'Peter', age:95, gender:'boy'},\n       {name:'Sebastian', age:50, gender:'boy'},\n       {name:'Erika', age:27, gender:'girl'},\n       {name:'Patrick', age:40, gender:'boy'},\n       {name:'Samantha', age:60, gender:'girl'}\n     ]\">\n       I have {{friends.length}} friends. They are:\n       <input type=\"search\" ng-model=\"q\" placeholder=\"filter friends...\" />\n       <ul class=\"example-animate-container\">\n         <li class=\"animate-repeat\" ng-repeat=\"friend in friends | filter:q\">\n           [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.\n         </li>\n       </ul>\n     </div>\n   </file>\n   <file name=\"animations.css\">\n     .example-animate-container {\n       background:white;\n       border:1px solid black;\n       list-style:none;\n       margin:0;\n       padding:0 10px;\n     }\n\n     .animate-repeat {\n       line-height:40px;\n       list-style:none;\n       box-sizing:border-box;\n     }\n\n     .animate-repeat.ng-move,\n     .animate-repeat.ng-enter,\n     .animate-repeat.ng-leave {\n       -webkit-transition:all linear 0.5s;\n       transition:all linear 0.5s;\n     }\n\n     .animate-repeat.ng-leave.ng-leave-active,\n     .animate-repeat.ng-move,\n     .animate-repeat.ng-enter {\n       opacity:0;\n       max-height:0;\n     }\n\n     .animate-repeat.ng-leave,\n     .animate-repeat.ng-move.ng-move-active,\n     .animate-repeat.ng-enter.ng-enter-active {\n       opacity:1;\n       max-height:40px;\n     }\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     var friends = element.all(by.repeater('friend in friends'));\n\n     it('should render initial data set', function() {\n       expect(friends.count()).toBe(10);\n       expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');\n       expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');\n       expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');\n       expect(element(by.binding('friends.length')).getText())\n           .toMatch(\"I have 10 friends. They are:\");\n     });\n\n      it('should update repeater when filter predicate changes', function() {\n        expect(friends.count()).toBe(10);\n\n        element(by.model('q')).sendKeys('ma');\n\n        expect(friends.count()).toBe(2);\n        expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');\n        expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');\n      });\n     </file>\n   </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 20371,
            "ngdoc": "directive",
            "name": "ngShow",
            "description": "The `ngShow` directive shows or hides the given HTML element based on the expression\nprovided to the ngShow attribute. The element is shown or hidden by removing or adding\nthe `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined\nin AngularJS and sets the display style to none (using an !important flag).\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```html\n<!-- when $scope.myValue is truthy (element is visible) -->\n<div ng-show=\"myValue\"></div>\n\n<!-- when $scope.myValue is falsy (element is hidden) -->\n<div ng-show=\"myValue\" class=\"ng-hide\"></div>\n```\n\nWhen the ngShow expression evaluates to false then the ng-hide CSS class is added to the class attribute\non the element causing it to become hidden. When true, the ng-hide CSS class is removed\nfrom the element causing the element not to appear hidden.\n\n<div class=\"alert alert-warning\">\n**Note:** Here is a list of values that ngShow will consider as a falsy value (case insensitive):<br />\n\"f\" / \"0\" / \"false\" / \"no\" / \"n\" / \"[]\"\n</div>\n\n## Why is !important used?\n\nYou may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector\ncan be easily overridden by heavier selectors. For example, something as simple\nas changing the display style on a HTML list item would make hidden elements appear visible.\nThis also becomes a bigger issue when dealing with CSS frameworks.\n\nBy using !important, the show and hide behavior will work as expected despite any clash between CSS selector\nspecificity (when !important isn't used with any conflicting styles). If a developer chooses to override the\nstyling to change how to hide an element then it is just a matter of using !important in their own CSS code.\n\n### Overriding .ng-hide\n\nBy default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change\nthe hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`\nclass in CSS:\n\n```css\n.ng-hide {\n  //this is just another form of hiding an element\n  display:block!important;\n  position:absolute;\n  top:-9999px;\n  left:-9999px;\n}\n```\n\nBy default you don't need to override in CSS anything and the animations will work around the display style.\n\n## A note about animations with ngShow\n\nAnimations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression\nis true and false. This system works like the animation system present with ngClass except that\nyou must also include the !important flag to override the display property\nso that you can perform an animation when the element is hidden during the time of the animation.\n\n```css\n//\n//a working example can be found at the bottom of this page\n//\n.my-element.ng-hide-add, .my-element.ng-hide-remove {\n  transition:0.5s linear all;\n}\n\n.my-element.ng-hide-add { ... }\n.my-element.ng-hide-add.ng-hide-add-active { ... }\n.my-element.ng-hide-remove { ... }\n.my-element.ng-hide-remove.ng-hide-remove-active { ... }\n```\n\nKeep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display\nproperty to block during animation states--ngAnimate will handle the style toggling automatically for you.",
            "animations": "addClass: .ng-hide - happens after the ngShow expression evaluates to a truthy value and the just before contents are set to visible\nremoveClass: .ng-hide - happens after the ngShow expression evaluates to a non truthy value and just before the contents are set to hidden",
            "element": "ANY",
            "params": [
                {
                    "name": "ngShow",
                    "description": "If the {@link guide/expression expression} is truthy\n    then the element is shown or hidden respectively.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n   <file name=\"index.html\">\n     Click me: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n     <div>\n       Show:\n       <div class=\"check-element animate-show\" ng-show=\"checked\">\n         <span class=\"glyphicon glyphicon-thumbs-up\"></span> I show up when your checkbox is checked.\n       </div>\n     </div>\n     <div>\n       Hide:\n       <div class=\"check-element animate-show\" ng-hide=\"checked\">\n         <span class=\"glyphicon glyphicon-thumbs-down\"></span> I hide when your checkbox is checked.\n       </div>\n     </div>\n   </file>\n   <file name=\"glyphicons.css\">"
            ],
            "import": "url(//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css);\n   </file>\n   <file name=\"animations.css\">\n     .animate-show {\n       -webkit-transition:all linear 0.5s;\n       transition:all linear 0.5s;\n       line-height:20px;\n       opacity:1;\n       padding:10px;\n       border:1px solid black;\n       background:white;\n     }\n\n     .animate-show.ng-hide {\n       line-height:0;\n       opacity:0;\n       padding:0 10px;\n     }\n\n     .check-element {\n       padding:10px;\n       border:1px solid black;\n       background:white;\n     }\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));\n     var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));\n\n     it('should check ng-show / ng-hide', function() {\n       expect(thumbsUp.isDisplayed()).toBeFalsy();\n       expect(thumbsDown.isDisplayed()).toBeTruthy();\n\n       element(by.model('checked')).click();\n\n       expect(thumbsUp.isDisplayed()).toBeTruthy();\n       expect(thumbsDown.isDisplayed()).toBeFalsy();\n     });\n   </file>\n </example>",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 20528,
            "ngdoc": "directive",
            "name": "ngHide",
            "description": "The `ngHide` directive shows or hides the given HTML element based on the expression\nprovided to the ngHide attribute. The element is shown or hidden by removing or adding\nthe `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined\nin AngularJS and sets the display style to none (using an !important flag).\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```html\n<!-- when $scope.myValue is truthy (element is hidden) -->\n<div ng-hide=\"myValue\" class=\"ng-hide\"></div>\n\n<!-- when $scope.myValue is falsy (element is visible) -->\n<div ng-hide=\"myValue\"></div>\n```\n\nWhen the ngHide expression evaluates to true then the .ng-hide CSS class is added to the class attribute\non the element causing it to become hidden. When false, the ng-hide CSS class is removed\nfrom the element causing the element not to appear hidden.\n\n<div class=\"alert alert-warning\">\n**Note:** Here is a list of values that ngHide will consider as a falsy value (case insensitive):<br />\n\"f\" / \"0\" / \"false\" / \"no\" / \"n\" / \"[]\"\n</div>\n\n## Why is !important used?\n\nYou may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector\ncan be easily overridden by heavier selectors. For example, something as simple\nas changing the display style on a HTML list item would make hidden elements appear visible.\nThis also becomes a bigger issue when dealing with CSS frameworks.\n\nBy using !important, the show and hide behavior will work as expected despite any clash between CSS selector\nspecificity (when !important isn't used with any conflicting styles). If a developer chooses to override the\nstyling to change how to hide an element then it is just a matter of using !important in their own CSS code.\n\n### Overriding .ng-hide\n\nBy default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change\nthe hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`\nclass in CSS:\n\n```css\n.ng-hide {\n  //this is just another form of hiding an element\n  display:block!important;\n  position:absolute;\n  top:-9999px;\n  left:-9999px;\n}\n```\n\nBy default you don't need to override in CSS anything and the animations will work around the display style.\n\n## A note about animations with ngHide\n\nAnimations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression\nis true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`\nCSS class is added and removed for you instead of your own CSS class.\n\n```css\n//\n//a working example can be found at the bottom of this page\n//\n.my-element.ng-hide-add, .my-element.ng-hide-remove {\n  transition:0.5s linear all;\n}\n\n.my-element.ng-hide-add { ... }\n.my-element.ng-hide-add.ng-hide-add-active { ... }\n.my-element.ng-hide-remove { ... }\n.my-element.ng-hide-remove.ng-hide-remove-active { ... }\n```\n\nKeep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display\nproperty to block during animation states--ngAnimate will handle the style toggling automatically for you.",
            "animations": "removeClass: .ng-hide - happens after the ngHide expression evaluates to a truthy value and just before the contents are set to hidden\naddClass: .ng-hide - happens after the ngHide expression evaluates to a non truthy value and just before the contents are set to visible",
            "element": "ANY",
            "params": [
                {
                    "name": "ngHide",
                    "description": "If the {@link guide/expression expression} is truthy then\n    the element is shown or hidden respectively.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n   <file name=\"index.html\">\n     Click me: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n     <div>\n       Show:\n       <div class=\"check-element animate-hide\" ng-show=\"checked\">\n         <span class=\"glyphicon glyphicon-thumbs-up\"></span> I show up when your checkbox is checked.\n       </div>\n     </div>\n     <div>\n       Hide:\n       <div class=\"check-element animate-hide\" ng-hide=\"checked\">\n         <span class=\"glyphicon glyphicon-thumbs-down\"></span> I hide when your checkbox is checked.\n       </div>\n     </div>\n   </file>\n   <file name=\"glyphicons.css\">"
            ],
            "import": "url(//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css);\n   </file>\n   <file name=\"animations.css\">\n     .animate-hide {\n       -webkit-transition:all linear 0.5s;\n       transition:all linear 0.5s;\n       line-height:20px;\n       opacity:1;\n       padding:10px;\n       border:1px solid black;\n       background:white;\n     }\n\n     .animate-hide.ng-hide {\n       line-height:0;\n       opacity:0;\n       padding:0 10px;\n     }\n\n     .check-element {\n       padding:10px;\n       border:1px solid black;\n       background:white;\n     }\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));\n     var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));\n\n     it('should check ng-show / ng-hide', function() {\n       expect(thumbsUp.isDisplayed()).toBeFalsy();\n       expect(thumbsDown.isDisplayed()).toBeTruthy();\n\n       element(by.model('checked')).click();\n\n       expect(thumbsUp.isDisplayed()).toBeTruthy();\n       expect(thumbsDown.isDisplayed()).toBeFalsy();\n     });\n   </file>\n </example>",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 20683,
            "ngdoc": "directive",
            "name": "ngStyle",
            "restrict": "AC",
            "description": "The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngStyle\n\n{@link",
                    "description": "guide/expression Expression} which evals to an\nobject whose keys are CSS style names and values are corresponding values for those CSS\nkeys.\n\nSince some CSS style names are not valid keys for an object, they must be quoted.\nSee the 'background-color' style in the example below.",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n  <example>\n    <file name=\"index.html\">\n       <input type=\"button\" value=\"set color\" ng-click=\"myStyle={color:'red'}\">\n       <input type=\"button\" value=\"set background\" ng-click=\"myStyle={'background-color':'blue'}\">\n       <input type=\"button\" value=\"clear\" ng-click=\"myStyle={}\">\n       <br/>\n       <span ng-style=\"myStyle\">Sample Text</span>\n       <pre>myStyle={{myStyle}}</pre>\n    </file>\n    <file name=\"style.css\">\n      span {\n        color: black;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var colorSpan = element(by.css('span'));\n\n      iit('should check ng-style', function() {\n        expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');\n        element(by.css('input[value=\\'set color\\']')).click();\n        expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');\n        element(by.css('input[value=clear]')).click();\n        expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');\n      });\n    </file>\n  </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 20738,
            "ngdoc": "directive",
            "name": "ngSwitch",
            "restrict": "EA",
            "description": "The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.\nElements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location\nas specified in the template.\n\nThe directive itself works similar to ngInclude, however, instead of downloading template code (or loading it\nfrom the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element\nmatches the value obtained from the evaluated expression. In other words, you define a container element\n(where you place the directive), place an expression on the **`on=\"...\"` attribute**\n(or the **`ng-switch=\"...\"` attribute**), define any inner elements inside of the directive and place\na when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on\nexpression is evaluated. If a matching expression is not found via a when attribute then an element with the default\nattribute is displayed.\n\n<div class=\"alert alert-info\">\nBe aware that the attribute values to match against cannot be expressions. They are interpreted\nas literal string values to match against.\nFor example, **`ng-switch-when=\"someVal\"`** will match against the string `\"someVal\"` not against the\nvalue of the expression `$scope.someVal`.\n</div>",
            "animations": "enter - happens after the ngSwitch contents change and the matched child element is placed inside the container\nleave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM",
            "usage": "```\n<ANY ng-switch=\"expression\">\n  <ANY ng-switch-when=\"matchValue1\">...</ANY>\n  <ANY ng-switch-when=\"matchValue2\">...</ANY>\n  <ANY ng-switch-default>...</ANY>\n</ANY>\n```",
            "scope": "",
            "priority": "800",
            "params": [
                {
                    "name": "ngSwitch|on",
                    "description": "expression to match against <tt>ng-switch-when</tt>.\nOn child elements add:\n\n* `ngSwitchWhen`: the case statement to match against. If match then this\n  case will be displayed. If the same match appears multiple times, all the\n  elements will be displayed.\n* `ngSwitchDefault`: the default case when no other case match. If there\n  are multiple default cases, all of them will be displayed when no other\n  case match.",
                    "type": "*"
                }
            ],
            "example": [
                "\n <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n   <file name=\"index.html\">\n     <div ng-controller=\"Ctrl\">\n       <select ng-model=\"selection\" ng-options=\"item for item in items\">\n       </select>\n       <tt>selection={{selection}}</tt>\n       <hr/>\n       <div class=\"animate-switch-container\"\n         ng-switch on=\"selection\">\n           <div class=\"animate-switch\" ng-switch-when=\"settings\">Settings Div</div>\n           <div class=\"animate-switch\" ng-switch-when=\"home\">Home Span</div>\n           <div class=\"animate-switch\" ng-switch-default>default</div>\n       </div>\n     </div>\n   </file>\n   <file name=\"script.js\">\n     function Ctrl($scope) {\n       $scope.items = ['settings', 'home', 'other'];\n       $scope.selection = $scope.items[0];\n     }\n   </file>\n   <file name=\"animations.css\">\n     .animate-switch-container {\n       position:relative;\n       background:white;\n       border:1px solid black;\n       height:40px;\n       overflow:hidden;\n     }\n\n     .animate-switch {\n       padding:10px;\n     }\n\n     .animate-switch.ng-animate {\n       -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n       transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n\n       position:absolute;\n       top:0;\n       left:0;\n       right:0;\n       bottom:0;\n     }\n\n     .animate-switch.ng-leave.ng-leave-active,\n     .animate-switch.ng-enter {\n       top:-50px;\n     }\n     .animate-switch.ng-leave,\n     .animate-switch.ng-enter.ng-enter-active {\n       top:0;\n     }\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     var switchElem = element(by.css('[ng-switch]'));\n     var select = element(by.model('selection'));\n\n     it('should start in settings', function() {\n       expect(switchElem.getText()).toMatch(/Settings Div/);\n     });\n     it('should change to home', function() {\n       select.element.all(by.css('option')).get(1).click();\n       expect(switchElem.getText()).toMatch(/Home Span/);\n     });\n     it('should select default', function() {\n       select.element.all(by.css('option')).get(2).click();\n       expect(switchElem.getText()).toMatch(/default/);\n     });\n   </file>\n </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 20938,
            "ngdoc": "directive",
            "name": "ngTransclude",
            "restrict": "AC",
            "description": "Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.\n\nAny existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.",
            "element": "ANY",
            "example": [
                "\n  <example module=\"transclude\">\n    <file name=\"index.html\">\n      <script>\n        function Ctrl($scope) {\n          $scope.title = 'Lorem Ipsum';\n          $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';\n        }\n\n        angular.module('transclude', [])\n         .directive('pane', function(){\n            return {\n              restrict: 'E',\n              transclude: true,\n              scope: { title:'@' },\n              template: '<div style=\"border: 1px solid black;\">' +\n                          '<div style=\"background-color: gray\">{{title}}</div>' +\n                          '<div ng-transclude></div>' +\n                        '</div>'\n            };\n        });\n      </script>\n      <div ng-controller=\"Ctrl\">\n        <input ng-model=\"title\"><br>\n        <textarea ng-model=\"text\"></textarea> <br/>\n        <pane title=\"{{title}}\">{{text}}</pane>\n      </div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n       it('should have transcluded', function() {\n         var titleElement = element(by.model('title'));\n         titleElement.clear();\n         titleElement.sendKeys('TITLE');\n         var textElement = element(by.model('text'));\n         textElement.clear();\n         textElement.sendKeys('TEXT');\n         expect(element(by.binding('title')).getText()).toEqual('TITLE');\n         expect(element(by.binding('text')).getText()).toEqual('TEXT');\n       });\n    </file>\n  </example>\n"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 21010,
            "ngdoc": "directive",
            "name": "script",
            "restrict": "E",
            "description": "Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the\ntemplate can be used by {@link ng.directive:ngInclude `ngInclude`},\n{@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the\n`<script>` element must be specified as `text/ng-template`, and a cache name for the template must be\nassigned through the element's `id`, which can then be used as a directive's `templateUrl`.",
            "params": [
                {
                    "name": "type",
                    "description": "Must be set to `'text/ng-template'`.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "Cache name of the template.",
                    "type": "String"
                }
            ],
            "example": [
                "\n <example>\n   <file name=\"index.html\">\n     <script type=\"text/ng-template\" id=\"/tpl.html\">\n       Content of the template.\n     </script>\n\n     <a ng-click=\"currentTpl='/tpl.html'\" id=\"tpl-link\">Load inlined template</a>\n     <div id=\"tpl-content\" ng-include src=\"currentTpl\"></div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should load template defined inside script tag', function() {\n       element(by.css('#tpl-link')).click();\n       expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);\n     });\n   </file>\n </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular/angular.js",
            "line": 21060,
            "ngdoc": "directive",
            "name": "select",
            "restrict": "E",
            "description": "HTML `SELECT` element with angular data-binding.\n\n# `ngOptions`\n\nThe `ngOptions` attribute can be used to dynamically generate a list of `<option>`\nelements for the `<select>` element using the array or object obtained by evaluating the\n`ngOptions` comprehension_expression.\n\nWhen an item in the `<select>` menu is selected, the array element or object property\nrepresented by the selected option will be bound to the model identified by the `ngModel`\ndirective.\n\n<div class=\"alert alert-warning\">\n**Note:** `ngModel` compares by reference, not value. This is important when binding to an\narray of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).\n</div>\n\nOptionally, a single hard-coded `<option>` element, with the value set to an empty string, can\nbe nested into the `<select>` element. This element will then represent the `null` or \"not selected\"\noption. See example below for demonstration.\n\n<div class=\"alert alert-warning\">\n**Note:** `ngOptions` provides an iterator facility for the `<option>` element which should be used instead\nof {@link ng.directive:ngRepeat ngRepeat} when you want the\n`select` model to be bound to a non-string value. This is because an option element can only\nbe bound to string values at present.\n</div>",
            "params": [
                {
                    "name": "ngModel",
                    "description": "Assignable angular expression to data-bind to.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Property name of the form under which the control is published.",
                    "type": "String="
                },
                {
                    "name": "required",
                    "description": "The control is considered valid only if value is entered.",
                    "type": "String="
                },
                {
                    "name": "ngRequired",
                    "description": "Adds `required` attribute and `required` validation constraint to\n   the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   `required` when you want to data-bind to the `required` attribute.",
                    "type": "String="
                },
                {
                    "name": "ngOptions",
                    "description": "in one of the following forms:\n\n  * for array data sources:\n    * `label` **`for`** `value` **`in`** `array`\n    * `select` **`as`** `label` **`for`** `value` **`in`** `array`\n    * `label`  **`group by`** `group` **`for`** `value` **`in`** `array`\n    * `select` **`as`** `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`\n  * for object data sources:\n    * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n    * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n    * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`\n    * `select` **`as`** `label` **`group by`** `group`\n        **`for` `(`**`key`**`,`** `value`**`) in`** `object`\n\nWhere:\n\n  * `array` / `object`: an expression which evaluates to an array / object to iterate over.\n  * `value`: local variable which will refer to each item in the `array` or each property value\n     of `object` during iteration.\n  * `key`: local variable which will refer to a property name in `object` during iteration.\n  * `label`: The result of this expression will be the label for `<option>` element. The\n    `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).\n  * `select`: The result of this expression will be bound to the model of the parent `<select>`\n     element. If not specified, `select` expression will default to `value`.\n  * `group`: The result of this expression will be used to group options using the `<optgroup>`\n     DOM element.\n  * `trackexpr`: Used when working with an array of objects. The result of this expression will be\n     used to identify the objects in the array. The `trackexpr` will most likely refer to the\n    `value` variable (e.g. `value.propertyName`).",
                    "type": "Comprehension_expression="
                }
            ],
            "example": [
                "\n   <example>\n     <file name=\"index.html\">\n       <script>\n       function MyCntrl($scope) {\n         $scope.colors = [\n           {name:'black', shade:'dark'},\n           {name:'white', shade:'light'},\n           {name:'red', shade:'dark'},\n           {name:'blue', shade:'dark'},\n           {name:'yellow', shade:'light'}\n         ];\n         $scope.myColor = $scope.colors[2]; // red\n       }\n       </script>\n       <div ng-controller=\"MyCntrl\">\n         <ul>\n           <li ng-repeat=\"color in colors\">\n             Name: <input ng-model=\"color.name\">\n             [<a href ng-click=\"colors.splice($index, 1)\">X</a>]\n           </li>\n           <li>\n             [<a href ng-click=\"colors.push({})\">add</a>]\n           </li>\n         </ul>\n         <hr/>\n         Color (null not allowed):\n         <select ng-model=\"myColor\" ng-options=\"color.name for color in colors\"></select><br>\n\n         Color (null allowed):\n         <span  class=\"nullable\">\n           <select ng-model=\"myColor\" ng-options=\"color.name for color in colors\">\n             <option value=\"\">-- choose color --</option>\n           </select>\n         </span><br/>\n\n         Color grouped by shade:\n         <select ng-model=\"myColor\" ng-options=\"color.name group by color.shade for color in colors\">\n         </select><br/>\n\n\n         Select <a href ng-click=\"myColor = { name:'not in list', shade: 'other' }\">bogus</a>.<br>\n         <hr/>\n         Currently selected: {{ {selected_color:myColor}  }}\n         <div style=\"border:solid 1px black; height:20px\"\n              ng-style=\"{'background-color':myColor.name}\">\n         </div>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n        it('should check ng-options', function() {\n          expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');\n          element.all(by.select('myColor')).first().click();\n          element.all(by.css('select[ng-model=\"myColor\"] option')).first().click();\n          expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');\n          element(by.css('.nullable select[ng-model=\"myColor\"]')).click();\n          element.all(by.css('.nullable select[ng-model=\"myColor\"] option')).first().click();\n          expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');\n        });\n     </file>\n   </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 1,
            "license": "AngularJS v1.2.18\n(c) 2010-2014 Google, Inc. http://angularjs.org\nLicense: MIT",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 8,
            "ngdoc": "module",
            "name": "ngRoute",
            "description": "# ngRoute\n\nThe `ngRoute` module provides routing and deeplinking services and directives for angular apps.\n\n## Example\nSee {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n\n\n<div doc-module-components=\"ngRoute\"></div>",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 27,
            "ngdoc": "provider",
            "name": "$routeProvider",
            "kind": "function",
            "description": "Used for configuring routes.\n\n## Example\nSee {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n\n## Dependencies\nRequires the {@link ngRoute `ngRoute`} module to be installed.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 49,
            "ngdoc": "method",
            "name": "$routeProvider#when",
            "params": [
                {
                    "name": "path",
                    "description": "Route path (matched against `$location.path`). If `$location.path`\n   contains redundant trailing slash or is missing one, the route will still match and the\n   `$location.path` will be updated to add or drop the trailing slash to exactly match the\n   route definition.\n\n   * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up\n       to the next slash are matched and stored in `$routeParams` under the given `name`\n       when the route matches.\n   * `path` can contain named groups starting with a colon and ending with a star:\n       e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`\n       when the route matches.\n   * `path` can contain optional named groups with a question mark: e.g.`:name?`.\n\n   For example, routes like `/color/:color/largecode/:largecode*\\/edit` will match\n   `/color/brown/largecode/code/with/slashes/edit` and extract:\n\n   * `color: brown`\n   * `largecode: code/with/slashes`.",
                    "type": "String"
                },
                {
                    "name": "route",
                    "description": "Mapping information to be assigned to `$route.current` on route\n   match.\n\n   Object properties:\n\n   - `controller` – `{(string|function()=}` – Controller fn that should be associated with\n     newly created scope or the name of a {@link angular.Module#controller registered\n     controller} if passed as a string.\n   - `controllerAs` – `{string=}` – A controller alias name. If present the controller will be\n     published to scope under the `controllerAs` name.\n   - `template` – `{string=|function()=}` – html template as a string or a function that\n     returns an html template as a string which should be used by {@link\n     ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.\n     This property takes precedence over `templateUrl`.\n\n     If `template` is a function, it will be called with the following parameters:\n\n     - `{Array.<Object>}` - route parameters extracted from the current\n       `$location.path()` by applying the current route\n\n   - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html\n     template that should be used by {@link ngRoute.directive:ngView ngView}.\n\n     If `templateUrl` is a function, it will be called with the following parameters:\n\n     - `{Array.<Object>}` - route parameters extracted from the current\n       `$location.path()` by applying the current route\n\n   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n     be injected into the controller. If any of these dependencies are promises, the router\n     will wait for them all to be resolved or one to be rejected before the controller is\n     instantiated.\n     If all the promises are resolved successfully, the values of the resolved promises are\n     injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is\n     fired. If any of the promises are rejected the\n     {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired. The map object\n     is:\n\n     - `key` – `{string}`: a name of a dependency to be injected into the controller.\n     - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n       Otherwise if function, then it is {@link auto.$injector#invoke injected}\n       and the return value is treated as the dependency. If the result is a promise, it is\n       resolved before its value is injected into the controller. Be aware that\n       `ngRoute.$routeParams` will still refer to the previous route within these resolve\n       functions.  Use `$route.current.params` to access the new route parameters, instead.\n\n   - `redirectTo` – {(string|function())=} – value to update\n     {@link ng.$location $location} path with and trigger route redirection.\n\n     If `redirectTo` is a function, it will be called with the following parameters:\n\n     - `{Object.<string>}` - route parameters extracted from the current\n       `$location.path()` by applying the current route templateUrl.\n     - `{string}` - current `$location.path()`\n     - `{Object}` - current `$location.search()`\n\n     The custom `redirectTo` function is expected to return a string which will be used\n     to update `$location.path()` and `$location.search()`.\n\n   - `[reloadOnSearch=true]` - {boolean=} - reload route when only `$location.search()`\n     or `$location.hash()` changes.\n\n     If the option is set to `false` and url in the browser changes, then\n     `$routeUpdate` event is broadcasted on the root scope.\n\n   - `[caseInsensitiveMatch=false]` - {boolean=} - match routes without being case sensitive\n\n     If the option is set to `true`, then the particular route can be matched without being\n     case sensitive",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "self",
                "type": "Object"
            },
            "description": "Adds a new route definition to the `$route` service.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 170,
            "params": [
                {
                    "name": "path",
                    "description": "path",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "?Object"
            },
            "description": "Normalizes the given path, returning a regular expression\nand the original path.\n\nInspired by pathRexp in visionmedia/express/lib/utils.js.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 211,
            "ngdoc": "method",
            "name": "$routeProvider#otherwise",
            "description": "Sets route definition that will be used on route change when no other route definition\nis matched.",
            "params": [
                {
                    "name": "params",
                    "description": "Mapping information to be assigned to `$route.current`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "self",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 238,
            "ngdoc": "service",
            "name": "current Reference to the current route definition.!~YUIDOC_LINE~!The route definition contains:!~YUIDOC_LINE~!!~YUIDOC_LINE~!  - `controller`: The controller constructor as define in route definition.!~YUIDOC_LINE~!  - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for!~YUIDOC_LINE~!    controller instantiation. The `locals` contain!~YUIDOC_LINE~!    the resolved values of the `resolve` map. Additionally the `locals` also contain:!~YUIDOC_LINE~!!~YUIDOC_LINE~!    - `$scope` - The current route scope.!~YUIDOC_LINE~!    - `$template` - The current route template HTML.",
            "requires": [
                "$location",
                "$routeParams"
            ],
            "itemtype": "property",
            "type": "Object",
            "description": "`$route` is used for deep-linking URLs to controllers and views (HTML partials).\nIt watches `$location.url()` and tries to map the path to an existing route definition.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.\n\nYou can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.\n\nThe `$route` service is typically used in conjunction with the\n{@link ngRoute.directive:ngView `ngView`} directive and the\n{@link ngRoute.$routeParams `$routeParams`} service.",
            "example": [
                "\nThis example shows how changing the URL hash causes the `$route` to match a route against the\nURL, and the `ngView` pulls in the partial.\n\nNote that this example is using {@link ng.directive:script inlined templates}\nto get it working on jsfiddle as well.\n\n<example name=\"$route-service\" module=\"ngRouteExample\"\n         deps=\"angular-route.js\" fixBase=\"true\">\n  <file name=\"index.html\">\n    <div ng-controller=\"MainController\">\n      Choose:\n      <a href=\"Book/Moby\">Moby</a> |\n      <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n      <a href=\"Book/Gatsby\">Gatsby</a> |\n      <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n      <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n      <div ng-view></div>\n\n      <hr />\n\n      <pre>$location.path() = {{$location.path()}}</pre>\n      <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\n      <pre>$route.current.params = {{$route.current.params}}</pre>\n      <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n      <pre>$routeParams = {{$routeParams}}</pre>\n    </div>\n  </file>\n\n  <file name=\"book.html\">\n    controller: {{name}}<br />\n    Book Id: {{params.bookId}}<br />\n  </file>\n\n  <file name=\"chapter.html\">\n    controller: {{name}}<br />\n    Book Id: {{params.bookId}}<br />\n    Chapter Id: {{params.chapterId}}\n  </file>\n\n  <file name=\"script.js\">\n    angular.module('ngRouteExample', ['ngRoute'])\n\n     .controller('MainController', function($scope, $route, $routeParams, $location) {\n         $scope.$route = $route;\n         $scope.$location = $location;\n         $scope.$routeParams = $routeParams;\n     })\n\n     .controller('BookController', function($scope, $routeParams) {\n         $scope.name = \"BookController\";\n         $scope.params = $routeParams;\n     })\n\n     .controller('ChapterController', function($scope, $routeParams) {\n         $scope.name = \"ChapterController\";\n         $scope.params = $routeParams;\n     })\n\n    .config(function($routeProvider, $locationProvider) {\n      $routeProvider\n       .when('/Book/:bookId', {\n        templateUrl: 'book.html',\n        controller: 'BookController',\n        resolve: {\n          // I will cause a 1 second delay\n          delay: function($q, $timeout) {\n            var delay = $q.defer();\n            $timeout(delay.resolve, 1000);\n            return delay.promise;\n          }\n        }\n      })\n      .when('/Book/:bookId/ch/:chapterId', {\n        templateUrl: 'chapter.html',\n        controller: 'ChapterController'\n      });\n\n      // configure html5 to get links working on jsfiddle\n      $locationProvider.html5Mode(true);\n    });\n\n  </file>\n\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should load and compile correct template', function() {\n      element(by.linkText('Moby: Ch1')).click();\n      var content = element(by.css('[ng-view]')).getText();\n      expect(content).toMatch(/controller\\: ChapterController/);\n      expect(content).toMatch(/Book Id\\: Moby/);\n      expect(content).toMatch(/Chapter Id\\: 1/);\n\n      element(by.partialLinkText('Scarlet')).click();\n\n      content = element(by.css('[ng-view]')).getText();\n      expect(content).toMatch(/controller\\: BookController/);\n      expect(content).toMatch(/Book Id\\: Scarlet/);\n    });\n  </file>\n</example>"
            ],
            "class": "",
            "module": "ng",
            "subprops": [
                {
                    "name": "routes",
                    "description": "Object with all route configuration Objects as its properties.",
                    "type": "Object"
                }
            ]
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 372,
            "ngdoc": "event",
            "name": "$route#$routeChangeStart",
            "eventtype": "broadcast on root scope",
            "description": "Broadcasted before a route change. At this  point the route services starts\nresolving all of the dependencies needed for the route change to occur.\nTypically this involves fetching the view template as well as any dependencies\ndefined in `resolve` route property. Once  all of the dependencies are resolved\n`$routeChangeSuccess` is fired.",
            "params": [
                {
                    "name": "angularEvent",
                    "description": "Synthetic event object.",
                    "type": "Object"
                },
                {
                    "name": "next",
                    "description": "Future route information.",
                    "type": "Route"
                },
                {
                    "name": "current",
                    "description": "Current route information.",
                    "type": "Route"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 388,
            "ngdoc": "event",
            "name": "$route#$routeChangeSuccess",
            "eventtype": "broadcast on root scope",
            "description": "Broadcasted after a route dependencies are resolved.\n{@link ngRoute.directive:ngView ngView} listens for the directive\nto instantiate the controller and render the view.",
            "params": [
                {
                    "name": "angularEvent",
                    "description": "Synthetic event object.",
                    "type": "Object"
                },
                {
                    "name": "current",
                    "description": "Current route information.",
                    "type": "Route"
                },
                {
                    "name": "previous",
                    "description": "Previous route information, or undefined if current is\nfirst route entered.",
                    "type": "Route|Undefined"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 403,
            "ngdoc": "event",
            "name": "$route#$routeChangeError",
            "eventtype": "broadcast on root scope",
            "description": "Broadcasted if any of the resolve promises are rejected.",
            "params": [
                {
                    "name": "angularEvent",
                    "description": "Synthetic event object",
                    "type": "Object"
                },
                {
                    "name": "current",
                    "description": "Current route information.",
                    "type": "Route"
                },
                {
                    "name": "previous",
                    "description": "Previous route information.",
                    "type": "Route"
                },
                {
                    "name": "rejection",
                    "description": "Rejection of the promise. Usually the error of the failed promise.",
                    "type": "Route"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 416,
            "ngdoc": "event",
            "name": "$route#$routeUpdate",
            "eventtype": "broadcast on root scope",
            "description": "The `reloadOnSearch` property has been set to false, and we are reusing the same\ninstance of the Controller.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 430,
            "ngdoc": "method",
            "name": "$route#reload",
            "description": "Causes `$route` service to reload the current route even if\n{@link ng.$location $location} hasn't changed.\n\nAs a result of that, {@link ngRoute.directive:ngView ngView}\ncreates new scope, reinstantiates the controller.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 453,
            "params": [
                {
                    "name": "on",
                    "description": "current url",
                    "type": "String"
                },
                {
                    "name": "route",
                    "description": "route regexp to match the url against",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "?Object"
            },
            "description": "Check if the route matches the current url.\n\nInspired by match in\nvisionmedia/express/lib/router/router.js.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 563,
            "return": {
                "description": "the current active route, by matching it against the URL",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 581,
            "return": {
                "description": "interpolation of the redirect path with the parameters",
                "type": "String"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 605,
            "ngdoc": "service",
            "name": "$routeParams",
            "requires": [
                "$route"
            ],
            "description": "The `$routeParams` service allows you to retrieve the current set of route parameters.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.\n\nThe route parameters are a combination of {@link ng.$location `$location`}'s\n{@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.\nThe `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.\n\nIn case of parameter name collision, `path` params take precedence over `search` params.\n\nThe service guarantees that the identity of the `$routeParams` object will remain unchanged\n(but its properties will likely change) even when a route change occurs.\n\nNote that the `$routeParams` are only updated *after* a route change completes successfully.\nThis means that you cannot rely on `$routeParams` being correct in route resolve functions.\nInstead you can use `$route.current.params` to access the new route's parameters.",
            "example": [
                "\n```js\n // Given:\n // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n // Route: /Chapter/:chapterId/Section/:sectionId\n //\n // Then\n $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}\n```"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 646,
            "ngdoc": "directive",
            "name": "ngView",
            "restrict": "ECA",
            "description": "# Overview\n`ngView` is a directive that complements the {@link ngRoute.$route $route} service by\nincluding the rendered template of the current route into the main layout (`index.html`) file.\nEvery time the current route changes, the included view changes with it according to the\nconfiguration of the `$route` service.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.",
            "animations": "enter - animation is used to bring new content into the browser.\nleave - animation is used to animate existing content away.\n\nThe enter and leave animation occur concurrently.",
            "scope": "",
            "priority": "400",
            "params": [
                {
                    "name": "onload",
                    "description": "Expression to evaluate whenever the view updates.",
                    "type": "String="
                },
                {
                    "name": "autoscroll",
                    "description": "Whether `ngView` should call {@link ng.$anchorScroll\n                 $anchorScroll} to scroll the viewport after the view is updated.\n\n                 - If the attribute is not set, disable scrolling.\n                 - If the attribute is set without value, enable scrolling.\n                 - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated\n                   as an expression yields a truthy value.",
                    "type": "String="
                }
            ],
            "example": [
                "\n   <example name=\"ngView-directive\" module=\"ngViewExample\"\n            deps=\"angular-route.js;angular-animate.js\"\n            animations=\"true\" fixBase=\"true\">\n     <file name=\"index.html\">\n       <div ng-controller=\"MainCtrl as main\">\n         Choose:\n         <a href=\"Book/Moby\">Moby</a> |\n         <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n         <a href=\"Book/Gatsby\">Gatsby</a> |\n         <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n         <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n         <div class=\"view-animate-container\">\n           <div ng-view class=\"view-animate\"></div>\n         </div>\n         <hr />\n\n         <pre>$location.path() = {{main.$location.path()}}</pre>\n         <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>\n         <pre>$route.current.params = {{main.$route.current.params}}</pre>\n         <pre>$route.current.scope.name = {{main.$route.current.scope.name}}</pre>\n         <pre>$routeParams = {{main.$routeParams}}</pre>\n       </div>\n     </file>\n\n     <file name=\"book.html\">\n       <div>\n         controller: {{book.name}}<br />\n         Book Id: {{book.params.bookId}}<br />\n       </div>\n     </file>\n\n     <file name=\"chapter.html\">\n       <div>\n         controller: {{chapter.name}}<br />\n         Book Id: {{chapter.params.bookId}}<br />\n         Chapter Id: {{chapter.params.chapterId}}\n       </div>\n     </file>\n\n     <file name=\"animations.css\">\n       .view-animate-container {\n         position:relative;\n         height:100px!important;\n         position:relative;\n         background:white;\n         border:1px solid black;\n         height:40px;\n         overflow:hidden;\n       }\n\n       .view-animate {\n         padding:10px;\n       }\n\n       .view-animate.ng-enter, .view-animate.ng-leave {\n         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n\n         display:block;\n         width:100%;\n         border-left:1px solid black;\n\n         position:absolute;\n         top:0;\n         left:0;\n         right:0;\n         bottom:0;\n         padding:10px;\n       }\n\n       .view-animate.ng-enter {\n         left:100%;\n       }\n       .view-animate.ng-enter.ng-enter-active {\n         left:0;\n       }\n       .view-animate.ng-leave.ng-leave-active {\n         left:-100%;\n       }\n     </file>\n\n     <file name=\"script.js\">\n       angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])\n         .config(['$routeProvider', '$locationProvider',\n           function($routeProvider, $locationProvider) {\n             $routeProvider\n               .when('/Book/:bookId', {\n                 templateUrl: 'book.html',\n                 controller: 'BookCtrl',\n                 controllerAs: 'book'\n               })\n               .when('/Book/:bookId/ch/:chapterId', {\n                 templateUrl: 'chapter.html',\n                 controller: 'ChapterCtrl',\n                 controllerAs: 'chapter'\n               });\n\n             // configure html5 to get links working on jsfiddle\n             $locationProvider.html5Mode(true);\n         }])\n         .controller('MainCtrl', ['$route', '$routeParams', '$location',\n           function($route, $routeParams, $location) {\n             this.$route = $route;\n             this.$location = $location;\n             this.$routeParams = $routeParams;\n         }])\n         .controller('BookCtrl', ['$routeParams', function($routeParams) {\n           this.name = \"BookCtrl\";\n           this.params = $routeParams;\n         }])\n         .controller('ChapterCtrl', ['$routeParams', function($routeParams) {\n           this.name = \"ChapterCtrl\";\n           this.params = $routeParams;\n         }]);\n\n     </file>\n\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should load and compile correct template', function() {\n         element(by.linkText('Moby: Ch1')).click();\n         var content = element(by.css('[ng-view]')).getText();\n         expect(content).toMatch(/controller\\: ChapterCtrl/);\n         expect(content).toMatch(/Book Id\\: Moby/);\n         expect(content).toMatch(/Chapter Id\\: 1/);\n\n         element(by.partialLinkText('Scarlet')).click();\n\n         content = element(by.css('[ng-view]')).getText();\n         expect(content).toMatch(/controller\\: BookCtrl/);\n         expect(content).toMatch(/Book Id\\: Scarlet/);\n       });\n     </file>\n   </example>"
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/angular-route/angular-route.js",
            "line": 815,
            "ngdoc": "event",
            "name": "ngView#$viewContentLoaded",
            "eventtype": "emit on the current ngView scope",
            "description": "Emitted every time the ngView content is reloaded.",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 846,
            "description": "Create key-value caches of limited size",
            "return": {
                "description": "Returns the Object data after storing it on itself with\n\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n\tdeleting the oldest entry",
                "type": "Function(string, Object)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 866,
            "description": "Mark a function for special use by Sizzle",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to mark",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 875,
            "description": "Support testing using an element",
            "params": [
                {
                    "name": "fn",
                    "description": "Passed the created div and expects a boolean result",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 896,
            "description": "Adds the same handler for all of the specified attrs",
            "params": [
                {
                    "name": "attrs",
                    "description": "Pipe-separated list of attributes",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The method that will be applied",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 910,
            "description": "Checks document order of two siblings",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "Returns less than 0 if a precedes b, greater than 0 if a follows b",
                "type": "Number"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 939,
            "description": "Returns a function to use in pseudos for input types",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 950,
            "description": "Returns a function to use in pseudos for buttons",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 961,
            "description": "Returns a function to use in pseudos for positionals",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 983,
            "description": "Checks a node for validity as a Sizzle context",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Element|Object="
                }
            ],
            "return": {
                "description": "The input node if acceptable, otherwise a falsy value",
                "type": "Element|Object|Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 995,
            "description": "Detects XML nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "An element or a document",
                    "type": "Element|Object"
                }
            ],
            "return": {
                "description": "True iff elem is a non-HTML XML node",
                "type": "Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 1007,
            "description": "Sets document-related variables once based on the current document",
            "params": [
                {
                    "name": "doc",
                    "description": "An element or document object to use to set the document",
                    "type": "Element|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current document",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 1440,
            "description": "Document sorting and removing duplicates",
            "params": [
                {
                    "name": "results",
                    "description": "",
                    "type": "ArrayLike"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 1473,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 2440,
            "description": "A low-level selection function that works with Sizzle's compiled\n selector functions",
            "params": [
                {
                    "name": "selector",
                    "description": "A selector or a pre-compiled\n selector function built with Sizzle.compile",
                    "type": "String|Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "results",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "seed",
                    "description": "A set of elements to match against",
                    "type": "Array",
                    "optional": true
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 3401,
            "description": "The ready event handler and self cleanup method",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 3494,
            "description": "Determines whether an object can have data",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 5454,
            "description": "Retrieve the actual display of a element",
            "params": [
                {
                    "name": "name",
                    "description": "nodeName of the element",
                    "type": "String"
                },
                {
                    "name": "doc",
                    "description": "Document object",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 5478,
            "description": "Try to determine the default display value of an element",
            "params": [
                {
                    "name": "nodeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 8823,
            "description": "Load a url into a page",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/dist/jquery.js",
            "line": 8897,
            "description": "Gets a window from an element",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/ajax/load.js",
            "line": 15,
            "description": "Load a url into a page",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/core/ready.js",
            "line": 61,
            "description": "The ready event handler and self cleanup method",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/css/defaultDisplay.js",
            "line": 9,
            "description": "Retrieve the actual display of a element",
            "params": [
                {
                    "name": "name",
                    "description": "nodeName of the element",
                    "type": "String"
                },
                {
                    "name": "doc",
                    "description": "Document object",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/css/defaultDisplay.js",
            "line": 33,
            "description": "Try to determine the default display value of an element",
            "params": [
                {
                    "name": "nodeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/data/accepts.js",
            "line": 5,
            "description": "Determines whether an object can have data",
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 297,
            "description": "Create key-value caches of limited size",
            "return": {
                "description": "Returns the Object data after storing it on itself with\n\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n\tdeleting the oldest entry",
                "type": "Function(string, Object)"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 317,
            "description": "Mark a function for special use by Sizzle",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to mark",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 326,
            "description": "Support testing using an element",
            "params": [
                {
                    "name": "fn",
                    "description": "Passed the created div and expects a boolean result",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 347,
            "description": "Adds the same handler for all of the specified attrs",
            "params": [
                {
                    "name": "attrs",
                    "description": "Pipe-separated list of attributes",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The method that will be applied",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 361,
            "description": "Checks document order of two siblings",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "Returns less than 0 if a precedes b, greater than 0 if a follows b",
                "type": "Number"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 390,
            "description": "Returns a function to use in pseudos for input types",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 401,
            "description": "Returns a function to use in pseudos for buttons",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 412,
            "description": "Returns a function to use in pseudos for positionals",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 434,
            "description": "Checks a node for validity as a Sizzle context",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Element|Object="
                }
            ],
            "return": {
                "description": "The input node if acceptable, otherwise a falsy value",
                "type": "Element|Object|Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 446,
            "description": "Detects XML nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "An element or a document",
                    "type": "Element|Object"
                }
            ],
            "return": {
                "description": "True iff elem is a non-HTML XML node",
                "type": "Boolean"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 458,
            "description": "Sets document-related variables once based on the current document",
            "params": [
                {
                    "name": "doc",
                    "description": "An element or document object to use to set the document",
                    "type": "Element|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current document",
                "type": "Object"
            },
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 891,
            "description": "Document sorting and removing duplicates",
            "params": [
                {
                    "name": "results",
                    "description": "",
                    "type": "ArrayLike"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 924,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/sizzle/dist/sizzle.js",
            "line": 1891,
            "description": "A low-level selection function that works with Sizzle's compiled\n selector functions",
            "params": [
                {
                    "name": "selector",
                    "description": "A selector or a pre-compiled\n selector function built with Sizzle.compile",
                    "type": "String|Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "results",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "seed",
                    "description": "A set of elements to match against",
                    "type": "Array",
                    "optional": true
                }
            ],
            "class": "",
            "module": "ng"
        },
        {
            "file": "public/libs/jquery/src/offset.js",
            "line": 17,
            "description": "Gets a window from an element",
            "class": "",
            "module": "ng"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: license",
            "line": " public/libs/angular/angular.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:169"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:169"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:184"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:184"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:184"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:184"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:197"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:197"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:197"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:279"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:279"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:279"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:279"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:354"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:363"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:408"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:408"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:408"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:408"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:445"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:445"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:445"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:465"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:465"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:465"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:487"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:487"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:487"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:487"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:502"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:502"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:502"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:502"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:517"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:517"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:517"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:517"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:533"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:533"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:533"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:533"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:548"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:548"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:548"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:548"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:563"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:563"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:563"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:563"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:580"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:580"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:580"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:580"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:601"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:601"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:601"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:601"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:616"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:628"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:675"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:675"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:675"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:675"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:693"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:727"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:786"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:786"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:786"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:786"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:932"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:932"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:932"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:932"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1019"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1019"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:1019"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:1019"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1075"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1075"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:1075"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:1075"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1095"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1095"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:1095"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:1095"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:1126"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:1153"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:1170"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1252"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1252"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:1252"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1342"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1342"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:1342"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:1501"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:1528"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1552"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1552"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1579"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1579"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:1579"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1662"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1662"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:1662"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1673"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1673"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:1673"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1683"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1683"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1695"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1695"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1706"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1706"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1717"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1717"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1728"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1728"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1740"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1740"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1774"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1774"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1785"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1785"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1797"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1797"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1810"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1810"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1823"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1823"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:1845"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:1941"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:1941"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:2096"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:2096"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:2096"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:2096"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:3072"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:3118"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3137"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3137"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:3137"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:3137"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3190"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3190"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3235"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3235"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:3235"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3287"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3287"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3298"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3298"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:3298"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3313"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3313"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:3313"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3324"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3324"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:3324"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3338"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3338"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:3338"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3421"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3421"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3461"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3461"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:3461"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3557"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3557"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:3557"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3591"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3591"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:3591"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3632"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3632"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:3632"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3665"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3665"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:3665"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3693"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3693"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:3934"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:3934"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:3934"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4037"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4037"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4056"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4056"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4095"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4095"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4122"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4122"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4141"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4141"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:4141"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4168"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4168"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:4168"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4184"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4184"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:4184"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4208"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4208"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:4208"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4231"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4231"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:4231"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4254"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4254"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:4254"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4291"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4377"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:4377"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4417"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4483"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4529"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:4529"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4550"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:4550"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4619"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:4619"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4645"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:4645"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4674"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4674"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:4674"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4771"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4771"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4812"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4812"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:4812"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:4812"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4848"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4848"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:4848"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:4848"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4872"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4872"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:4872"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4900"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4900"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:4900"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4916"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4916"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:4916"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4933"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4933"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:4933"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:4933"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:4986"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:4986"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:4986"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:5004"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:5004"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:5004"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:5023"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:5023"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:5089"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:5089"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:5089"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:5089"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:5567"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:5567"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:5567"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:5586"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:5586"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:5586"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:5586"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:5639"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:5639"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:5639"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:5639"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:5669"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:5669"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:5669"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:5669"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:5713"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:5713"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:5713"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:5730"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:5730"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:5730"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:5747"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:5747"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:5747"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:5835"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:5835"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:5835"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:5835"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:5937"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:6150"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:6183"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:6198"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:6666"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:7056"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:7056"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:7070"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:7070"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:7070"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:7078"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:7078"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:7078"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:7130"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:7130"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:7145"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:7145"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:7165"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:7165"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:7218"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:7218"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:7248"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:7248"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:7288"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:7317"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:7344"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:7458"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:7458"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:7458"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:7458"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8075"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8075"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8075"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8087"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8087"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8087"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8099"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8099"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8099"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8111"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8111"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8111"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8125"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8125"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8125"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8138"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8138"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8138"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8152"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8152"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8339"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8339"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8533"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8533"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:8533"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8573"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8573"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8573"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8591"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8591"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8591"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8614"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8614"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:8614"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8614"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8746"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8746"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8746"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8762"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8762"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8762"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8787"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8787"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8787"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8941"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8941"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:8941"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:8965"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:8965"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:9042"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:9086"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9331"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9331"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9345"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9345"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9372"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9372"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9385"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9385"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9398"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9398"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9411"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9411"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9432"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9432"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9501"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9501"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9517"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9517"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9551"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9551"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9577"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9577"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9587"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9587"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:9587"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9603"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9603"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:9603"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9619"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9619"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " public/libs/angular/angular.js:9619"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9634"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9634"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " public/libs/angular/angular.js:9634"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9789"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9789"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9825"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9825"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9835"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9835"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:9835"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9853"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9853"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9862"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9862"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9871"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9871"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9880"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9880"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:9889"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:9889"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11012"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11012"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:11012"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:11012"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11053"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11053"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:11053"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11072"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11072"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:11072"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11126"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11126"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:11126"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11195"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11195"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:11373"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11383"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11383"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:11383"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:11383"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11540"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11540"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:11540"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:11540"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11600"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11600"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:11600"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:11600"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11672"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11672"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:11672"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:11672"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11777"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11777"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11785"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11785"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11807"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11807"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11833"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11833"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:11833"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11887"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11887"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:11887"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11897"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11897"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:11897"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:11897"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:11959"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:11959"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:11959"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:11959"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:12119"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:12119"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:12119"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:12119"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:12295"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:12295"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:12295"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:12454"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:12454"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " public/libs/angular/angular.js:12454"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:12466"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:12466"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:12466"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:12527"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:12527"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:12527"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:12527"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:12559"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:12559"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:12559"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:12606"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:12606"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:12606"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:12606"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:12668"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:12668"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:12668"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:12668"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:12717"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:12717"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:12717"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:12785"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:12785"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:12785"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:12906"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:12931"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13033"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13033"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:13033"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13060"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13060"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13105"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13105"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:13105"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13134"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13134"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:13134"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13237"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13237"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13237"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13274"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13274"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13274"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13300"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13300"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13300"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13347"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13347"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13361"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13361"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:13361"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13632"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13632"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:13632"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13710"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13710"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:13710"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13733"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13733"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13733"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13763"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13763"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13763"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13782"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13782"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13782"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13797"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13797"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13797"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13812"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13812"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13812"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13827"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13827"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13827"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13842"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13842"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13842"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13860"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13860"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13860"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13872"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13872"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13872"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13884"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13884"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13884"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13896"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13896"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13896"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13908"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13908"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13908"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13920"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13920"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13920"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13937"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13937"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13937"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13954"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13954"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13954"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13971"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13971"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13971"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:13988"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:13988"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:13988"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:14027"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:14125"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:14125"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:14125"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:14177"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:14177"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:14177"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:14213"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:14213"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:14292"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:14305"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:14305"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:14349"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:14349"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:14398"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:14398"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:14409"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:14409"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:14409"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:14444"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:14444"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:14444"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:14496"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:14496"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:14496"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:14715"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:14715"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:14715"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:14715"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:14772"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:14772"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:14772"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:14772"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:14984"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:14984"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:14984"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:14984"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15141"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15141"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:15141"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:15141"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15176"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15176"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:15176"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15187"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15187"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:15187"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15197"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15197"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:15197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:15197"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15310"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15310"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular/angular.js:15310"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:15310"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15485"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15485"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:15485"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15533"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15533"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:15533"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:15533"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:15533"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15633"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15633"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:15633"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:15633"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:15633"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15659"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15659"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:15659"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:15659"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:15659"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15685"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15685"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:15685"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:15685"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:15685"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15729"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15729"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:15729"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:15729"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:15729"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15764"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15764"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:15764"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:15764"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:15764"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15799"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15799"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:15799"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:15799"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:15799"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15837"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15837"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:15837"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:15837"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:15837"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:15938"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:15938"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:16003"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:16003"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:16023"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:16023"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:16043"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:16043"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:16090"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:16090"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:16108"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:16108"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:16134"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:16134"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:16134"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:16153"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:16153"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:16153"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:16368"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:16368"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:16446"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:16446"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:16523"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:16523"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:16599"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:16599"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:16674"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:16674"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:16725"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:16725"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:17078"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:17078"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:17078"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:17107"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:17107"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:17107"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:17235"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:17235"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:17395"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:17395"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:17405"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:17405"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular/angular.js:17405"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:17442"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:17442"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:17485"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:17485"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:17502"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:17502"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:17580"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:17580"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:17580"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:17702"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:17702"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:17702"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:17798"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:17798"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:17798"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:17893"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:17893"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:17893"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:17963"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:17963"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:17963"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:17963"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18029"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18029"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18029"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18091"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18091"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18091"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18266"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18266"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:18266"
        },
        {
            "message": "unknown tag: animations",
            "line": " public/libs/angular/angular.js:18266"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18266"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18412"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18412"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:18412"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18412"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18460"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18460"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:18460"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18460"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18508"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18508"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:18508"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18508"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18571"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18571"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18571"
        },
        {
            "message": "unknown tag: scope",
            "line": " public/libs/angular/angular.js:18571"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18792"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18792"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18792"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18834"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18834"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18834"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:18834"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18892"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18892"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18892"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:18892"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18916"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18916"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18916"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:18916"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18940"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18940"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18940"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:18940"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18963"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18963"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18963"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:18963"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:18987"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:18987"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:18987"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:18987"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19011"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19011"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19011"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19011"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19035"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19035"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19035"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19035"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19059"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19059"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19059"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19059"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19081"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19081"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19081"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19081"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19108"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19108"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19108"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19130"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19130"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19130"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19130"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19185"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19185"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19185"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19185"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19201"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19201"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19201"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19201"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19217"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19217"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19217"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19217"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19238"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19238"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19238"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19238"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19259"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19259"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19259"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19259"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19280"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19280"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:19280"
        },
        {
            "message": "unknown tag: animations",
            "line": " public/libs/angular/angular.js:19280"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19280"
        },
        {
            "message": "unknown tag: scope",
            "line": " public/libs/angular/angular.js:19280"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19280"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19403"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19403"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:19403"
        },
        {
            "message": "unknown tag: animations",
            "line": " public/libs/angular/angular.js:19403"
        },
        {
            "message": "unknown tag: scope",
            "line": " public/libs/angular/angular.js:19403"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19403"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19546"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19546"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " public/libs/angular/angular.js:19546"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19555"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19555"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " public/libs/angular/angular.js:19555"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19661"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19661"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:19661"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19661"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19661"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19727"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19727"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:19727"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19727"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19727"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19761"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19761"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:19761"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:19976"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:19976"
        },
        {
            "message": "unknown tag: animations",
            "line": " public/libs/angular/angular.js:19976"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:19976"
        },
        {
            "message": "unknown tag: scope",
            "line": " public/libs/angular/angular.js:19976"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:19976"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:20371"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:20371"
        },
        {
            "message": "unknown tag: animations",
            "line": " public/libs/angular/angular.js:20371"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:20371"
        },
        {
            "message": "unknown tag: import",
            "line": " public/libs/angular/angular.js:20371"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:20528"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:20528"
        },
        {
            "message": "unknown tag: animations",
            "line": " public/libs/angular/angular.js:20528"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:20528"
        },
        {
            "message": "unknown tag: import",
            "line": " public/libs/angular/angular.js:20528"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:20683"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:20683"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:20683"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:20683"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:20738"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:20738"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:20738"
        },
        {
            "message": "unknown tag: animations",
            "line": " public/libs/angular/angular.js:20738"
        },
        {
            "message": "unknown tag: usage",
            "line": " public/libs/angular/angular.js:20738"
        },
        {
            "message": "unknown tag: scope",
            "line": " public/libs/angular/angular.js:20738"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular/angular.js:20738"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:20938"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:20938"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:20938"
        },
        {
            "message": "unknown tag: element",
            "line": " public/libs/angular/angular.js:20938"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:21010"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:21010"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:21010"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular/angular.js:21060"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular/angular.js:21060"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular/angular.js:21060"
        },
        {
            "message": "unknown tag: license",
            "line": " public/libs/angular-route/angular-route.js:1"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular-route/angular-route.js:8"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular-route/angular-route.js:8"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular-route/angular-route.js:27"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular-route/angular-route.js:27"
        },
        {
            "message": "unknown tag: kind",
            "line": " public/libs/angular-route/angular-route.js:27"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular-route/angular-route.js:49"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular-route/angular-route.js:49"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular-route/angular-route.js:49"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular-route/angular-route.js:211"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular-route/angular-route.js:211"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular-route/angular-route.js:211"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular-route/angular-route.js:238"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular-route/angular-route.js:238"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular-route/angular-route.js:372"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular-route/angular-route.js:372"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " public/libs/angular-route/angular-route.js:372"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular-route/angular-route.js:388"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular-route/angular-route.js:388"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " public/libs/angular-route/angular-route.js:388"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular-route/angular-route.js:403"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular-route/angular-route.js:403"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " public/libs/angular-route/angular-route.js:403"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular-route/angular-route.js:416"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular-route/angular-route.js:416"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " public/libs/angular-route/angular-route.js:416"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular-route/angular-route.js:430"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular-route/angular-route.js:430"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular-route/angular-route.js:563"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/angular-route/angular-route.js:581"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular-route/angular-route.js:605"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular-route/angular-route.js:605"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular-route/angular-route.js:646"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular-route/angular-route.js:646"
        },
        {
            "message": "unknown tag: restrict",
            "line": " public/libs/angular-route/angular-route.js:646"
        },
        {
            "message": "unknown tag: animations",
            "line": " public/libs/angular-route/angular-route.js:646"
        },
        {
            "message": "unknown tag: scope",
            "line": " public/libs/angular-route/angular-route.js:646"
        },
        {
            "message": "unknown tag: priority",
            "line": " public/libs/angular-route/angular-route.js:646"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " public/libs/angular-route/angular-route.js:815"
        },
        {
            "message": "unknown tag: name",
            "line": " public/libs/angular-route/angular-route.js:815"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " public/libs/angular-route/angular-route.js:815"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/jquery/dist/jquery.js:846"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/jquery/dist/jquery.js:910"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/jquery/dist/jquery.js:983"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/jquery/dist/jquery.js:995"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/jquery/dist/jquery.js:1007"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:297"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:361"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:434"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:446"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:458"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:1"
        },
        {
            "message": "Missing item type\nThis object provides a utility for producing rich Error messages within\nAngular. It can be called as follows:\n\nvar exampleMinErr = minErr('example');\nthrow exampleMinErr('one', 'This {0} is {1}', foo, bar);\n\nThe above creates an instance of minErr in the example namespace. The\nresulting error will have a namespaced error code of example.one.  The\nresulting error will replace {0} with the value of foo, and {1} with the\nvalue of bar. The object is not restricted in the number of arguments it can\ntake.\n\nIf fewer arguments are specified than necessary for interpolation, the extra\ninterpolation markers will be preserved in the final string.\n\nSince data will be parsed statically during a build step, some restrictions\nare applied with respect to how minErr instances are created and called.\nInstances should have names of the form namespaceMinErr for a minErr created\nusing minErr('namespace') . Error codes, namespaces and template strings\nshould all be static strings, not variables or general expressions.",
            "line": " public/libs/angular/angular.js:8"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:242"
        },
        {
            "message": "Missing item type\nIE 11 changed the format of the UserAgent string.\nSee http://msdn.microsoft.com/en-us/library/ms537503.aspx",
            "line": " public/libs/angular/angular.js:248"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:258"
        },
        {
            "message": "Missing item type\nwhen using forEach the params are value, key, but it is often useful to have key, value.",
            "line": " public/libs/angular/angular.js:354"
        },
        {
            "message": "Missing item type\nA consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric\ncharacters such as '012ABC'. The reason why we are not using simply a number counter is that\nthe number string gets longer over time, and it can also overflow, where as the nextId\nwill grow much slower, it is a string, and it will never overflow.",
            "line": " public/libs/angular/angular.js:363"
        },
        {
            "message": "Missing item type\nSet or clear the hashkey for an object.",
            "line": " public/libs/angular/angular.js:394"
        },
        {
            "message": "Missing item type\nDetermines if a value is a regular expression object.",
            "line": " public/libs/angular/angular.js:616"
        },
        {
            "message": "Missing item type\nChecks if `obj` is a window object.",
            "line": " public/libs/angular/angular.js:628"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:693"
        },
        {
            "message": "Missing item type\nDetermines the number of elements in an array, the number of properties an object has, or\nthe length of a string.\n\nNote: This function is used to augment the Object type in Angular expressions. See\n{@link angular.Object} for more information about Angular arrays.",
            "line": " public/libs/angular/angular.js:727"
        },
        {
            "message": "Missing item type\nCreates a shallow copy of an object, an array or a primitive",
            "line": " public/libs/angular/angular.js:908"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:1126"
        },
        {
            "message": "Missing item type\nTries to decode the URI component without throwing an exception.",
            "line": " public/libs/angular/angular.js:1153"
        },
        {
            "message": "Missing item type\nParses an escaped url query string into key-value pairs.",
            "line": " public/libs/angular/angular.js:1170"
        },
        {
            "message": "Missing item type\nWe need our custom method because encodeURIComponent is too aggressive and doesn't follow\nhttp://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\nsegments:\n   segment       = *pchar\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "line": " public/libs/angular/angular.js:1212"
        },
        {
            "message": "Missing item type\nThis method is intended for encoding *key* or *value* parts of query component. We need a custom\nmethod because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\nencoded per http://tools.ietf.org/html/rfc3986:\n   query       = *( pchar / \"/\" / \"?\" )\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "line": " public/libs/angular/angular.js:1231"
        },
        {
            "message": "Missing item type\nthrow error if the argument is falsy.",
            "line": " public/libs/angular/angular.js:1470"
        },
        {
            "message": "Missing item type\nthrow error if the name given is hasOwnProperty",
            "line": " public/libs/angular/angular.js:1490"
        },
        {
            "message": "Missing item type\nReturn the value accessible from the object by path. Any undefined traversals are ignored",
            "line": " public/libs/angular/angular.js:1501"
        },
        {
            "message": "Missing item type\nReturn the DOM siblings between the first and last node in the given array.",
            "line": " public/libs/angular/angular.js:1528"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:1576"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:1648"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:1651"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:1656"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:1845"
        },
        {
            "message": "Missing item type\nConverts snake_case to camelCase.\nAlso there is special case for Moz prefix starting with upper case letter.",
            "line": " public/libs/angular/angular.js:2207"
        },
        {
            "message": "Missing item type\nProperties: writes return selection, reads return first value",
            "line": " public/libs/angular/angular.js:2731"
        },
        {
            "message": "Missing item type\nchaining functions",
            "line": " public/libs/angular/angular.js:3048"
        },
        {
            "message": "Missing item type\nComputes a hash of an 'obj'.\nHash of a:\n string is string\n number is number as string\n object is either result of calling $$hashKey function on the object or uniquely generated id,\n        that is also assigned to the $$hashKey property of the object.",
            "line": " public/libs/angular/angular.js:3072"
        },
        {
            "message": "Missing item type\nHashMap which can use objects as keys",
            "line": " public/libs/angular/angular.js:3102"
        },
        {
            "message": "Missing item type\nStore key value pair",
            "line": " public/libs/angular/angular.js:3109"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:3118"
        },
        {
            "message": "Missing item type\nRemove the key/value pair",
            "line": " public/libs/angular/angular.js:3126"
        },
        {
            "message": "Missing item type\nImplicit module which gets automatically added to each {@link auto.$injector $injector}.",
            "line": " public/libs/angular/angular.js:3190"
        },
        {
            "message": "Missing item type\n`$injector` is used to retrieve object instances as defined by\n{@link auto.$provide provider}, instantiate types, invoke methods,\nand load modules.\n\nThe following always holds true:\n\n```js\n  var $injector = angular.injector();\n  expect($injector.get('$injector')).toBe($injector);\n  expect($injector.invoke(function($injector){\n    return $injector;\n  }).toBe($injector);\n```\n\n# Injection Function Annotation\n\nJavaScript does not have annotations, and annotations are needed for dependency injection. The\nfollowing are all valid ways of annotating function with injection arguments and are equivalent.\n\n```js\n  // inferred (only works if code not minified/obfuscated)\n  $injector.invoke(function(serviceA){});\n\n  // annotated\n  function explicit(serviceA) {};\n  explicit.$inject = ['serviceA'];\n  $injector.invoke(explicit);\n\n  // inline\n  $injector.invoke(['serviceA', function(serviceA){}]);\n```\n\n## Inference\n\nIn JavaScript calling `toString()` on a function returns the function definition. The definition\ncan then be parsed and the function arguments can be extracted. *NOTE:* This does not work with\nminification, and obfuscation tools since these tools change the argument names.\n\n## `$inject` Annotation\nBy adding an `$inject` property onto a function the injection parameters can be specified.\n\n## Inline\nAs an array of injection names, where the last item in the array is the function to call.",
            "line": " public/libs/angular/angular.js:3235"
        },
        {
            "message": "Missing item type\nReturn an instance of the service.",
            "line": " public/libs/angular/angular.js:3287"
        },
        {
            "message": "Missing item type\nInvoke the method and supply the method arguments from the `$injector`.",
            "line": " public/libs/angular/angular.js:3298"
        },
        {
            "message": "Missing item type\nAllows the user to query if the particular service exists.",
            "line": " public/libs/angular/angular.js:3313"
        },
        {
            "message": "Missing item type\nCreate a new instance of JS type. The method takes a constructor function, invokes the new\noperator, and supplies all of the arguments to the constructor function as specified by the\nconstructor annotation.",
            "line": " public/libs/angular/angular.js:3324"
        },
        {
            "message": "Missing item type\nReturns an array of service names which the function is requesting for injection. This API is\nused by the injector to determine which services need to be injected into the function when the\nfunction is invoked. There are three ways in which the function can be annotated with the needed\ndependencies.\n\n# Argument names\n\nThe simplest form is to extract the dependencies from the arguments of the function. This is done\nby converting the function into a string using `toString()` method and extracting the argument\nnames.\n```js\n  // Given\n  function MyController($scope, $route) {\n    // ...\n  }\n\n  // Then\n  expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n```\n\nThis method does not work with code minification / obfuscation. For this reason the following\nannotation strategies are supported.\n\n# The `$inject` property\n\nIf a function has an `$inject` property and its value is an array of strings, then the strings\nrepresent names of services to be injected into the function.\n```js\n  // Given\n  var MyController = function(obfuscatedScope, obfuscatedRoute) {\n    // ...\n  }\n  // Define function dependencies\n  MyController['$inject'] = ['$scope', '$route'];\n\n  // Then\n  expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n```\n\n# The array notation\n\nIt is often desirable to inline Injected functions and that's when setting the `$inject` property\nis very inconvenient. In these situations using the array notation to specify the dependencies in\na way that survives minification is a better choice:\n\n```js\n  // We wish to write this (not minification / obfuscation safe)\n  injector.invoke(function($compile, $rootScope) {\n    // ...\n  });\n\n  // We are forced to write break inlining\n  var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {\n    // ...\n  };\n  tmpFn.$inject = ['$compile', '$rootScope'];\n  injector.invoke(tmpFn);\n\n  // To better support inline function the inline annotation is supported\n  injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {\n    // ...\n  }]);\n\n  // Therefore\n  expect(injector.annotate(\n     ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])\n   ).toEqual(['$compile', '$rootScope']);\n```",
            "line": " public/libs/angular/angular.js:3338"
        },
        {
            "message": "Missing item type\nThe {@link auto.$provide $provide} service has a number of methods for registering components\nwith the {@link auto.$injector $injector}. Many of these functions are also exposed on\n{@link angular.Module}.\n\nAn Angular **service** is a singleton object created by a **service factory**.  These **service\nfactories** are functions which, in turn, are created by a **service provider**.\nThe **service providers** are constructor functions. When instantiated they must contain a\nproperty called `$get`, which holds the **service factory** function.\n\nWhen you request a service, the {@link auto.$injector $injector} is responsible for finding the\ncorrect **service provider**, instantiating it and then calling its `$get` **service factory**\nfunction to get the instance of the **service**.\n\nOften services have no configuration options and there is no need to add methods to the service\nprovider.  The provider will be no more than a constructor function with a `$get` property. For\nthese cases the {@link auto.$provide $provide} service has additional helper methods to register\nservices without specifying a provider.\n\n* {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the\n    {@link auto.$injector $injector}\n* {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by\n    providers and services.\n* {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by\n    services, not providers.\n* {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,\n    that will be wrapped in a **service provider** object, whose `$get` property will contain the\n    given factory function.\n* {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`\n    that will be wrapped in a **service provider** object, whose `$get` property will instantiate\n     a new object using the given constructor function.\n\nSee the individual methods for more information and examples.",
            "line": " public/libs/angular/angular.js:3421"
        },
        {
            "message": "Missing item type\nRegister a **provider function** with the {@link auto.$injector $injector}. Provider functions\nare constructor functions, whose instances are responsible for \"providing\" a factory for a\nservice.\n\nService provider names start with the name of the service they provide followed by `Provider`.\nFor example, the {@link ng.$log $log} service has a provider called\n{@link ng.$logProvider $logProvider}.\n\nService provider objects can have additional methods which allow configuration of the provider\nand its service. Importantly, you can configure what kind of service is created by the `$get`\nmethod, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a\nmethod {@link ng.$logProvider#debugEnabled debugEnabled}\nwhich lets you specify whether the {@link ng.$log $log} service will log debug messages to the\nconsole or not.",
            "line": " public/libs/angular/angular.js:3461"
        },
        {
            "message": "Missing item type\nRegister a **service factory**, which will be called to return the service instance.\nThis is short for registering a service where its provider consists of only a `$get` property,\nwhich is the given service factory function.\nYou should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to\nconfigure your service in a provider.",
            "line": " public/libs/angular/angular.js:3557"
        },
        {
            "message": "Missing item type\nRegister a **service constructor**, which will be invoked with `new` to create the service\ninstance.\nThis is short for registering a service where its provider's `$get` property is the service\nconstructor function that will be used to instantiate the service instance.\n\nYou should use {@link auto.$provide#service $provide.service(class)} if you define your service\nas a type/class.",
            "line": " public/libs/angular/angular.js:3591"
        },
        {
            "message": "Missing item type\nRegister a **value service** with the {@link auto.$injector $injector}, such as a string, a\nnumber, an array, an object or a function.  This is short for registering a service where its\nprovider's `$get` property is a factory function that takes no arguments and returns the **value\nservice**.\n\nValue services are similar to constant services, except that they cannot be injected into a\nmodule configuration function (see {@link angular.Module#config}) but they can be overridden by\nan Angular\n{@link auto.$provide#decorator decorator}.",
            "line": " public/libs/angular/angular.js:3632"
        },
        {
            "message": "Missing item type\nRegister a **constant service**, such as a string, a number, an array, an object or a function,\nwith the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be\ninjected into a module configuration function (see {@link angular.Module#config}) and it cannot\nbe overridden by an Angular {@link auto.$provide#decorator decorator}.",
            "line": " public/libs/angular/angular.js:3665"
        },
        {
            "message": "Missing item type\nRegister a **service decorator** with the {@link auto.$injector $injector}. A service decorator\nintercepts the creation of a service, allowing it to override or modify the behaviour of the\nservice. The object returned by the decorator may be the original service, or a new service\nobject which replaces or wraps and delegates to the original service.",
            "line": " public/libs/angular/angular.js:3693"
        },
        {
            "message": "Missing item type\nWhen called, it checks current value of `$location.hash()` and scrolls to the related element,\naccording to rules specified in\n[Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).\n\nIt also watches the `$location.hash()` and scrolls whenever it changes to match any anchor.\nThis can be disabled by calling `$anchorScrollProvider.disableAutoScrolling()`.",
            "line": " public/libs/angular/angular.js:3934"
        },
        {
            "message": "Missing item type\nDefault implementation of $animate that doesn't perform any animations, instead just\nsynchronously performs DOM\nupdates and calls done() callbacks.\n\nIn order to enable animations the ngAnimate module has to be loaded.\n\nTo see the functional implementation check out src/ngAnimate/animate.js",
            "line": " public/libs/angular/angular.js:4037"
        },
        {
            "message": "Missing item type\nRegisters a new injectable animation factory function. The factory function produces the\nanimation object which contains callback functions for each event that is expected to be\nanimated.\n\n  * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`\n  must be called once the element animation is complete. If a function is returned then the\n  animation service will use this function to cancel the animation whenever a cancel event is\n  triggered.\n\n\n```js\n  return {\n    eventFn : function(element, done) {\n      //code to run the animation\n      //once complete, then run done()\n      return function cancellationFunction() {\n        //code to cancel the animation\n      }\n    }\n  }\n```",
            "line": " public/libs/angular/angular.js:4056"
        },
        {
            "message": "Missing item type\nSets and/or returns the CSS class regular expression that is checked when performing\nan animation. Upon bootstrap the classNameFilter value is not set at all and will\ntherefore enable $animate to attempt to perform an animation on any element.\nWhen setting the classNameFilter value, animations will only be performed on elements\nthat successfully match the filter expression. This in turn can boost performance\nfor low-powered devices as well as applications containing a lot of structural operations.",
            "line": " public/libs/angular/angular.js:4095"
        },
        {
            "message": "Missing item type\nThe $animate service provides rudimentary DOM manipulation functions to\n insert, remove and move elements within the DOM, as well as adding and removing classes.\n This service is the core service used by the ngAnimate $animator service which provides\n high-level animation hooks for CSS and JavaScript.\n$animate is available in the AngularJS core, however, the ngAnimate module must be included\n to enable full out animation support. Otherwise, $animate will only perform simple DOM\n manipulation operations.\nTo learn more about enabling animation support, click here to visit the {@link ngAnimate\n ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service\n page}.",
            "line": " public/libs/angular/angular.js:4122"
        },
        {
            "message": "Missing item type\nInserts the element into the DOM either after the `after` element or within\n   the `parent` element. Once complete, the done() callback will be fired (if provided).",
            "line": " public/libs/angular/angular.js:4141"
        },
        {
            "message": "Missing item type\nRemoves the element from the DOM. Once complete, the done() callback will be\n   fired (if provided).",
            "line": " public/libs/angular/angular.js:4168"
        },
        {
            "message": "Missing item type\nMoves the position of the provided element within the DOM to be placed\n either after the `after` element or inside of the `parent` element. Once complete, the\n done() callback will be fired (if provided).",
            "line": " public/libs/angular/angular.js:4184"
        },
        {
            "message": "Missing item type\nAdds the provided className CSS class value to the provided element. Once\n complete, the done() callback will be fired (if provided).",
            "line": " public/libs/angular/angular.js:4208"
        },
        {
            "message": "Missing item type\nRemoves the provided className CSS class value from the provided element.\n Once complete, the done() callback will be fired (if provided).",
            "line": " public/libs/angular/angular.js:4231"
        },
        {
            "message": "Missing item type\nAdds and/or removes the given CSS classes to and from the element.\n Once complete, the done() callback will be fired (if provided).",
            "line": " public/libs/angular/angular.js:4254"
        },
        {
            "message": "Missing item type\nThis object has two goals:\n\n- hide all the global state in the browser caused by the window object\n- abstract away all the browser specific features and inconsistencies\n\nFor tests we provide {@link ngMock.$browser mock implementation} of the `$browser`\nservice, which can be used for convenient testing of the application without the interaction with\nthe real browser apis.",
            "line": " public/libs/angular/angular.js:4291"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:4306"
        },
        {
            "message": "Missing item type\nExecutes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`\ncounter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.",
            "line": " public/libs/angular/angular.js:4331"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:4352"
        },
        {
            "message": "Missing item type\nAdds a function to the list of functions that poller periodically executes,\nand starts polling if not started yet.",
            "line": " public/libs/angular/angular.js:4377"
        },
        {
            "message": "Missing item type\nConfigures the poller to run in the specified intervals, using the specified\nsetTimeout fn and kicks it off.",
            "line": " public/libs/angular/angular.js:4394"
        },
        {
            "message": "Missing item type\nGETTER:\nWithout any argument, this method just returns current value of location.href.\n\nSETTER:\nWith at least one argument, this method sets url to new value.\nIf html5 history api supported, pushState/replaceState is used, otherwise\nlocation.href/location.replace is used.\nReturns its own instance to allow chaining\n\nNOTE: this api is intended for use only by the $location service. Please use the\n{@link ng.$location $location service} to change url.",
            "line": " public/libs/angular/angular.js:4417"
        },
        {
            "message": "Missing item type\nRegister callback function that will be called, when url changes.\n\nIt's only called when the url is changed from outside of angular:\n- user types different url into address bar\n- user clicks on history (forward/back) button\n- user clicks on a link\n\nIt's not called when url is changed by $browser.url() method\n\nThe listener gets called with new url as parameter.\n\nNOTE: this api is intended for use only by the $location service. Please use the\n{@link ng.$location $location service} to monitor url changes in angular apps.",
            "line": " public/libs/angular/angular.js:4483"
        },
        {
            "message": "Missing item type\nReturns current <base href>\n(always relative - without domain)",
            "line": " public/libs/angular/angular.js:4529"
        },
        {
            "message": "Missing item type\nThe cookies method provides a 'private' low level access to browser cookies.\nIt is not meant to be used directly, use the $cookie service instead.\n\nThe return values vary depending on the arguments that the method was called with as follows:\n\n- cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify\n  it\n- cookies(name, value) -> set name to value, if value is undefined delete the cookie\n- cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that\n  way)",
            "line": " public/libs/angular/angular.js:4550"
        },
        {
            "message": "Missing item type\nExecutes a fn asynchronously via `setTimeout(fn, delay)`.\n\nUnlike when calling `setTimeout` directly, in test this function is mocked and instead of using\n`setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed\nvia `$browser.defer.flush()`.",
            "line": " public/libs/angular/angular.js:4619"
        },
        {
            "message": "Missing item type\nCancels a deferred task identified with `deferId`.",
            "line": " public/libs/angular/angular.js:4645"
        },
        {
            "message": "Missing item type\nFactory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to\nthem.\n\n```js\n\n var cache = $cacheFactory('cacheId');\n expect($cacheFactory.get('cacheId')).toBe(cache);\n expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();\n\n cache.put(\"key\", \"value\");\n cache.put(\"another key\", \"another value\");\n\n // We've specified no options on creation\n expect(cache.info()).toEqual({id: 'cacheId', size: 2});\n\n```",
            "line": " public/libs/angular/angular.js:4674"
        },
        {
            "message": "Missing item type\nA cache object used to store and retrieve data, primarily used by\n{@link $http $http} and the {@link ng.directive:script script} directive to cache\ntemplates and other data.\n\n```js\n angular.module('superCache')\n   .factory('superCache', ['$cacheFactory', function($cacheFactory) {\n     return $cacheFactory('super-cache');\n   }]);\n```\n\nExample test:\n\n```js\n it('should behave like a cache', inject(function(superCache) {\n   superCache.put('key', 'value');\n   superCache.put('another key', 'another value');\n\n   expect(superCache.info()).toEqual({\n     id: 'super-cache',\n     size: 2\n   });\n\n   superCache.remove('another key');\n   expect(superCache.get('another key')).toBeUndefined();\n\n   superCache.removeAll();\n   expect(superCache.info()).toEqual({\n     id: 'super-cache',\n     size: 0\n   });\n }));\n```",
            "line": " public/libs/angular/angular.js:4771"
        },
        {
            "message": "Missing item type\nInserts a named entry into the {@link $cacheFactory.Cache Cache} object to be\nretrieved later, and incrementing the size of the cache if the key was not already\npresent in the cache. If behaving like an LRU cache, it will also remove stale\nentries from the set.\n\nIt will not insert undefined values into the cache.",
            "line": " public/libs/angular/angular.js:4812"
        },
        {
            "message": "Missing item type\nRetrieves named data stored in the {@link $cacheFactory.Cache Cache} object.",
            "line": " public/libs/angular/angular.js:4848"
        },
        {
            "message": "Missing item type\nRemoves an entry from the {@link $cacheFactory.Cache Cache} object.",
            "line": " public/libs/angular/angular.js:4872"
        },
        {
            "message": "Missing item type\nClears the cache object of any entries.",
            "line": " public/libs/angular/angular.js:4900"
        },
        {
            "message": "Missing item type\nDestroys the {@link $cacheFactory.Cache Cache} object entirely,\nremoving it from the {@link $cacheFactory $cacheFactory} set.",
            "line": " public/libs/angular/angular.js:4916"
        },
        {
            "message": "Missing item type\nRetrieve information regarding a particular {@link $cacheFactory.Cache Cache}.",
            "line": " public/libs/angular/angular.js:4933"
        },
        {
            "message": "Missing item type\nmakes the `entry` the freshEnd of the LRU linked list",
            "line": " public/libs/angular/angular.js:4955"
        },
        {
            "message": "Missing item type\nbidirectionally links two entries of the LRU linked list",
            "line": " public/libs/angular/angular.js:4974"
        },
        {
            "message": "Missing item type\nGet information about all the caches that have been created",
            "line": " public/libs/angular/angular.js:4986"
        },
        {
            "message": "Missing item type\nGet access to a cache object by the `cacheId` used when it was created.",
            "line": " public/libs/angular/angular.js:5004"
        },
        {
            "message": "Missing item type\nThe first time a template is used, it is loaded in the template cache for quick retrieval. You\ncan load templates directly into the cache in a `script` tag, or by consuming the\n`$templateCache` service directly.\n\nAdding via the `script` tag:\n\n```html\n  <script type=\"text/ng-template\" id=\"templateId.html\">\n    <p>This is the content of the template</p>\n  </script>\n```\n\n**Note:** the `script` tag containing the template does not need to be included in the `head` of\nthe document, but it must be below the `ng-app` definition.\n\nAdding via the $templateCache service:\n\n```js\nvar myApp = angular.module('myApp', []);\nmyApp.run(function($templateCache) {\n  $templateCache.put('templateId.html', 'This is the content of the template');\n});\n```\n\nTo retrieve the template later, simply use it in your HTML:\n```html\n<div ng-include=\" 'templateId.html' \"></div>\n```\n\nor get it via Javascript:\n```js\n$templateCache.get('templateId.html')\n```\n\nSee {@link ng.$cacheFactory $cacheFactory}.",
            "line": " public/libs/angular/angular.js:5023"
        },
        {
            "message": "Missing item type\nCompiles an HTML string or DOM into a template and produces a template function, which\ncan then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.\n\nThe compilation is a process of walking the DOM tree and matching DOM elements to\n{@link ng.$compileProvider#directive directives}.\n\n<div class=\"alert alert-warning\">\n**Note:** This document is an in-depth reference of all directive options.\nFor a gentle introduction to directives with examples of common use cases,\nsee the {@link guide/directive directive guide}.\n</div>\n\n## Comprehensive Directive API\n\nThere are many different options for a directive.\n\nThe difference resides in the return value of the factory function.\nYou can either return a \"Directive Definition Object\" (see below) that defines the directive properties,\nor just the `postLink` function (all other properties will have the default values).\n\n<div class=\"alert alert-success\">\n**Best Practice:** It's recommended to use the \"directive definition object\" form.\n</div>\n\nHere's an example directive declared with a Directive Definition Object:\n\n```js\n  var myModule = angular.module(...);\n\n  myModule.directive('directiveName', function factory(injectables) {\n    var directiveDefinitionObject = {\n      priority: 0,\n      template: '<div></div>', // or // function(tElement, tAttrs) { ... },\n      // or\n      // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },\n      transclude: false,\n      restrict: 'A',\n      scope: false,\n      controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },\n      controllerAs: 'stringAlias',\n      require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],\n      compile: function compile(tElement, tAttrs, transclude) {\n        return {\n          pre: function preLink(scope, iElement, iAttrs, controller) { ... },\n          post: function postLink(scope, iElement, iAttrs, controller) { ... }\n        }\n        // or\n        // return function postLink( ... ) { ... }\n      },\n      // or\n      // link: {\n      //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },\n      //  post: function postLink(scope, iElement, iAttrs, controller) { ... }\n      // }\n      // or\n      // link: function postLink( ... ) { ... }\n    };\n    return directiveDefinitionObject;\n  });\n```\n\n<div class=\"alert alert-warning\">\n**Note:** Any unspecified options will use the default value. You can see the default values below.\n</div>\n\nTherefore the above can be simplified as:\n\n```js\n  var myModule = angular.module(...);\n\n  myModule.directive('directiveName', function factory(injectables) {\n    var directiveDefinitionObject = {\n      link: function postLink(scope, iElement, iAttrs) { ... }\n    };\n    return directiveDefinitionObject;\n    // or\n    // return function postLink(scope, iElement, iAttrs) { ... }\n  });\n```\n\n\n\n### Directive Definition Object\n\nThe directive definition object provides instructions to the {@link ng.$compile\ncompiler}. The attributes are:\n\n#### `priority`\nWhen there are multiple directives defined on a single DOM element, sometimes it\nis necessary to specify the order in which the directives are applied. The `priority` is used\nto sort the directives before their `compile` functions get called. Priority is defined as a\nnumber. Directives with greater numerical `priority` are compiled first. Pre-link functions\nare also run in priority order, but post-link functions are run in reverse order. The order\nof directives with the same priority is undefined. The default priority is `0`.\n\n#### `terminal`\nIf set to true then the current `priority` will be the last set of directives\nwhich will execute (any directives at the current priority will still execute\nas the order of execution on same `priority` is undefined).\n\n#### `scope`\n**If set to `true`,** then a new scope will be created for this directive. If multiple directives on the\nsame element request a new scope, only one new scope is created. The new scope rule does not\napply for the root of the template since the root of the template always gets a new scope.\n\n**If set to `{}` (object hash),** then a new \"isolate\" scope is created. The 'isolate' scope differs from\nnormal scope in that it does not prototypically inherit from the parent scope. This is useful\nwhen creating reusable components, which should not accidentally read or modify data in the\nparent scope.\n\nThe 'isolate' scope takes an object hash which defines a set of local scope properties\nderived from the parent scope. These local properties are useful for aliasing values for\ntemplates. Locals definition is a hash of local scope property to its source:\n\n* `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is\n  always a string since DOM attributes are strings. If no `attr` name is specified  then the\n  attribute name is assumed to be the same as the local name.\n  Given `<widget my-attr=\"hello {{name}}\">` and widget definition\n  of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect\n  the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the\n  `localName` property on the widget scope. The `name` is read from the parent scope (not\n  component scope).\n\n* `=` or `=attr` - set up bi-directional binding between a local scope property and the\n  parent scope property of name defined via the value of the `attr` attribute. If no `attr`\n  name is specified then the attribute name is assumed to be the same as the local name.\n  Given `<widget my-attr=\"parentModel\">` and widget definition of\n  `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the\n  value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected\n  in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent\n  scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You\n  can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional.\n\n* `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.\n  If no `attr` name is specified then the attribute name is assumed to be the same as the\n  local name. Given `<widget my-attr=\"count = count + value\">` and widget definition of\n  `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to\n  a function wrapper for the `count = count + value` expression. Often it's desirable to\n  pass data from the isolated scope via an expression and to the parent scope, this can be\n  done by passing a map of local variable names and values into the expression wrapper fn.\n  For example, if the expression is `increment(amount)` then we can specify the amount value\n  by calling the `localFn` as `localFn({amount: 22})`.\n\n\n\n#### `controller`\nController constructor function. The controller is instantiated before the\npre-linking phase and it is shared with other directives (see\n`require` attribute). This allows the directives to communicate with each other and augment\neach other's behavior. The controller is injectable (and supports bracket notation) with the following locals:\n\n* `$scope` - Current scope associated with the element\n* `$element` - Current element\n* `$attrs` - Current attributes object for the element\n* `$transclude` - A transclude linking function pre-bound to the correct transclusion scope.\n   The scope can be overridden by an optional first argument.\n  `function([scope], cloneLinkingFn)`.\n\n\n#### `require`\nRequire another directive and inject its controller as the fourth argument to the linking function. The\n`require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the\ninjected argument will be an array in corresponding order. If no such directive can be\nfound, or if the directive does not have a controller, then an error is raised. The name can be prefixed with:\n\n* (no prefix) - Locate the required controller on the current element. Throw an error if not found.\n* `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.\n* `^` - Locate the required controller by searching the element's parents. Throw an error if not found.\n* `?^` - Attempt to locate the required controller by searching the element's parents or pass `null` to the\n  `link` fn if not found.\n\n\n#### `controllerAs`\nController alias at the directive scope. An alias for the controller so it\ncan be referenced at the directive template. The directive needs to define a scope for this\nconfiguration to be used. Useful in the case when directive is used as component.\n\n\n#### `restrict`\nString of subset of `EACM` which restricts the directive to a specific directive\ndeclaration style. If omitted, the default (attributes only) is used.\n\n* `E` - Element name: `<my-directive></my-directive>`\n* `A` - Attribute (default): `<div my-directive=\"exp\"></div>`\n* `C` - Class: `<div class=\"my-directive: exp;\"></div>`\n* `M` - Comment: `<!-- directive: my-directive exp -->`\n\n\n#### `template`\nreplace the current element with the contents of the HTML. The replacement process\nmigrates all of the attributes / classes from the old element to the new one. See the\n{@link guide/directive#creating-custom-directives_creating-directives_template-expanding-directive\nDirectives Guide} for an example.\n\nYou can specify `template` as a string representing the template or as a function which takes\ntwo arguments `tElement` and `tAttrs` (described in the `compile` function api below) and\nreturns a string value representing the template.\n\n\n#### `templateUrl`\nSame as `template` but the template is loaded from the specified URL. Because\nthe template loading is asynchronous the compilation/linking is suspended until the template\nis loaded.\n\nYou can specify `templateUrl` as a string representing the URL or as a function which takes two\narguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns\na string value representing the url.  In either case, the template URL is passed through {@link\napi/ng.$sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.\n\n\n#### `replace` ([*DEPRECATED*!], will be removed in next major release)\nspecify where the template should be inserted. Defaults to `false`.\n\n* `true` - the template will replace the current element.\n* `false` - the template will replace the contents of the current element.\n\n\n#### `transclude`\ncompile the content of the element and make it available to the directive.\nTypically used with {@link ng.directive:ngTransclude\nngTransclude}. The advantage of transclusion is that the linking function receives a\ntransclusion function which is pre-bound to the correct scope. In a typical setup the widget\ncreates an `isolate` scope, but the transclusion is not a child, but a sibling of the `isolate`\nscope. This makes it possible for the widget to have private state, and the transclusion to\nbe bound to the parent (pre-`isolate`) scope.\n\n* `true` - transclude the content of the directive.\n* `'element'` - transclude the whole element including any directives defined at lower priority.\n\n\n#### `compile`\n\n```js\n  function compile(tElement, tAttrs, transclude) { ... }\n```\n\nThe compile function deals with transforming the template DOM. Since most directives do not do\ntemplate transformation, it is not used often. The compile function takes the following arguments:\n\n  * `tElement` - template element - The element where the directive has been declared. It is\n    safe to do template transformation on the element and child elements only.\n\n  * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared\n    between all directive compile functions.\n\n  * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`\n\n<div class=\"alert alert-warning\">\n**Note:** The template instance and the link instance may be different objects if the template has\nbeen cloned. For this reason it is **not** safe to do anything other than DOM transformations that\napply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration\nshould be done in a linking function rather than in a compile function.\n</div>\n\n<div class=\"alert alert-warning\">\n**Note:** The compile function cannot handle directives that recursively use themselves in their\nown templates or compile functions. Compiling these directives results in an infinite loop and a\nstack overflow errors.\n\nThis can be avoided by manually using $compile in the postLink function to imperatively compile\na directive's template instead of relying on automatic template compilation via `template` or\n`templateUrl` declaration or manual compilation inside the compile function.\n</div>\n\n<div class=\"alert alert-error\">\n**Note:** The `transclude` function that is passed to the compile function is deprecated, as it\n  e.g. does not know about the right outer scope. Please use the transclude function that is passed\n  to the link function instead.\n</div>\n\nA compile function can have a return value which can be either a function or an object.\n\n* returning a (post-link) function - is equivalent to registering the linking function via the\n  `link` property of the config object when the compile function is empty.\n\n* returning an object with function(s) registered via `pre` and `post` properties - allows you to\n  control when a linking function should be called during the linking phase. See info about\n  pre-linking and post-linking functions below.\n\n\n#### `link`\nThis property is used only if the `compile` property is not defined.\n\n```js\n  function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }\n```\n\nThe link function is responsible for registering DOM listeners as well as updating the DOM. It is\nexecuted after the template has been cloned. This is where most of the directive logic will be\nput.\n\n  * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the\n    directive for registering {@link ng.$rootScope.Scope#$watch watches}.\n\n  * `iElement` - instance element - The element where the directive is to be used. It is safe to\n    manipulate the children of the element only in `postLink` function since the children have\n    already been linked.\n\n  * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared\n    between all directive linking functions.\n\n  * `controller` - a controller instance - A controller instance if at least one directive on the\n    element defines a controller. The controller is shared among all the directives, which allows\n    the directives to use the controllers as a communication channel.\n\n  * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.\n    The scope can be overridden by an optional first argument. This is the same as the `$transclude`\n    parameter of directive controllers.\n    `function([scope], cloneLinkingFn)`.\n\n\n#### Pre-linking function\n\nExecuted before the child elements are linked. Not safe to do DOM transformation since the\ncompiler linking function will fail to locate the correct elements for linking.\n\n#### Post-linking function\n\nExecuted after the child elements are linked. It is safe to do DOM transformation in the post-linking function.\n\n<a name=\"Attributes\"></a>\n### Attributes\n\nThe {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the\n`link()` or `compile()` functions. It has a variety of uses.\n\naccessing *Normalized attribute names:*\nDirectives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.\nthe attributes object allows for normalized access to\n  the attributes.\n\n* *Directive inter-communication:* All directives share the same instance of the attributes\n  object which allows the directives to use the attributes object as inter directive\n  communication.\n\n* *Supports interpolation:* Interpolation attributes are assigned to the attribute object\n  allowing other directives to read the interpolated value.\n\n* *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes\n  that contain interpolation (e.g. `src=\"{{bar}}\"`). Not only is this very efficient but it's also\n  the only way to easily get the actual value because during the linking phase the interpolation\n  hasn't been evaluated yet and so the value is at this time set to `undefined`.\n\n```js\nfunction linkingFn(scope, elm, attrs, ctrl) {\n  // get the attribute value\n  console.log(attrs.ngModel);\n\n  // change the attribute\n  attrs.$set('ngModel', 'new value');\n\n  // observe changes to interpolated attribute\n  attrs.$observe('ngModel', function(value) {\n    console.log('ngModel has changed value to ' + value);\n  });\n}\n```\n\nBelow is an example using `$compileProvider`.\n\n<div class=\"alert alert-warning\">\n**Note**: Typically directives are registered with `module.directive`. The example below is\nto illustrate how `$compile` works.\n</div>\n\n<example module=\"compile\">\n  <file name=\"index.html\">\n   <script>\n     angular.module('compile', [], function($compileProvider) {\n       // configure new 'compile' directive by passing a directive\n       // factory function. The factory function injects the '$compile'\n       $compileProvider.directive('compile', function($compile) {\n         // directive factory creates a link function\n         return function(scope, element, attrs) {\n           scope.$watch(\n             function(scope) {\n                // watch the 'compile' expression for changes\n               return scope.$eval(attrs.compile);\n             },\n             function(value) {\n               // when the 'compile' expression changes\n               // assign it into the current DOM\n               element.html(value);\n\n               // compile the new DOM and link it to the current\n               // scope.\n               // NOTE: we only compile .childNodes so that\n               // we don't get into infinite loop compiling ourselves\n               $compile(element.contents())(scope);\n             }\n           );\n         };\n       })\n     });\n\n     function Ctrl($scope) {\n       $scope.name = 'Angular';\n       $scope.html = 'Hello {{name}}';\n     }\n   </script>\n   <div ng-controller=\"Ctrl\">\n     <input ng-model=\"name\"> <br>\n     <textarea ng-model=\"html\"></textarea> <br>\n     <div compile=\"html\"></div>\n   </div>\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should auto compile', function() {\n      var textarea = $('textarea');\n      var output = $('div[compile]');\n      // The initial state reads 'Hello Angular'.\n      expect(output.getText()).toBe('Hello Angular');\n      textarea.clear();\n      textarea.sendKeys('{{name}}!');\n      expect(output.getText()).toBe('Angular!');\n    });\n  </file>\n</example>",
            "line": " public/libs/angular/angular.js:5089"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:5567"
        },
        {
            "message": "Missing item type\nRegister a new directive with the compiler.",
            "line": " public/libs/angular/angular.js:5586"
        },
        {
            "message": "Missing item type\nRetrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during a[href] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to a[href] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "line": " public/libs/angular/angular.js:5639"
        },
        {
            "message": "Missing item type\nRetrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during img[src] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to img[src] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "line": " public/libs/angular/angular.js:5669"
        },
        {
            "message": "Missing item type\nAdds the CSS class value specified by the classVal parameter to the element. If animations\nare enabled then an animation will be triggered for the class addition.",
            "line": " public/libs/angular/angular.js:5713"
        },
        {
            "message": "Missing item type\nRemoves the CSS class value specified by the classVal parameter from the element. If\nanimations are enabled then an animation will be triggered for the class removal.",
            "line": " public/libs/angular/angular.js:5730"
        },
        {
            "message": "Missing item type\nAdds and removes the appropriate CSS class values to the element based on the difference\nbetween the new and old CSS class values (specified as newClasses and oldClasses).",
            "line": " public/libs/angular/angular.js:5747"
        },
        {
            "message": "Missing item type\nSet a normalized attribute on the element in a way such that all directives\ncan share the attribute. This function properly handles boolean attributes.",
            "line": " public/libs/angular/angular.js:5772"
        },
        {
            "message": "Missing item type\nObserves an interpolated attribute.\n\nThe observer function will be invoked once during the next `$digest` following\ncompilation. The observer is then invoked whenever the interpolated value\nchanges.",
            "line": " public/libs/angular/angular.js:5835"
        },
        {
            "message": "Missing item type\nCompile function matches each node in nodeList against the directives. Once all directives\nfor a particular node are collected their compile functions are executed. The compile\nfunctions return values - the linking functions - are combined into a composite linking\nfunction, which is the a linking function for the node.",
            "line": " public/libs/angular/angular.js:5937"
        },
        {
            "message": "Missing item type\nLooks for directives on the given node and adds them to the directive collection which is\nsorted.",
            "line": " public/libs/angular/angular.js:6058"
        },
        {
            "message": "Missing item type\nGiven a node with an directive-start it collects all of the siblings until it finds\ndirective-end.",
            "line": " public/libs/angular/angular.js:6150"
        },
        {
            "message": "Missing item type\nWrapper for linking function which converts normal linking function into a grouped\nlinking function.",
            "line": " public/libs/angular/angular.js:6183"
        },
        {
            "message": "Missing item type\nOnce the directives have been collected, their compile functions are executed. This method\nis responsible for inlining directive templates as well as terminating the application\nof the directives if the terminal directive has been reached.",
            "line": " public/libs/angular/angular.js:6198"
        },
        {
            "message": "Missing item type\nlooks up the directive and decorates it with exception handling and proper parameters. We\ncall this the boundDirective.",
            "line": " public/libs/angular/angular.js:6666"
        },
        {
            "message": "Missing item type\nWhen the element is replaced with HTML template then the new attributes\non the template need to be merged with the existing attributes in the DOM.\nThe desired effect is to have both of the attributes present.",
            "line": " public/libs/angular/angular.js:6704"
        },
        {
            "message": "Missing item type\nSorting function for bound directives.",
            "line": " public/libs/angular/angular.js:6861"
        },
        {
            "message": "Missing item type\nThis is a special jqLite.replaceWith, which can replace items which\nhave no parents, provided that the containing jqLite collection is provided.",
            "line": " public/libs/angular/angular.js:6981"
        },
        {
            "message": "Missing item type\nConverts all accepted directives format into proper directive name.\nAll of these will become 'myDirective':\n  my:Directive\n  my-directive\n  x-my-directive\n  data-my:directive\n\nAlso there is special case for Moz prefix starting with upper case letter.",
            "line": " public/libs/angular/angular.js:7041"
        },
        {
            "message": "Missing item type\nA shared object between directive compile / linking functions which contains normalized DOM\nelement attributes. The values reflect current binding state `{{ }}`. The normalization is\nneeded since all of these are treated as equivalent in Angular:\n\n```\n   <span ng:bind=\"a\" ng-bind=\"a\" data-ng-bind=\"a\" x-ng-bind=\"a\">\n```",
            "line": " public/libs/angular/angular.js:7056"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:7070"
        },
        {
            "message": "Missing item type\nSet DOM element attribute value.",
            "line": " public/libs/angular/angular.js:7078"
        },
        {
            "message": "Missing item type\nClosure compiler type information",
            "line": " public/libs/angular/angular.js:7095"
        },
        {
            "message": "Missing item type\nThe {@link ng.$controller $controller service} is used by Angular to create new\ncontrollers.\n\nThis provider allows controller registration via the\n{@link ng.$controllerProvider#register register} method.",
            "line": " public/libs/angular/angular.js:7130"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:7145"
        },
        {
            "message": "Missing item type\n`$controller` service is responsible for instantiating controllers.\n\nIt's just a simple call to {@link auto.$injector $injector}, but extracted into\na service, so that one can override this service with [BC version](https://gist.github.com/1649788).",
            "line": " public/libs/angular/angular.js:7165"
        },
        {
            "message": "Missing item type\nA {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.",
            "line": " public/libs/angular/angular.js:7218"
        },
        {
            "message": "Missing item type\nAny uncaught exception in angular expressions is delegated to this service.\nThe default implementation simply delegates to `$log.error` which logs it into\nthe browser console.\n\nIn unit tests, if `angular-mocks.js` is loaded, this service is overridden by\n{@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.\n\n## Example:\n\n```js\n  angular.module('exceptionOverride', []).factory('$exceptionHandler', function () {\n    return function (exception, cause) {\n      exception.message += ' (caused by \"' + cause + '\")';\n      throw exception;\n    };\n  });\n```\n\nThis example will override the normal action of `$exceptionHandler`, to make angular\nexceptions fail hard when they happen, instead of just logging to the console.",
            "line": " public/libs/angular/angular.js:7248"
        },
        {
            "message": "Missing item type\nParse headers into key value object",
            "line": " public/libs/angular/angular.js:7288"
        },
        {
            "message": "Missing item type\nReturns a function that provides access to parsed headers.\n\nHeaders are lazy parsed when first requested.",
            "line": " public/libs/angular/angular.js:7317"
        },
        {
            "message": "Missing item type\nChain all given functions\n\nThis function is used for both request and response transforming",
            "line": " public/libs/angular/angular.js:7344"
        },
        {
            "message": "Missing item type\nAre ordered by request, i.e. they are applied in the same order as the\narray, on request, but reverse order, on response.",
            "line": " public/libs/angular/angular.js:7408"
        },
        {
            "message": "Missing item type\nFor historical reasons, response interceptors are ordered by the order in which\nthey are applied to the response. (This is the opposite of interceptorFactories)",
            "line": " public/libs/angular/angular.js:7414"
        },
        {
            "message": "Missing item type\nInterceptors stored in reverse order. Inner interceptors before outer interceptors.\nThe reversal is needed so that we can build up the interception chain around the\nserver request.",
            "line": " public/libs/angular/angular.js:7425"
        },
        {
            "message": "Missing item type\nResponse interceptors go before \"around\" interceptors (no real reason, just\nhad to pick one.) But they are already reversed, so we can't use unshift, hence\nthe splice.",
            "line": " public/libs/angular/angular.js:7442"
        },
        {
            "message": "Missing item type\nShortcut method to perform `GET` request.",
            "line": " public/libs/angular/angular.js:8075"
        },
        {
            "message": "Missing item type\nShortcut method to perform `DELETE` request.",
            "line": " public/libs/angular/angular.js:8087"
        },
        {
            "message": "Missing item type\nShortcut method to perform `HEAD` request.",
            "line": " public/libs/angular/angular.js:8099"
        },
        {
            "message": "Missing item type\nShortcut method to perform `JSONP` request.",
            "line": " public/libs/angular/angular.js:8111"
        },
        {
            "message": "Missing item type\nShortcut method to perform `POST` request.",
            "line": " public/libs/angular/angular.js:8125"
        },
        {
            "message": "Missing item type\nShortcut method to perform `PUT` request.",
            "line": " public/libs/angular/angular.js:8138"
        },
        {
            "message": "Missing item type\nRuntime equivalent of the `$httpProvider.defaults` property. Allows configuration of\ndefault headers, withCredentials as well as request and response transformations.\n\nSee \"Setting HTTP Headers\" and \"Transforming Requests and Responses\" sections above.",
            "line": " public/libs/angular/angular.js:8152"
        },
        {
            "message": "Missing item type\nMakes the request.\n\n!!! ACCESSES CLOSURE VARS:\n$httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests",
            "line": " public/libs/angular/angular.js:8193"
        },
        {
            "message": "Missing item type\nCallback registered to $httpBackend():\n - caches the response if desired\n - resolves the raw $http promise\n - calls $apply",
            "line": " public/libs/angular/angular.js:8255"
        },
        {
            "message": "Missing item type\nResolves the raw $http promise.",
            "line": " public/libs/angular/angular.js:8276"
        },
        {
            "message": "Missing item type\nHTTP backend used by the {@link ng.$http service} that delegates to\nXMLHttpRequest object or JSONP and deals with browser incompatibilities.\n\nYou should never need to use this service directly, instead use the higher-level abstractions:\n{@link ng.$http $http} or {@link ngResource.$resource $resource}.\n\nDuring testing this implementation is swapped with {@link ngMock.$httpBackend mock\n$httpBackend} which can be trained with responses.",
            "line": " public/libs/angular/angular.js:8339"
        },
        {
            "message": "Missing item type\nUsed for configuring the interpolation markup. Defaults to `{{` and `}}`.",
            "line": " public/libs/angular/angular.js:8533"
        },
        {
            "message": "Missing item type\nSymbol to denote start of expression in the interpolated string. Defaults to `{{`.",
            "line": " public/libs/angular/angular.js:8573"
        },
        {
            "message": "Missing item type\nSymbol to denote the end of expression in the interpolated string. Defaults to `}}`.",
            "line": " public/libs/angular/angular.js:8591"
        },
        {
            "message": "Missing item type\nCompiles a string with markup into an interpolation function. This service is used by the\nHTML {@link ng.$compile $compile} service for data binding. See\n{@link ng.$interpolateProvider $interpolateProvider} for configuring the\ninterpolation markup.\n\n\n```js\n  var $interpolate = ...; // injected\n  var exp = $interpolate('Hello {{name | uppercase}}!');\n  expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');\n```",
            "line": " public/libs/angular/angular.js:8614"
        },
        {
            "message": "Missing item type\nSymbol to denote the start of expression in the interpolated string. Defaults to `{{`.\n\nUse {@link ng.$interpolateProvider#startSymbol $interpolateProvider#startSymbol} to change\nthe symbol.",
            "line": " public/libs/angular/angular.js:8746"
        },
        {
            "message": "Missing item type\nSymbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n\nUse {@link ng.$interpolateProvider#endSymbol $interpolateProvider#endSymbol} to change\nthe symbol.",
            "line": " public/libs/angular/angular.js:8762"
        },
        {
            "message": "Missing item type\nAngular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`\nmilliseconds.\n\nThe return value of registering an interval function is a promise. This promise will be\nnotified upon each tick of the interval, and will be resolved after `count` iterations, or\nrun indefinitely if `count` is not defined. The value of the notification will be the\nnumber of iterations that have run.\nTo cancel an interval, call `$interval.cancel(promise)`.\n\nIn tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to\nmove forward by `millis` milliseconds and trigger any functions scheduled to run in that\ntime.\n\n<div class=\"alert alert-warning\">\n**Note**: Intervals created by this service must be explicitly destroyed when you are finished\nwith them.  In particular they are not automatically destroyed when a controller's scope or a\ndirective's element are destroyed.\nYou should take this into consideration and make sure to always cancel the interval at the\nappropriate moment.  See the example below for more details on how and when to do this.\n</div>",
            "line": " public/libs/angular/angular.js:8787"
        },
        {
            "message": "Missing item type\nCancels a task associated with the `promise`.",
            "line": " public/libs/angular/angular.js:8941"
        },
        {
            "message": "Missing item type\n$locale service provides localization rules for various Angular components. As of right now the\nonly public api is:\n\n* `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)",
            "line": " public/libs/angular/angular.js:8965"
        },
        {
            "message": "Missing item type\nEncode path using encodeUriSegment, ignoring forward slashes",
            "line": " public/libs/angular/angular.js:9042"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:9086"
        },
        {
            "message": "Missing item type\nLocationHtml5Url represents an url\nThis object is exposed as $location service when HTML5 mode is enabled and supported",
            "line": " public/libs/angular/angular.js:9116"
        },
        {
            "message": "Missing item type\nParse given html5 (regular) url string into properties",
            "line": " public/libs/angular/angular.js:9131"
        },
        {
            "message": "Missing item type\nCompose url and update `absUrl` property",
            "line": " public/libs/angular/angular.js:9152"
        },
        {
            "message": "Missing item type\nLocationHashbangUrl represents url\nThis object is exposed as $location service when developer doesn't opt into html5 mode.\nIt also serves as the base class for html5 mode fallback on legacy browsers.",
            "line": " public/libs/angular/angular.js:9183"
        },
        {
            "message": "Missing item type\nParse given hashbang url into properties",
            "line": " public/libs/angular/angular.js:9198"
        },
        {
            "message": "Missing item type\nCompose hashbang url and update `absUrl` property",
            "line": " public/libs/angular/angular.js:9256"
        },
        {
            "message": "Missing item type\nLocationHashbangUrl represents url\nThis object is exposed as $location service when html5 history api is enabled but the browser\ndoes not support it.",
            "line": " public/libs/angular/angular.js:9276"
        },
        {
            "message": "Missing item type\nAre we in html5 mode?",
            "line": " public/libs/angular/angular.js:9319"
        },
        {
            "message": "Missing item type\nHas any change been replacing ?",
            "line": " public/libs/angular/angular.js:9325"
        },
        {
            "message": "Missing item type\nThis method is getter only.\n\nReturn full url representation with all segments encoded according to rules specified in\n[RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).",
            "line": " public/libs/angular/angular.js:9331"
        },
        {
            "message": "Missing item type\nThis method is getter / setter.\n\nReturn url (e.g. `/path?a=b#hash`) when called without any parameter.\n\nChange path, search and hash, when called with parameter and return `$location`.",
            "line": " public/libs/angular/angular.js:9345"
        },
        {
            "message": "Missing item type\nThis method is getter only.\n\nReturn protocol of current url.",
            "line": " public/libs/angular/angular.js:9372"
        },
        {
            "message": "Missing item type\nThis method is getter only.\n\nReturn host of current url.",
            "line": " public/libs/angular/angular.js:9385"
        },
        {
            "message": "Missing item type\nThis method is getter only.\n\nReturn port of current url.",
            "line": " public/libs/angular/angular.js:9398"
        },
        {
            "message": "Missing item type\nThis method is getter / setter.\n\nReturn path of current url when called without any parameter.\n\nChange path when called with parameter and return `$location`.\n\nNote: Path should always begin with forward slash (/), this method will add the forward slash\nif it is missing.",
            "line": " public/libs/angular/angular.js:9411"
        },
        {
            "message": "Missing item type\nThis method is getter / setter.\n\nReturn search part (as object) of current url when called without any parameter.\n\nChange search part when called with parameter and return `$location`.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar searchObject = $location.search();\n// => {foo: 'bar', baz: 'xoxo'}\n\n\n// set foo to 'yipee'\n$location.search('foo', 'yipee');\n// => $location\n```",
            "line": " public/libs/angular/angular.js:9432"
        },
        {
            "message": "Missing item type\nThis method is getter / setter.\n\nReturn hash fragment when called without any parameter.\n\nChange hash fragment when called with parameter and return `$location`.",
            "line": " public/libs/angular/angular.js:9501"
        },
        {
            "message": "Missing item type\nIf called, all changes to $location during current `$digest` will be replacing current history\nrecord, instead of adding new one.",
            "line": " public/libs/angular/angular.js:9517"
        },
        {
            "message": "Missing item type\nThe $location service parses the URL in the browser address bar (based on the\n[window.location](https://developer.mozilla.org/en/window.location)) and makes the URL\navailable to your application. Changes to the URL in the address bar are reflected into\n$location service and changes to $location are reflected into the browser address bar.\n\n**The $location service:**\n\n- Exposes the current URL in the browser address bar, so you can\n  - Watch and observe the URL.\n  - Change the URL.\n- Synchronizes the URL with the browser when the user\n  - Changes the address bar.\n  - Clicks the back or forward button (or clicks a History link).\n  - Clicks on a link.\n- Represents the URL object as a set of methods (protocol, host, port, path, search, hash).\n\nFor more information see {@link guide/$location Developer Guide: Using $location}",
            "line": " public/libs/angular/angular.js:9551"
        },
        {
            "message": "Missing item type\nUse the `$locationProvider` to configure how the application deep linking paths are stored.",
            "line": " public/libs/angular/angular.js:9577"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:9587"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:9603"
        },
        {
            "message": "Missing item type\nBroadcasted before a URL will change. This change can be prevented by calling\n`preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more\ndetails about event object. Upon successful change\n{@link ng.$location#events_$locationChangeSuccess $locationChangeSuccess} is fired.",
            "line": " public/libs/angular/angular.js:9619"
        },
        {
            "message": "Missing item type\nBroadcasted after a URL was changed.",
            "line": " public/libs/angular/angular.js:9634"
        },
        {
            "message": "Missing item type\nSimple service for logging. Default implementation safely writes the message\ninto the browser's console (if present).\n\nThe main purpose of this service is to simplify debugging and troubleshooting.\n\nThe default is to log `debug` messages. You can use\n{@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.",
            "line": " public/libs/angular/angular.js:9789"
        },
        {
            "message": "Missing item type\nUse the `$logProvider` to configure how the application logs messages",
            "line": " public/libs/angular/angular.js:9825"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:9835"
        },
        {
            "message": "Missing item type\nWrite a log message",
            "line": " public/libs/angular/angular.js:9853"
        },
        {
            "message": "Missing item type\nWrite an information message",
            "line": " public/libs/angular/angular.js:9862"
        },
        {
            "message": "Missing item type\nWrite a warning message",
            "line": " public/libs/angular/angular.js:9871"
        },
        {
            "message": "Missing item type\nWrite an error message",
            "line": " public/libs/angular/angular.js:9880"
        },
        {
            "message": "Missing item type\nWrite a debug message",
            "line": " public/libs/angular/angular.js:9889"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:10060"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:10323"
        },
        {
            "message": "Missing item type\nImplementation of the \"Black Hole\" variant from:\n- http://jsperf.com/angularjs-parse-getter/4\n- http://jsperf.com/path-evaluation-simplified/7",
            "line": " public/libs/angular/angular.js:10805"
        },
        {
            "message": "Missing item type\nConverts Angular {@link guide/expression expression} into a function.\n\n```js\n  var getter = $parse('user.name');\n  var setter = getter.assign;\n  var context = {user:{name:'angular'}};\n  var locals = {user:{name:'local'}};\n\n  expect(getter(context)).toEqual('angular');\n  setter(context, 'newValue');\n  expect(context.user.name).toEqual('newValue');\n  expect(getter(context, locals)).toEqual('local');\n```",
            "line": " public/libs/angular/angular.js:11012"
        },
        {
            "message": "Missing item type\n`$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}\n service.",
            "line": " public/libs/angular/angular.js:11053"
        },
        {
            "message": "Missing item type\n**This feature is deprecated, see deprecation notes below for more info**\n\nIf set to true (default is false), $parse will unwrap promises automatically when a promise is\nfound at any part of the expression. In other words, if set to true, the expression will always\nresult in a non-promise value.\n\nWhile the promise is unresolved, it's treated as undefined, but once resolved and fulfilled,\nthe fulfillment value is used in place of the promise while evaluating the expression.\n\n**Deprecation notice**\n\nThis is a feature that didn't prove to be wildly useful or popular, primarily because of the\ndichotomy between data access in templates (accessed as raw values) and controller code\n(accessed as promises).\n\nIn most code we ended up resolving promises manually in controllers anyway and thus unifying\nthe model access there.\n\nOther downsides of automatic promise unwrapping:\n\n- when building components it's often desirable to receive the raw promises\n- adds complexity and slows down expression evaluation\n- makes expression code pre-generation unattractive due to the amount of code that needs to be\n  generated\n- makes IDE auto-completion and tool support hard\n\n**Warning Logs**\n\nIf the unwrapping is enabled, Angular will log a warning about each expression that unwraps a\npromise (to reduce the noise, each expression is logged only once). To disable this logging use\n`$parseProvider.logPromiseWarnings(false)` api.",
            "line": " public/libs/angular/angular.js:11072"
        },
        {
            "message": "Missing item type\nControls whether Angular should log a warning on any encounter of a promise in an expression.\n\nThe default is set to `true`.\n\nThis setting applies only if `$parseProvider.unwrapPromises` setting is set to true as well.",
            "line": " public/libs/angular/angular.js:11126"
        },
        {
            "message": "Missing item type\nA promise/deferred implementation inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).\n\n[The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an\ninterface for interacting with an object that represents the result of an action that is\nperformed asynchronously, and may or may not be finished at any given point in time.\n\nFrom the perspective of dealing with error handling, deferred and promise APIs are to\nasynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.\n\n```js\n  // for the purpose of this example let's assume that variables `$q`, `scope` and `okToGreet`\n  // are available in the current lexical scope (they could have been injected or passed in).\n\n  function asyncGreet(name) {\n    var deferred = $q.defer();\n\n    setTimeout(function() {\n      // since this fn executes async in a future turn of the event loop, we need to wrap\n      // our code into an $apply call so that the model changes are properly observed.\n      scope.$apply(function() {\n        deferred.notify('About to greet ' + name + '.');\n\n        if (okToGreet(name)) {\n          deferred.resolve('Hello, ' + name + '!');\n        } else {\n          deferred.reject('Greeting ' + name + ' is not allowed.');\n        }\n      });\n    }, 1000);\n\n    return deferred.promise;\n  }\n\n  var promise = asyncGreet('Robin Hood');\n  promise.then(function(greeting) {\n    alert('Success: ' + greeting);\n  }, function(reason) {\n    alert('Failed: ' + reason);\n  }, function(update) {\n    alert('Got notification: ' + update);\n  });\n```\n\nAt first it might not be obvious why this extra complexity is worth the trouble. The payoff\ncomes in the way of guarantees that promise and deferred APIs make, see\nhttps://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.\n\nAdditionally the promise api allows for composition that is very hard to do with the\ntraditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.\nFor more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the\nsection on serial or parallel joining of promises.\n\n\n# The Deferred API\n\nA new instance of deferred is constructed by calling `$q.defer()`.\n\nThe purpose of the deferred object is to expose the associated Promise instance as well as APIs\nthat can be used for signaling the successful or unsuccessful completion, as well as the status\nof the task.\n\n**Methods**\n\n- `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection\n  constructed via `$q.reject`, the promise will be rejected instead.\n- `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to\n  resolving it with a rejection constructed via `$q.reject`.\n- `notify(value)` - provides updates on the status of the promise's execution. This may be called\n  multiple times before the promise is either resolved or rejected.\n\n**Properties**\n\n- promise – `{Promise}` – promise object associated with this deferred.\n\n\n# The Promise API\n\nA new promise instance is created when a deferred instance is created and can be retrieved by\ncalling `deferred.promise`.\n\nThe purpose of the promise object is to allow for interested parties to get access to the result\nof the deferred task when it completes.\n\n**Methods**\n\n- `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or\n  will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously\n  as soon as the result is available. The callbacks are called with a single argument: the result\n  or rejection reason. Additionally, the notify callback may be called zero or more times to\n  provide a progress indication, before the promise is resolved or rejected.\n\n  This method *returns a new promise* which is resolved or rejected via the return value of the\n  `successCallback`, `errorCallback`. It also notifies via the return value of the\n  `notifyCallback` method. The promise can not be resolved or rejected from the notifyCallback\n  method.\n\n- `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`\n\n- `finally(callback)` – allows you to observe either the fulfillment or rejection of a promise,\n  but to do so without modifying the final value. This is useful to release resources or do some\n  clean-up that needs to be done whether the promise was rejected or resolved. See the [full\n  specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for\n  more information.\n\n  Because `finally` is a reserved word in JavaScript and reserved keywords are not supported as\n  property names by ES3, you'll need to invoke the method like `promise['finally'](callback)` to\n  make your code IE8 and Android 2.x compatible.\n\n# Chaining promises\n\nBecause calling the `then` method of a promise returns a new derived promise, it is easily\npossible to create a chain of promises:\n\n```js\n  promiseB = promiseA.then(function(result) {\n    return result + 1;\n  });\n\n  // promiseB will be resolved immediately after promiseA is resolved and its value\n  // will be the result of promiseA incremented by 1\n```\n\nIt is possible to create chains of any length and since a promise can be resolved with another\npromise (which will defer its resolution further), it is possible to pause/defer resolution of\nthe promises at any point in the chain. This makes it possible to implement powerful APIs like\n$http's response interceptors.\n\n\n# Differences between Kris Kowal's Q and $q\n\n There are two main differences:\n\n- $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation\n  mechanism in angular, which means faster propagation of resolution or rejection into your\n  models and avoiding unnecessary browser repaints, which would result in flickering UI.\n- Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains\n  all the important functionality needed for common async tasks.\n\n # Testing\n\n ```js\n   it('should simulate promise', inject(function($q, $rootScope) {\n     var deferred = $q.defer();\n     var promise = deferred.promise;\n     var resolvedValue;\n\n     promise.then(function(value) { resolvedValue = value; });\n     expect(resolvedValue).toBeUndefined();\n\n     // Simulate resolving of promise\n     deferred.resolve(123);\n     // Note that the 'then' function does not get called synchronously.\n     // This is because we want the promise API to always be async, whether or not\n     // it got called synchronously or asynchronously.\n     expect(resolvedValue).toBeUndefined();\n\n     // Propagate promise resolution to 'then' functions using $apply().\n     $rootScope.$apply();\n     expect(resolvedValue).toEqual(123);\n   }));\n ```",
            "line": " public/libs/angular/angular.js:11195"
        },
        {
            "message": "Missing item type\nConstructs a promise manager.",
            "line": " public/libs/angular/angular.js:11373"
        },
        {
            "message": "Missing item type\nCreates a `Deferred` object which represents a task which will finish in the future.",
            "line": " public/libs/angular/angular.js:11383"
        },
        {
            "message": "Missing item type\nCreates a promise that is resolved as rejected with the specified `reason`. This api should be\nused to forward rejection in a chain of promises. If you are dealing with the last promise in\na promise chain, you don't need to worry about it.\n\nWhen comparing deferreds/promises to the familiar behavior of try/catch/throw, think of\n`reject` as the `throw` keyword in JavaScript. This also means that if you \"catch\" an error via\na promise error callback and you want to forward the error to the promise derived from the\ncurrent promise, you have to \"rethrow\" the error by returning a rejection constructed via\n`reject`.\n\n```js\n  promiseB = promiseA.then(function(result) {\n    // success: do something and resolve promiseB\n    //          with the old or a new result\n    return result;\n  }, function(reason) {\n    // error: handle the error if possible and\n    //        resolve promiseB with newPromiseOrValue,\n    //        otherwise forward the rejection to promiseB\n    if (canHandle(reason)) {\n     // handle the error and recover\n     return newPromiseOrValue;\n    }\n    return $q.reject(reason);\n  });\n```",
            "line": " public/libs/angular/angular.js:11540"
        },
        {
            "message": "Missing item type\nWraps an object that might be a value or a (3rd party) then-able promise into a $q promise.\nThis is useful when you are dealing with an object that might or might not be a promise, or if\nthe promise comes from a source that can't be trusted.",
            "line": " public/libs/angular/angular.js:11600"
        },
        {
            "message": "Missing item type\nCombines multiple promises into a single promise that is resolved when all of the input\npromises are resolved.",
            "line": " public/libs/angular/angular.js:11672"
        },
        {
            "message": "Missing item type\nDESIGN NOTES\n\nThe design decisions behind the scope are heavily favored for speed and memory consumption.\n\nThe typical use of scope is to watch the expressions, which most of the time return the same\nvalue as last time so we optimize the operation.\n\nClosures construction is expensive in terms of speed as well as memory:\n  - No closures, instead use prototypical inheritance for API\n  - Internal state needs to be stored on scope directly, which means that private state is\n    exposed as $$____ properties\n\nLoop operations are optimized by using while(count--) { ... }\n  - this means that in order to keep the same order of execution as addition we have to add\n    items to the array at the beginning (unshift) instead of at the end (push)\n\nChild scopes are created and removed often\n  - Using an array would be slow since inserts in middle are expensive so we use linked list\n\nThere are few watches then a lot of observers. This is why you don't want the observer to be\nimplemented in the same way as watch. Watch requires return of initialization function which\nare expensive to construct.",
            "line": " public/libs/angular/angular.js:11751"
        },
        {
            "message": "Missing item type\nProvider for the $rootScope service.",
            "line": " public/libs/angular/angular.js:11777"
        },
        {
            "message": "Missing item type\nSets the number of `$digest` iterations the scope should attempt to execute before giving up and\nassuming that the model is unstable.\n\nThe current default is 10 iterations.\n\nIn complex applications it's possible that the dependencies between `$watch`s will result in\nseveral digest iterations. However if an application needs more than the default 10 digest\niterations for its model to stabilize then you should investigate what is causing the model to\ncontinuously change during the digest.\n\nIncreasing the TTL could have performance implications, so you should not change it without\nproper justification.",
            "line": " public/libs/angular/angular.js:11785"
        },
        {
            "message": "Missing item type\nEvery application has a single root {@link ng.$rootScope.Scope scope}.\nAll other scopes are descendant scopes of the root scope. Scopes provide separation\nbetween the model and the view, via a mechanism for watching the model for changes.\nThey also provide an event emission/broadcast and subscription facility. See the\n{@link guide/scope developer guide on scopes}.",
            "line": " public/libs/angular/angular.js:11807"
        },
        {
            "message": "Missing item type\nA root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the\n{@link auto.$injector $injector}. Child scopes are created using the\n{@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when\ncompiled HTML template is executed.)\n\nHere is a simple scope snippet to show how you can interact with the scope.\n```html\n<file src=\"./test/ng/rootScopeSpec.js\" tag=\"docs1\" />\n```\n\n# Inheritance\nA scope can inherit from a parent scope, as in this example:\n```js\n        var parent = $rootScope;\n        var child = parent.$new();\n\n        parent.salutation = \"Hello\";\n        child.name = \"World\";\n        expect(child.salutation).toEqual('Hello');\n\n        child.salutation = \"Welcome\";\n        expect(child.salutation).toEqual('Welcome');\n        expect(parent.salutation).toEqual('Hello');\n```",
            "line": " public/libs/angular/angular.js:11833"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:11887"
        },
        {
            "message": "Missing item type\nCreates a new child {@link ng.$rootScope.Scope scope}.\n\nThe parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} and\n{@link ng.$rootScope.Scope#$digest $digest()} events. The scope can be removed from the\nscope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.\n\n{@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is\ndesired for the scope and its child scopes to be permanently detached from the parent and\nthus stop participating in model change detection and listener notification by invoking.",
            "line": " public/libs/angular/angular.js:11897"
        },
        {
            "message": "Missing item type\nRegisters a `listener` callback to be executed whenever the `watchExpression` changes.\n\n- The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest\n  $digest()} and should return the value that will be watched. (Since\n  {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the\n  `watchExpression` can execute multiple times per\n  {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)\n- The `listener` is called only when the value from the current `watchExpression` and the\n  previous call to `watchExpression` are not equal (with the exception of the initial run,\n  see below). Inequality is determined according to reference inequality,\n  [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)\n   via the `!==` Javascript operator, unless `objectEquality == true`\n  (see next point)\n- When `objectEquality == true`, inequality of the `watchExpression` is determined\n  according to the {@link angular.equals} function. To save the value of the object for\n  later comparison, the {@link angular.copy} function is used. This therefore means that\n  watching complex objects will have adverse memory and performance implications.\n- The watch `listener` may change the model, which may trigger other `listener`s to fire.\n  This is achieved by rerunning the watchers until no changes are detected. The rerun\n  iteration limit is 10 to prevent an infinite loop deadlock.\n\n\nIf you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,\nyou can register a `watchExpression` function with no `listener`. (Since `watchExpression`\ncan execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a\nchange is detected, be prepared for multiple calls to your listener.)\n\nAfter a watcher is registered with the scope, the `listener` fn is called asynchronously\n(via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the\nwatcher. In rare cases, this is undesirable because the listener is called when the result\nof `watchExpression` didn't change. To detect this scenario within the `listener` fn, you\ncan compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the\nlistener was called due to initialization.\n\nThe example below contains an illustration of using a function as your $watch listener\n\n\n# Example\n```js\n          // let's assume that scope was dependency injected as the $rootScope\n          var scope = $rootScope;\n          scope.name = 'misko';\n          scope.counter = 0;\n\n          expect(scope.counter).toEqual(0);\n          scope.$watch('name', function(newValue, oldValue) {\n            scope.counter = scope.counter + 1;\n          });\n          expect(scope.counter).toEqual(0);\n\n          scope.$digest();\n          // the listener is always called during the first $digest loop after it was registered\n          expect(scope.counter).toEqual(1);\n\n          scope.$digest();\n          // but now it will not be called unless the value changes\n          expect(scope.counter).toEqual(1);\n\n          scope.name = 'adam';\n          scope.$digest();\n          expect(scope.counter).toEqual(2);\n\n\n\n          // Using a listener function\n          var food;\n          scope.foodCounter = 0;\n          expect(scope.foodCounter).toEqual(0);\n          scope.$watch(\n            // This is the listener function\n            function() { return food; },\n            // This is the change handler\n            function(newValue, oldValue) {\n              if ( newValue !== oldValue ) {\n                // Only increment the counter if the value changed\n                scope.foodCounter = scope.foodCounter + 1;\n              }\n            }\n          );\n          // No digest has been run so the counter will be zero\n          expect(scope.foodCounter).toEqual(0);\n\n          // Run the digest but since food has not changed count will still be zero\n          scope.$digest();\n          expect(scope.foodCounter).toEqual(0);\n\n          // Update food and run digest.  Now the counter will increment\n          food = 'cheeseburger';\n          scope.$digest();\n          expect(scope.foodCounter).toEqual(1);\n\n```",
            "line": " public/libs/angular/angular.js:11959"
        },
        {
            "message": "Missing item type\nShallow watches the properties of an object and fires whenever any of the properties change\n(for arrays, this implies watching the array items; for object maps, this implies watching\nthe properties). If a change is detected, the `listener` callback is fired.\n\n- The `obj` collection is observed via standard $watch operation and is examined on every\n  call to $digest() to see if any items have been added, removed, or moved.\n- The `listener` is called whenever anything within the `obj` has changed. Examples include\n  adding, removing, and moving items belonging to an object or array.\n\n\n# Example\n```js\n         $scope.names = ['igor', 'matias', 'misko', 'james'];\n         $scope.dataCount = 4;\n\n         $scope.$watchCollection('names', function(newNames, oldNames) {\n           $scope.dataCount = newNames.length;\n         });\n\n         expect($scope.dataCount).toEqual(4);\n         $scope.$digest();\n\n         //still at 4 ... no changes\n         expect($scope.dataCount).toEqual(4);\n\n         $scope.names.pop();\n         $scope.$digest();\n\n         //now there's been a change\n         expect($scope.dataCount).toEqual(3);\n```",
            "line": " public/libs/angular/angular.js:12119"
        },
        {
            "message": "Missing item type\nProcesses all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and\nits children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change\nthe model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}\nuntil no more listeners are firing. This means that it is possible to get into an infinite\nloop. This function will throw `'Maximum iteration limit exceeded.'` if the number of\niterations exceeds 10.\n\nUsually, you don't call `$digest()` directly in\n{@link ng.directive:ngController controllers} or in\n{@link ng.$compileProvider#directive directives}.\nInstead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within\na {@link ng.$compileProvider#directive directives}), which will force a `$digest()`.\n\nIf you want to be notified whenever `$digest()` is called,\nyou can register a `watchExpression` function with\n{@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.\n\nIn unit tests, you may need to call `$digest()` to simulate the scope life cycle.\n\n# Example\n```js\n          var scope = ...;\n          scope.name = 'misko';\n          scope.counter = 0;\n\n          expect(scope.counter).toEqual(0);\n          scope.$watch('name', function(newValue, oldValue) {\n            scope.counter = scope.counter + 1;\n          });\n          expect(scope.counter).toEqual(0);\n\n          scope.$digest();\n          // the listener is always called during the first $digest loop after it was registered\n          expect(scope.counter).toEqual(1);\n\n          scope.$digest();\n          // but now it will not be called unless the value changes\n          expect(scope.counter).toEqual(1);\n\n          scope.name = 'adam';\n          scope.$digest();\n          expect(scope.counter).toEqual(2);\n```",
            "line": " public/libs/angular/angular.js:12295"
        },
        {
            "message": "Missing item type\nBroadcasted when a scope and its children are being destroyed.\n\nNote that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\nclean up DOM bindings before an element is removed from the DOM.",
            "line": " public/libs/angular/angular.js:12454"
        },
        {
            "message": "Missing item type\nRemoves the current scope (and all of its children) from the parent scope. Removal implies\nthat calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer\npropagate to the current scope and its children. Removal also implies that the current\nscope is eligible for garbage collection.\n\nThe `$destroy()` is usually used by directives such as\n{@link ng.directive:ngRepeat ngRepeat} for managing the\nunrolling of the loop.\n\nJust before a scope is destroyed, a `$destroy` event is broadcasted on this scope.\nApplication code can register a `$destroy` event handler that will give it a chance to\nperform any necessary cleanup.\n\nNote that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\nclean up DOM bindings before an element is removed from the DOM.",
            "line": " public/libs/angular/angular.js:12466"
        },
        {
            "message": "Missing item type\nExecutes the `expression` on the current scope and returns the result. Any exceptions in\nthe expression are propagated (uncaught). This is useful when evaluating Angular\nexpressions.\n\n# Example\n```js\n          var scope = ng.$rootScope.Scope();\n          scope.a = 1;\n          scope.b = 2;\n\n          expect(scope.$eval('a+b')).toEqual(3);\n          expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);\n```",
            "line": " public/libs/angular/angular.js:12527"
        },
        {
            "message": "Missing item type\nExecutes the expression on the current scope at a later point in time.\n\nThe `$evalAsync` makes no guarantees as to when the `expression` will be executed, only\nthat:\n\n  - it will execute after the function that scheduled the evaluation (preferably before DOM\n    rendering).\n  - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after\n    `expression` execution.\n\nAny exceptions from the execution of the expression are forwarded to the\n{@link ng.$exceptionHandler $exceptionHandler} service.\n\n__Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle\nwill be scheduled. However, it is encouraged to always call code that changes the model\nfrom within an `$apply` call. That includes code evaluated via `$evalAsync`.",
            "line": " public/libs/angular/angular.js:12559"
        },
        {
            "message": "Missing item type\n`$apply()` is used to execute an expression in angular from outside of the angular\nframework. (For example from browser DOM events, setTimeout, XHR or third party libraries).\nBecause we are calling into the angular framework we need to perform proper scope life\ncycle of {@link ng.$exceptionHandler exception handling},\n{@link ng.$rootScope.Scope#$digest executing watches}.\n\n## Life cycle\n\n# Pseudo-Code of `$apply()`\n```js\n          function $apply(expr) {\n            try {\n              return $eval(expr);\n            } catch (e) {\n              $exceptionHandler(e);\n            } finally {\n              $root.$digest();\n            }\n          }\n```\n\n\nScope's `$apply()` method transitions through the following stages:\n\n1. The {@link guide/expression expression} is executed using the\n   {@link ng.$rootScope.Scope#$eval $eval()} method.\n2. Any exceptions from the execution of the expression are forwarded to the\n   {@link ng.$exceptionHandler $exceptionHandler} service.\n3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the\n   expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.",
            "line": " public/libs/angular/angular.js:12606"
        },
        {
            "message": "Missing item type\nListens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for\ndiscussion of event life cycle.\n\nThe event listener function format is: `function(event, args...)`. The `event` object\npassed into the listener has the following attributes:\n\n  - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or\n    `$broadcast`-ed.\n  - `currentScope` - `{Scope}`: the current scope which is handling the event.\n  - `name` - `{string}`: name of the event.\n  - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel\n    further event propagation (available only for events that were `$emit`-ed).\n  - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag\n    to true.\n  - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.",
            "line": " public/libs/angular/angular.js:12668"
        },
        {
            "message": "Missing item type\nDispatches an event `name` upwards through the scope hierarchy notifying the\nregistered {@link ng.$rootScope.Scope#$on} listeners.\n\nThe event life cycle starts at the scope on which `$emit` was called. All\n{@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\nnotified. Afterwards, the event traverses upwards toward the root scope and calls all\nregistered listeners along the way. The event will stop propagating if one of the listeners\ncancels it.\n\nAny exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\nonto the {@link ng.$exceptionHandler $exceptionHandler} service.",
            "line": " public/libs/angular/angular.js:12717"
        },
        {
            "message": "Missing item type\nDispatches an event `name` downwards to all child scopes (and their children) notifying the\nregistered {@link ng.$rootScope.Scope#$on} listeners.\n\nThe event life cycle starts at the scope on which `$broadcast` was called. All\n{@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\nnotified. Afterwards, the event propagates to all direct and indirect scopes of the current\nscope and calls all registered listeners along the way. The event cannot be canceled.\n\nAny exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\nonto the {@link ng.$exceptionHandler $exceptionHandler} service.",
            "line": " public/libs/angular/angular.js:12785"
        },
        {
            "message": "Missing item type\nfunction used as an initial value for watchers.\nbecause it's unique we can easily tell it apart from other values",
            "line": " public/libs/angular/angular.js:12890"
        },
        {
            "message": "Missing item type\nPrivate service to sanitize uris for links and images. Used by $compile and $sanitize.",
            "line": " public/libs/angular/angular.js:12898"
        },
        {
            "message": "Missing item type\nRetrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during a[href] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to a[href] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "line": " public/libs/angular/angular.js:12906"
        },
        {
            "message": "Missing item type\nRetrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during img[src] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to img[src] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
            "line": " public/libs/angular/angular.js:12931"
        },
        {
            "message": "Missing item type\n`$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict\nContextual Escaping (SCE)} services to AngularJS.\n\nTypically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of\nthe `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is\nbecause, while the `$sce` provides numerous shorthand methods, etc., you really only need to\noverride 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things\nwork because `$sce` delegates to `$sceDelegate` for these operations.\n\nRefer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.\n\nThe default instance of `$sceDelegate` should work out of the box with little pain.  While you\ncan override it completely to change the behavior of `$sce`, the common case would\ninvolve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting\nyour own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as\ntemplates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist\n$sceDelegateProvider.resourceUrlWhitelist} and {@link\nng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}",
            "line": " public/libs/angular/angular.js:13033"
        },
        {
            "message": "Missing item type\nThe `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate\n$sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure\nthat the URLs used for sourcing Angular templates are safe.  Refer {@link\nng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and\n{@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}\n\nFor the general details about this service in Angular, read the main page for {@link ng.$sce\nStrict Contextual Escaping (SCE)}.\n\n**Example**:  Consider the following case. <a name=\"example\"></a>\n\n- your app is hosted at url `http://myapp.example.com/`\n- but some of your templates are hosted on other domains you control such as\n  `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.\n- and you have an open redirect at `http://myapp.example.com/clickThru?...`.\n\nHere is what a secure configuration for this scenario might look like:\n\n<pre class=\"prettyprint\">\n   angular.module('myApp', []).config(function($sceDelegateProvider) {\n     $sceDelegateProvider.resourceUrlWhitelist([\n       // Allow same origin resource loads.\n       'self',\n       // Allow loading from our assets domain.  Notice the difference between * and **.\n       'http://srv*.assets.example.com/**']);\n\n     // The blacklist overrides the whitelist so the open redirect here is blocked.\n     $sceDelegateProvider.resourceUrlBlacklist([\n       'http://myapp.example.com/clickThru**']);\n     });\n</pre>",
            "line": " public/libs/angular/angular.js:13060"
        },
        {
            "message": "Missing item type\nSets/Gets the whitelist of trusted resource URLs.",
            "line": " public/libs/angular/angular.js:13105"
        },
        {
            "message": "Missing item type\nSets/Gets the blacklist of trusted resource URLs.",
            "line": " public/libs/angular/angular.js:13134"
        },
        {
            "message": "Missing item type\nReturns an object that is trusted by angular for use in specified strict\ncontextual escaping contexts (such as ng-bind-html, ng-include, any src\nattribute interpolation, any dom event binding attribute interpolation\nsuch as for onclick,  etc.) that uses the provided value.\nSee {@link ng.$sce $sce} for enabling strict contextual escaping.",
            "line": " public/libs/angular/angular.js:13237"
        },
        {
            "message": "Missing item type\nIf the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs\n`$sceDelegate.trustAs`}, returns the value that had been passed to {@link\nng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.\n\nIf the passed parameter is not a value that had been returned by {@link\nng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.",
            "line": " public/libs/angular/angular.js:13274"
        },
        {
            "message": "Missing item type\nTakes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and\nreturns the originally supplied value if the queried context type is a supertype of the\ncreated type.  If this condition isn't satisfied, throws an exception.",
            "line": " public/libs/angular/angular.js:13300"
        },
        {
            "message": "Missing item type\nThe $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.\n-   enable/disable Strict Contextual Escaping (SCE) in a module\n-   override the default implementation with a custom delegate\n\nRead more about {@link ng.$sce Strict Contextual Escaping (SCE)}.",
            "line": " public/libs/angular/angular.js:13347"
        },
        {
            "message": "Missing item type\n`$sce` is a service that provides Strict Contextual Escaping services to AngularJS.\n\n# Strict Contextual Escaping\n\nStrict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain\ncontexts to result in a value that is marked as safe to use for that context.  One example of\nsuch a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer\nto these contexts as privileged or SCE contexts.\n\nAs of version 1.2, Angular ships with SCE enabled by default.\n\nNote:  When enabled (the default), IE8 in quirks mode is not supported.  In this mode, IE8 allows\none to execute arbitrary javascript by the use of the expression() syntax.  Refer\n<http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.\nYou can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`\nto the top of your HTML document.\n\nSCE assists in writing code in way that (a) is secure by default and (b) makes auditing for\nsecurity vulnerabilities such as XSS, clickjacking, etc. a lot easier.\n\nHere's an example of a binding in a privileged context:\n\n<pre class=\"prettyprint\">\n    <input ng-model=\"userHtml\">\n    <div ng-bind-html=\"userHtml\">\n</pre>\n\nNotice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE\ndisabled, this application allows the user to render arbitrary HTML into the DIV.\nIn a more realistic example, one may be rendering user comments, blog articles, etc. via\nbindings.  (HTML is just one example of a context where rendering user controlled input creates\nsecurity vulnerabilities.)\n\nFor the case of HTML, you might use a library, either on the client side, or on the server side,\nto sanitize unsafe HTML before binding to the value and rendering it in the document.\n\nHow would you ensure that every place that used these types of bindings was bound to a value that\nwas sanitized by your library (or returned as safe for rendering by your server?)  How can you\nensure that you didn't accidentally delete the line that sanitized the value, or renamed some\nproperties/fields and forgot to update the binding to the sanitized value?\n\nTo be secure by default, you want to ensure that any such bindings are disallowed unless you can\ndetermine that something explicitly says it's safe to use a value for binding in that\ncontext.  You can then audit your code (a simple grep would do) to ensure that this is only done\nfor those values that you can easily tell are safe - because they were received from your server,\nsanitized by your library, etc.  You can organize your codebase to help with this - perhaps\nallowing only the files in a specific directory to do this.  Ensuring that the internal API\nexposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.\n\nIn the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}\n(and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to\nobtain values that will be accepted by SCE / privileged contexts.\n\n\n## How does it work?\n\nIn privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted\n$sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link\nng.$sce#parse $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the\n{@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.\n\nAs an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link\nng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly\nsimplified):\n\n<pre class=\"prettyprint\">\n  var ngBindHtmlDirective = ['$sce', function($sce) {\n    return function(scope, element, attr) {\n      scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {\n        element.html(value || '');\n      });\n    };\n  }];\n</pre>\n\n## Impact on loading templates\n\nThis applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as\n`templateUrl`'s specified by {@link guide/directive directives}.\n\nBy default, Angular only loads templates from the same domain and protocol as the application\ndocument.  This is done by calling {@link ng.$sce#getTrustedResourceUrl\n$sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or\nprotocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist\nthem} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.\n\n*Please note*:\nThe browser's\n[Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\nand [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\npolicy apply in addition to this and may further restrict whether the template is successfully\nloaded.  This means that without the right CORS policy, loading templates from a different domain\nwon't work on all browsers.  Also, loading templates from `file://` URL does not work on some\nbrowsers.\n\n## This feels like too much overhead for the developer?\n\nIt's important to remember that SCE only applies to interpolation expressions.\n\nIf your expressions are constant literals, they're automatically trusted and you don't need to\ncall `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.\n`<div ng-bind-html=\"'<b>implicitly trusted</b>'\"></div>`) just works.\n\nAdditionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them\nthrough {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.\n\nThe included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load\ntemplates in `ng-include` from your application's domain without having to even know about SCE.\nIt blocks loading templates from other domains or loading templates over http from an https\nserved document.  You can change these by setting your own custom {@link\nng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link\nng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.\n\nThis significantly reduces the overhead.  It is far easier to pay the small overhead and have an\napplication that's secure and can be audited to verify that with much more ease than bolting\nsecurity onto an application later.\n\n<a name=\"contexts\"></a>\n## What trusted context types are supported?\n\n| Context             | Notes          |\n|---------------------|----------------|\n| `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |\n| `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |\n| `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |\n| `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |\n| `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |\n\n## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name=\"resourceUrlPatternItem\"></a>\n\n Each element in these arrays must be one of the following:\n\n - **'self'**\n   - The special **string**, `'self'`, can be used to match against all URLs of the **same\n     domain** as the application document using the **same protocol**.\n - **String** (except the special value `'self'`)\n   - The string is matched against the full *normalized / absolute URL* of the resource\n     being tested (substring matches are not good enough.)\n   - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters\n     match themselves.\n   - `*`: matches zero or more occurrences of any character other than one of the following 6\n     characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use\n     in a whitelist.\n   - `**`: matches zero or more occurrences of *any* character.  As such, it's not\n     not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.\n     http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might\n     not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.\n     http://foo.example.com/templates/**).\n - **RegExp** (*see caveat below*)\n   - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax\n     (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to\n     accidentally introduce a bug when one updates a complex expression (imho, all regexes should\n     have good test coverage.).  For instance, the use of `.` in the regex is correct only in a\n     small number of cases.  A `.` character in the regex used when matching the scheme or a\n     subdomain could be matched against a `:` or literal `.` that was likely not intended.   It\n     is highly recommended to use the string patterns and only fall back to regular expressions\n     if they as a last resort.\n   - The regular expression must be an instance of RegExp (i.e. not a string.)  It is\n     matched against the **entire** *normalized / absolute URL* of the resource being tested\n     (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags\n     present on the RegExp (such as multiline, global, ignoreCase) are ignored.\n   - If you are generating your JavaScript from some other templating engine (not\n     recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),\n     remember to escape your regular expression (and be aware that you might need more than\n     one level of escaping depending on your templating engine and the way you interpolated\n     the value.)  Do make use of your platform's escaping mechanism as it might be good\n     enough before coding your own.  e.g. Ruby has\n     [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)\n     and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).\n     Javascript lacks a similar built in function for escaping.  Take a look at Google\n     Closure library's [goog.string.regExpEscape(s)](\n     http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).\n\nRefer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.\n\n## Show me an example using SCE.",
            "line": " public/libs/angular/angular.js:13361"
        },
        {
            "message": "Missing item type\nEnables/disables SCE and returns the current value.",
            "line": " public/libs/angular/angular.js:13632"
        },
        {
            "message": "Missing item type\nReturns a boolean indicating if SCE is enabled.",
            "line": " public/libs/angular/angular.js:13710"
        },
        {
            "message": "Missing item type\nConverts Angular {@link guide/expression expression} into a function.  This is like {@link\nng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it\nwraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,\n*result*)}",
            "line": " public/libs/angular/angular.js:13733"
        },
        {
            "message": "Missing item type\nDelegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,\nreturns an object that is trusted by angular for use in specified strict contextual\nescaping contexts (such as ng-bind-html, ng-include, any src attribute\ninterpolation, any dom event binding attribute interpolation such as for onclick,  etc.)\nthat uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual\nescaping.",
            "line": " public/libs/angular/angular.js:13763"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.trustAsHtml(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}",
            "line": " public/libs/angular/angular.js:13782"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.trustAsUrl(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}",
            "line": " public/libs/angular/angular.js:13797"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.trustAsResourceUrl(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}",
            "line": " public/libs/angular/angular.js:13812"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.trustAsJs(value)` →\n    {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}",
            "line": " public/libs/angular/angular.js:13827"
        },
        {
            "message": "Missing item type\nDelegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,\ntakes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the\noriginally supplied value if the queried context type is a supertype of the created type.\nIf this condition isn't satisfied, throws an exception.",
            "line": " public/libs/angular/angular.js:13842"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.getTrustedHtml(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}",
            "line": " public/libs/angular/angular.js:13860"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.getTrustedCss(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}",
            "line": " public/libs/angular/angular.js:13872"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.getTrustedUrl(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}",
            "line": " public/libs/angular/angular.js:13884"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.getTrustedResourceUrl(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}",
            "line": " public/libs/angular/angular.js:13896"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.getTrustedJs(value)` →\n    {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}",
            "line": " public/libs/angular/angular.js:13908"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.parseAsHtml(expression string)` →\n    {@link ng.$sce#parse `$sce.parseAs($sce.HTML, value)`}",
            "line": " public/libs/angular/angular.js:13920"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.parseAsCss(value)` →\n    {@link ng.$sce#parse `$sce.parseAs($sce.CSS, value)`}",
            "line": " public/libs/angular/angular.js:13937"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.parseAsUrl(value)` →\n    {@link ng.$sce#parse `$sce.parseAs($sce.URL, value)`}",
            "line": " public/libs/angular/angular.js:13954"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.parseAsResourceUrl(value)` →\n    {@link ng.$sce#parse `$sce.parseAs($sce.RESOURCE_URL, value)`}",
            "line": " public/libs/angular/angular.js:13971"
        },
        {
            "message": "Missing item type\nShorthand method.  `$sce.parseAsJs(value)` →\n    {@link ng.$sce#parse `$sce.parseAs($sce.JS, value)`}",
            "line": " public/libs/angular/angular.js:13988"
        },
        {
            "message": "Missing item type\nAngular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch\nblock and delegates any exceptions to\n{@link ng.$exceptionHandler $exceptionHandler} service.\n\nThe return value of registering a timeout function is a promise, which will be resolved when\nthe timeout is reached and the timeout function is executed.\n\nTo cancel a timeout request, call `$timeout.cancel(promise)`.\n\nIn tests you can use {@link ngMock.$timeout `$timeout.flush()`} to\nsynchronously flush the queue of deferred functions.",
            "line": " public/libs/angular/angular.js:14125"
        },
        {
            "message": "Missing item type\nCancels a task associated with the `promise`. As a result of this, the promise will be\nresolved with a rejection.",
            "line": " public/libs/angular/angular.js:14177"
        },
        {
            "message": "Missing item type\nNormalizes and parses a URL.",
            "line": " public/libs/angular/angular.js:14213"
        },
        {
            "message": "Missing item type\nParse a request URL and determine whether this is a same-origin request as the application document.",
            "line": " public/libs/angular/angular.js:14292"
        },
        {
            "message": "Missing item type\nA reference to the browser's `window` object. While `window`\nis globally available in JavaScript, it causes testability problems, because\nit is a global variable. In angular we always refer to it through the\n`$window` service, so it may be overridden, removed or mocked for testing.\n\nExpressions, like the one defined for the `ngClick` directive in the example\nbelow, are evaluated with respect to the current scope.  Therefore, there is\nno risk of inadvertently coding in a dependency on a global value in such an\nexpression.",
            "line": " public/libs/angular/angular.js:14305"
        },
        {
            "message": "Missing item type\nFilters are just functions which transform input to an output. However filters need to be\nDependency Injected. To achieve this a filter definition consists of a factory function which is\nannotated with dependencies and is responsible for creating a filter function.\n\n```js\n  // Filter registration\n  function MyModule($provide, $filterProvider) {\n    // create a service to demonstrate injection (not always needed)\n    $provide.value('greet', function(name){\n      return 'Hello ' + name + '!';\n    });\n\n    // register a filter factory which uses the\n    // greet service to demonstrate DI.\n    $filterProvider.register('greet', function(greet){\n      // return the filter function which uses the greet service\n      // to generate salutation\n      return function(text) {\n        // filters need to be forgiving so check input validity\n        return text && greet(text) || text;\n      };\n    });\n  }\n```\n\nThe filter function is registered with the `$injector` under the filter name suffix with\n`Filter`.\n\n```js\n  it('should be the same instance', inject(\n    function($filterProvider) {\n      $filterProvider.register('reverse', function(){\n        return ...;\n      });\n    },\n    function($filter, reverseFilter) {\n      expect($filter('reverse')).toBe(reverseFilter);\n    });\n```\n\n\nFor more information about how angular filters work, and how to create your own filters, see\n{@link guide/filter Filters} in the Angular Developer Guide.",
            "line": " public/libs/angular/angular.js:14349"
        },
        {
            "message": "Missing item type\nRegister filter factory function.",
            "line": " public/libs/angular/angular.js:14398"
        },
        {
            "message": "Missing item type\nFilters are used for formatting data displayed to the user.\n\nThe general syntax in templates is as follows:\n\n        {{ expression [| filter_name[:parameter_value] ... ] }}",
            "line": " public/libs/angular/angular.js:14409"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular/angular.js:14444"
        },
        {
            "message": "Missing item type\nSelects a subset of items from `array` and returns it as a new array.",
            "line": " public/libs/angular/angular.js:14496"
        },
        {
            "message": "Missing item type\nFormats a number as a currency (ie $1,234.56). When no currency symbol is provided, default\nsymbol for current locale is used.",
            "line": " public/libs/angular/angular.js:14715"
        },
        {
            "message": "Missing item type\nFormats a number as text.\n\nIf the input is not a number an empty string is returned.",
            "line": " public/libs/angular/angular.js:14772"
        },
        {
            "message": "Missing item type\nFormats `date` to a string based on the requested `format`.\n\n  `format` string can be composed of the following elements:\n\n  * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)\n  * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n  * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)\n  * `'MMMM'`: Month in year (January-December)\n  * `'MMM'`: Month in year (Jan-Dec)\n  * `'MM'`: Month in year, padded (01-12)\n  * `'M'`: Month in year (1-12)\n  * `'dd'`: Day in month, padded (01-31)\n  * `'d'`: Day in month (1-31)\n  * `'EEEE'`: Day in Week,(Sunday-Saturday)\n  * `'EEE'`: Day in Week, (Sun-Sat)\n  * `'HH'`: Hour in day, padded (00-23)\n  * `'H'`: Hour in day (0-23)\n  * `'hh'`: Hour in am/pm, padded (01-12)\n  * `'h'`: Hour in am/pm, (1-12)\n  * `'mm'`: Minute in hour, padded (00-59)\n  * `'m'`: Minute in hour (0-59)\n  * `'ss'`: Second in minute, padded (00-59)\n  * `'s'`: Second in minute (0-59)\n  * `'.sss' or ',sss'`: Millisecond in second, padded (000-999)\n  * `'a'`: am/pm marker\n  * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)\n\n  `format` string can also be one of the following predefined\n  {@link guide/i18n localizable formats}:\n\n  * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale\n    (e.g. Sep 3, 2010 12:05:08 pm)\n  * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 pm)\n  * `'fullDate'`: equivalent to `'EEEE, MMMM d,y'` for en_US  locale\n    (e.g. Friday, September 3, 2010)\n  * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)\n  * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)\n  * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)\n  * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 pm)\n  * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 pm)\n\n  `format` string can contain literal values. These need to be quoted with single quotes (e.g.\n  `\"h 'in the morning'\"`). In order to output single quote, use two single quotes in a sequence\n  (e.g. `\"h 'o''clock'\"`).",
            "line": " public/libs/angular/angular.js:14984"
        },
        {
            "message": "Missing item type\nAllows you to convert a JavaScript object into JSON string.\n\n  This filter is mostly useful for debugging. When using the double curly {{value}} notation\n  the binding is automatically converted to JSON.",
            "line": " public/libs/angular/angular.js:15141"
        },
        {
            "message": "Missing item type\nConverts string to lowercase.",
            "line": " public/libs/angular/angular.js:15176"
        },
        {
            "message": "Missing item type\nConverts string to uppercase.",
            "line": " public/libs/angular/angular.js:15187"
        },
        {
            "message": "Missing item type\nCreates a new array or string containing only a specified number of elements. The elements\nare taken from either the beginning or the end of the source array or string, as specified by\nthe value and sign (positive or negative) of `limit`.",
            "line": " public/libs/angular/angular.js:15197"
        },
        {
            "message": "Missing item type\nOrders a specified `array` by the `expression` predicate. It is ordered alphabetically\nfor strings and numerically for numbers. Note: if you notice numbers are not being sorted\ncorrectly, make sure they are actually being saved as numbers and not strings.",
            "line": " public/libs/angular/angular.js:15310"
        },
        {
            "message": "Missing item type\nModifies the default behavior of the html A tag so that the default action is prevented when\nthe href attribute is empty.\n\nThis change permits the easy creation of action links with the `ngClick` directive\nwithout changing the location or causing page reloads, e.g.:\n`<a href=\"\" ng-click=\"list.addItem()\">Add Item</a>`",
            "line": " public/libs/angular/angular.js:15485"
        },
        {
            "message": "Missing item type\nUsing Angular markup like `{{hash}}` in an href attribute will\nmake the link go to the wrong URL if the user clicks it before\nAngular has a chance to replace the `{{hash}}` markup with its\nvalue. Until Angular replaces the markup the link will be broken\nand will most likely return a 404 error.\n\nThe `ngHref` directive solves this problem.\n\nThe wrong way to write it:\n```html\n<a href=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n```\n\nThe correct way to write it:\n```html\n<a ng-href=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n```",
            "line": " public/libs/angular/angular.js:15533"
        },
        {
            "message": "Missing item type\nUsing Angular markup like `{{hash}}` in a `src` attribute doesn't\nwork right: The browser will fetch from the URL with the literal\ntext `{{hash}}` until Angular replaces the expression inside\n`{{hash}}`. The `ngSrc` directive solves this problem.\n\nThe buggy way to write it:\n```html\n<img src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n```\n\nThe correct way to write it:\n```html\n<img ng-src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n```",
            "line": " public/libs/angular/angular.js:15633"
        },
        {
            "message": "Missing item type\nUsing Angular markup like `{{hash}}` in a `srcset` attribute doesn't\nwork right: The browser will fetch from the URL with the literal\ntext `{{hash}}` until Angular replaces the expression inside\n`{{hash}}`. The `ngSrcset` directive solves this problem.\n\nThe buggy way to write it:\n```html\n<img srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\"/>\n```\n\nThe correct way to write it:\n```html\n<img ng-srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\"/>\n```",
            "line": " public/libs/angular/angular.js:15659"
        },
        {
            "message": "Missing item type\nThe following markup will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:\n```html\n<div ng-init=\"scope = { isDisabled: false }\">\n <button disabled=\"{{scope.isDisabled}}\">Disabled</button>\n</div>\n```\n\nThe HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as disabled. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngDisabled` directive solves this problem for the `disabled` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "line": " public/libs/angular/angular.js:15685"
        },
        {
            "message": "Missing item type\nThe HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as checked. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngChecked` directive solves this problem for the `checked` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "line": " public/libs/angular/angular.js:15729"
        },
        {
            "message": "Missing item type\nThe HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as readonly. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngReadonly` directive solves this problem for the `readonly` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "line": " public/libs/angular/angular.js:15764"
        },
        {
            "message": "Missing item type\nThe HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as selected. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngSelected` directive solves this problem for the `selected` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "line": " public/libs/angular/angular.js:15799"
        },
        {
            "message": "Missing item type\nThe HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as open. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngOpen` directive solves this problem for the `open` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
            "line": " public/libs/angular/angular.js:15837"
        },
        {
            "message": "Missing item type\nRegister a control with the form.\n\nInput elements using ngModelController do this automatically when they are linked.",
            "line": " public/libs/angular/angular.js:16003"
        },
        {
            "message": "Missing item type\nDeregister a control from the form.\n\nInput elements using ngModelController do this automatically when they are destroyed.",
            "line": " public/libs/angular/angular.js:16023"
        },
        {
            "message": "Missing item type\nSets the validity of a form control.\n\nThis method will also propagate to parent forms.",
            "line": " public/libs/angular/angular.js:16043"
        },
        {
            "message": "Missing item type\nSets the form to a dirty state.\n\nThis method can be called to add the 'ng-dirty' class and set the form to a dirty\nstate (ng-dirty class). This method will also propagate to parent forms.",
            "line": " public/libs/angular/angular.js:16090"
        },
        {
            "message": "Missing item type\nSets the form to its pristine state.\n\nThis method can be called to remove the 'ng-dirty' class and set the form to its pristine\nstate (ng-pristine class). This method will also propagate to all the controls contained\nin this form.\n\nSetting a form back to a pristine state is often useful when we want to 'reuse' a form after\nsaving or resetting it.",
            "line": " public/libs/angular/angular.js:16108"
        },
        {
            "message": "Missing item type\nNestable alias of {@link ng.directive:form `form`} directive. HTML\ndoes not allow nesting of form elements. It is useful to nest forms, for example if the validity of a\nsub-group of controls needs to be determined.\n\nNote: the purpose of `ngForm` is to group controls,\nbut not to be a replacement for the `<form>` tag with all of its capabilities\n(e.g. posting to the server, ...).",
            "line": " public/libs/angular/angular.js:16134"
        },
        {
            "message": "Missing item type\nDirective that instantiates\n{@link form.FormController FormController}.\n\nIf the `name` attribute is specified, the form controller is published onto the current scope under\nthis name.\n\n# Alias: {@link ng.directive:ngForm `ngForm`}\n\nIn Angular forms can be nested. This means that the outer form is valid when all of the child\nforms are valid as well. However, browsers do not allow nesting of `<form>` elements, so\nAngular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to\n`<form>` but can be nested.  This allows you to have nested forms, which is very useful when\nusing Angular validation directives in forms that are dynamically generated using the\n{@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`\nattribute of input elements using interpolation, you have to wrap each set of repeated inputs in an\n`ngForm` directive and nest these in an outer `form` element.\n\n\n# CSS classes\n - `ng-valid` is set if the form is valid.\n - `ng-invalid` is set if the form is invalid.\n - `ng-pristine` is set if the form is pristine.\n - `ng-dirty` is set if the form is dirty.\n\nKeep in mind that ngAnimate can detect each of these classes when added and removed.\n\n\n# Submitting a form and preventing the default action\n\nSince the role of forms in client-side Angular applications is different than in classical\nroundtrip apps, it is desirable for the browser not to translate the form submission into a full\npage reload that sends the data to the server. Instead some javascript logic should be triggered\nto handle the form submission in an application-specific way.\n\nFor this reason, Angular prevents the default action (form submission to the server) unless the\n`<form>` element has an `action` attribute specified.\n\nYou can use one of the following two ways to specify what javascript method should be called when\na form is submitted:\n\n- {@link ng.directive:ngSubmit ngSubmit} directive on the form element\n- {@link ng.directive:ngClick ngClick} directive on the first\n button or input field of type submit (input[type=submit])\n\nTo prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}\nor {@link ng.directive:ngClick ngClick} directives.\nThis is because of the following form submission rules in the HTML specification:\n\n- If a form has only one input field then hitting enter in this field triggers form submit\n(`ngSubmit`)\n- if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter\ndoesn't trigger submit\n- if a form has one or more input fields and one or more buttons or input[type=submit] then\nhitting enter in any of the input fields will trigger the click handler on the *first* button or\ninput[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)",
            "line": " public/libs/angular/angular.js:16153"
        },
        {
            "message": "Missing item type\nStandard HTML text input with angular data binding.",
            "line": " public/libs/angular/angular.js:16368"
        },
        {
            "message": "Missing item type\nText input with number validation and transformation. Sets the `number` validation\nerror if not a valid number.",
            "line": " public/libs/angular/angular.js:16446"
        },
        {
            "message": "Missing item type\nText input with URL validation. Sets the `url` validation error key if the content is not a\nvalid URL.",
            "line": " public/libs/angular/angular.js:16523"
        },
        {
            "message": "Missing item type\nText input with email validation. Sets the `email` validation error key if not a valid email\naddress.",
            "line": " public/libs/angular/angular.js:16599"
        },
        {
            "message": "Missing item type\nHTML radio button.",
            "line": " public/libs/angular/angular.js:16674"
        },
        {
            "message": "Missing item type\nHTML checkbox.",
            "line": " public/libs/angular/angular.js:16725"
        },
        {
            "message": "Missing item type\nHTML textarea element control with angular data-binding. The data-binding and validation\nproperties of this element are exactly the same as those of the\n{@link ng.directive:input input element}.",
            "line": " public/libs/angular/angular.js:17078"
        },
        {
            "message": "Missing item type\nHTML input element control with angular data-binding. Input control follows HTML5 input types\nand polyfills the HTML5 validation behavior for older browsers.",
            "line": " public/libs/angular/angular.js:17107"
        },
        {
            "message": "Missing item type\nCalled when the view needs to be updated. It is expected that the user of the ng-model\ndirective will implement this method.",
            "line": " public/libs/angular/angular.js:17395"
        },
        {
            "message": "Missing item type\nThis is called when we need to determine if the value of the input is empty.\n\nFor instance, the required directive does this to work out if the input has data or not.\nThe default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.\n\nYou can override this for input directives whose concept of being empty is different to the\ndefault. The `checkboxInputType` directive does this because in its case a value of `false`\nimplies empty.",
            "line": " public/libs/angular/angular.js:17405"
        },
        {
            "message": "Missing item type\nChange the validity state, and notifies the form when the control changes validity. (i.e. it\ndoes not notify form if given validator is already marked as invalid).\n\nThis method should be called by validators - i.e. the parser or formatter functions.",
            "line": " public/libs/angular/angular.js:17442"
        },
        {
            "message": "Missing item type\nSets the control to its pristine state.\n\nThis method can be called to remove the 'ng-dirty' class and set the control to its pristine\nstate (ng-pristine class).",
            "line": " public/libs/angular/angular.js:17485"
        },
        {
            "message": "Missing item type\nUpdate the view value.\n\nThis method should be called when the view value changes, typically from within a DOM event handler.\nFor example {@link ng.directive:input input} and\n{@link ng.directive:select select} directives call it.\n\nIt will update the $viewValue, then pass this value through each of the functions in `$parsers`,\nwhich includes any validators. The value that comes out of this `$parsers` pipeline, be applied to\n`$modelValue` and the **expression** specified in the `ng-model` attribute.\n\nLastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.\n\nNote that calling this function does not trigger a `$digest`.",
            "line": " public/libs/angular/angular.js:17502"
        },
        {
            "message": "Missing item type\nThe `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a\nproperty on the scope using {@link ngModel.NgModelController NgModelController},\nwhich is created and exposed by this directive.\n\n`ngModel` is responsible for:\n\n- Binding the view into the model, which other directives such as `input`, `textarea` or `select`\n  require.\n- Providing validation behavior (i.e. required, number, email, url).\n- Keeping the state of the control (valid/invalid, dirty/pristine, validation errors).\n- Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`) including animations.\n- Registering the control with its parent {@link ng.directive:form form}.\n\nNote: `ngModel` will try to bind to the property given by evaluating the expression on the\ncurrent scope. If the property doesn't already exist on this scope, it will be created\nimplicitly and added to the scope.\n\nFor best practices on using `ngModel`, see:\n\n - [https://github.com/angular/angular.js/wiki/Understanding-Scopes]\n\nFor basic examples, how to use `ngModel`, see:\n\n - {@link ng.directive:input input}\n   - {@link input[text] text}\n   - {@link input[checkbox] checkbox}\n   - {@link input[radio] radio}\n   - {@link input[number] number}\n   - {@link input[email] email}\n   - {@link input[url] url}\n - {@link ng.directive:select select}\n - {@link ng.directive:textarea textarea}\n\n# CSS classes\nThe following CSS classes are added and removed on the associated input/select/textarea element\ndepending on the validity of the model.\n\n - `ng-valid` is set if the model is valid.\n - `ng-invalid` is set if the model is invalid.\n - `ng-pristine` is set if the model is pristine.\n - `ng-dirty` is set if the model is dirty.\n\nKeep in mind that ngAnimate can detect each of these classes when added and removed.\n\n## Animation Hooks\n\nAnimations within models are triggered when any of the associated CSS classes are added and removed\non the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,\n`.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.\nThe animations that are triggered within ngModel are similar to how they work in ngClass and\nanimations can be hooked into using CSS transitions, keyframes as well as JS animations.\n\nThe following example shows a simple way to utilize CSS transitions to style an input element\nthat has been rendered as invalid after it has been validated:\n\n<pre>\n//be sure to include ngAnimate as a module to hook into more\n//advanced animations\n.my-input {\n  transition:0.5s linear all;\n  background: white;\n}\n.my-input.ng-invalid {\n  background: red;\n  color:white;\n}\n</pre>",
            "line": " public/libs/angular/angular.js:17580"
        },
        {
            "message": "Missing item type\nEvaluate the given expression when the user changes the input.\nThe expression is evaluated immediately, unlike the JavaScript onchange event\nwhich only triggers at the end of a change (usually, when the user leaves the\nform element or presses the return key).\nThe expression is not evaluated when the value change is coming from the model.\n\nNote, this directive requires `ngModel` to be present.",
            "line": " public/libs/angular/angular.js:17702"
        },
        {
            "message": "Missing item type\nText input that converts between a delimited string and an array of strings. The delimiter\ncan be a fixed string (by default a comma) or a regular expression.",
            "line": " public/libs/angular/angular.js:17798"
        },
        {
            "message": "Missing item type\nBinds the given expression to the value of `input[select]` or `input[radio]`, so\nthat when the element is selected, the `ngModel` of that element is set to the\nbound value.\n\n`ngValue` is useful when dynamically generating lists of radio buttons using `ng-repeat`, as\nshown below.",
            "line": " public/libs/angular/angular.js:17893"
        },
        {
            "message": "Missing item type\nThe `ngBind` attribute tells Angular to replace the text content of the specified HTML element\nwith the value of a given expression, and to update the text content when the value of that\nexpression changes.\n\nTypically, you don't use `ngBind` directly, but instead you use the double curly markup like\n`{{ expression }}` which is similar but less verbose.\n\nIt is preferable to use `ngBind` instead of `{{ expression }}` when a template is momentarily\ndisplayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an\nelement attribute, it makes the bindings invisible to the user while the page is loading.\n\nAn alternative solution to this problem would be using the\n{@link ng.directive:ngCloak ngCloak} directive.",
            "line": " public/libs/angular/angular.js:17963"
        },
        {
            "message": "Missing item type\nThe `ngBindTemplate` directive specifies that the element\ntext content should be replaced with the interpolation of the template\nin the `ngBindTemplate` attribute.\nUnlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`\nexpressions. This directive is needed since some HTML elements\n(such as TITLE and OPTION) cannot contain SPAN elements.",
            "line": " public/libs/angular/angular.js:18029"
        },
        {
            "message": "Missing item type\nCreates a binding that will innerHTML the result of evaluating the `expression` into the current\nelement in a secure way.  By default, the innerHTML-ed content will be sanitized using the {@link\nngSanitize.$sanitize $sanitize} service.  To utilize this functionality, ensure that `$sanitize`\nis available, for example, by including {@link ngSanitize} in your module's dependencies (not in\ncore Angular.)  You may also bypass sanitization for values you know are safe. To do so, bind to\nan explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example\nunder {@link ng.$sce#Example Strict Contextual Escaping (SCE)}.\n\nNote: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you\nwill have an exception (instead of an exploit.)",
            "line": " public/libs/angular/angular.js:18091"
        },
        {
            "message": "Missing item type\nThe `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding\nan expression that represents all classes to be added.\n\nThe directive operates in three different ways, depending on which of three types the expression\nevaluates to:\n\n1. If the expression evaluates to a string, the string should be one or more space-delimited class\nnames.\n\n2. If the expression evaluates to an array, each element of the array should be a string that is\none or more space-delimited class names.\n\n3. If the expression evaluates to an object, then for each key-value pair of the\nobject with a truthy value the corresponding key is used as a class name.\n\nThe directive won't add duplicate classes if a particular class was already set.\n\nWhen the expression changes, the previously added classes are removed and only then the\nnew classes are added.",
            "line": " public/libs/angular/angular.js:18266"
        },
        {
            "message": "Missing item type\nThe `ngClassOdd` and `ngClassEven` directives work exactly as\n{@link ng.directive:ngClass ngClass}, except they work in\nconjunction with `ngRepeat` and take effect only on odd (even) rows.\n\nThis directive can be applied only within the scope of an\n{@link ng.directive:ngRepeat ngRepeat}.",
            "line": " public/libs/angular/angular.js:18412"
        },
        {
            "message": "Missing item type\nThe `ngClassOdd` and `ngClassEven` directives work exactly as\n{@link ng.directive:ngClass ngClass}, except they work in\nconjunction with `ngRepeat` and take effect only on odd (even) rows.\n\nThis directive can be applied only within the scope of an\n{@link ng.directive:ngRepeat ngRepeat}.",
            "line": " public/libs/angular/angular.js:18460"
        },
        {
            "message": "Missing item type\nThe `ngCloak` directive is used to prevent the Angular html template from being briefly\ndisplayed by the browser in its raw (uncompiled) form while your application is loading. Use this\ndirective to avoid the undesirable flicker effect caused by the html template display.\n\nThe directive can be applied to the `<body>` element, but the preferred usage is to apply\nmultiple `ngCloak` directives to small portions of the page to permit progressive rendering\nof the browser view.\n\n`ngCloak` works in cooperation with the following css rule embedded within `angular.js` and\n`angular.min.js`.\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```css\n[ng\\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {\n  display: none !important;\n}\n```\n\nWhen this css rule is loaded by the browser, all html elements (including their children) that\nare tagged with the `ngCloak` directive are hidden. When Angular encounters this directive\nduring the compilation of the template it deletes the `ngCloak` element attribute, making\nthe compiled element visible.\n\nFor the best result, the `angular.js` script must be loaded in the head section of the html\ndocument; alternatively, the css rule above must be included in the external stylesheet of the\napplication.\n\nLegacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they\ncannot match the `[ng\\:cloak]` selector. To work around this limitation, you must add the css\nclass `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.",
            "line": " public/libs/angular/angular.js:18508"
        },
        {
            "message": "Missing item type\nThe `ngController` directive attaches a controller class to the view. This is a key aspect of how angular\nsupports the principles behind the Model-View-Controller design pattern.\n\nMVC components in angular:\n\n* Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties\n  are accessed through bindings.\n* View — The template (HTML with data bindings) that is rendered into the View.\n* Controller — The `ngController` directive specifies a Controller class; the class contains business\n  logic behind the application to decorate the scope with functions and values\n\nNote that you can also attach controllers to the DOM by declaring it in a route definition\nvia the {@link ngRoute.$route $route} service. A common mistake is to declare the controller\nagain using `ng-controller` in the template itself.  This will cause the controller to be attached\nand executed twice.",
            "line": " public/libs/angular/angular.js:18571"
        },
        {
            "message": "Missing item type\nEnables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.\n\nThis is necessary when developing things like Google Chrome Extensions.\n\nCSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).\nFor us to be compatible, we just need to implement the \"getterFn\" in $parse without violating\nany of these restrictions.\n\nAngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`\ndirective will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will\nevaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will\nbe raised.\n\nCSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically\nincludes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).\nTo make those directives work in CSP mode, include the `angular-csp.css` manually.\n\nIn order to use this feature put the `ngCsp` directive on the root element of the application.\n\n*Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*",
            "line": " public/libs/angular/angular.js:18792"
        },
        {
            "message": "Missing item type\nThe ngClick directive allows you to specify custom behavior when\nan element is clicked.",
            "line": " public/libs/angular/angular.js:18834"
        },
        {
            "message": "Missing item type\nThe `ngDblclick` directive allows you to specify custom behavior on a dblclick event.",
            "line": " public/libs/angular/angular.js:18892"
        },
        {
            "message": "Missing item type\nThe ngMousedown directive allows you to specify custom behavior on mousedown event.",
            "line": " public/libs/angular/angular.js:18916"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on mouseup event.",
            "line": " public/libs/angular/angular.js:18940"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on mouseover event.",
            "line": " public/libs/angular/angular.js:18963"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on mouseenter event.",
            "line": " public/libs/angular/angular.js:18987"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on mouseleave event.",
            "line": " public/libs/angular/angular.js:19011"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on mousemove event.",
            "line": " public/libs/angular/angular.js:19035"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on keydown event.",
            "line": " public/libs/angular/angular.js:19059"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on keyup event.",
            "line": " public/libs/angular/angular.js:19081"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on keypress event.",
            "line": " public/libs/angular/angular.js:19108"
        },
        {
            "message": "Missing item type\nEnables binding angular expressions to onsubmit events.\n\nAdditionally it prevents the default action (which for form means sending the request to the\nserver and reloading the current page), but only if the form does not contain `action`,\n`data-action`, or `x-action` attributes.",
            "line": " public/libs/angular/angular.js:19130"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on focus event.",
            "line": " public/libs/angular/angular.js:19185"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on blur event.",
            "line": " public/libs/angular/angular.js:19201"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on copy event.",
            "line": " public/libs/angular/angular.js:19217"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on cut event.",
            "line": " public/libs/angular/angular.js:19238"
        },
        {
            "message": "Missing item type\nSpecify custom behavior on paste event.",
            "line": " public/libs/angular/angular.js:19259"
        },
        {
            "message": "Missing item type\nThe `ngIf` directive removes or recreates a portion of the DOM tree based on an\n{expression}. If the expression assigned to `ngIf` evaluates to a false\nvalue then the element is removed from the DOM, otherwise a clone of the\nelement is reinserted into the DOM.\n\n`ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the\nelement in the DOM rather than changing its visibility via the `display` css property.  A common\ncase when this difference is significant is when using css selectors that rely on an element's\nposition within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.\n\nNote that when an element is removed using `ngIf` its scope is destroyed and a new scope\nis created when the element is restored.  The scope created within `ngIf` inherits from\nits parent scope using\n[prototypal inheritance](https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance).\nAn important implication of this is if `ngModel` is used within `ngIf` to bind to\na javascript primitive defined in the parent scope. In this case any modifications made to the\nvariable within the child scope will override (hide) the value in the parent scope.\n\nAlso, `ngIf` recreates elements using their compiled state. An example of this behavior\nis if an element's class attribute is directly modified after it's compiled, using something like\njQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element\nthe added class will be lost because the original compiled state is used to regenerate the element.\n\nAdditionally, you can provide animations via the `ngAnimate` module to animate the `enter`\nand `leave` effects.",
            "line": " public/libs/angular/angular.js:19280"
        },
        {
            "message": "Missing item type\nFetches, compiles and includes an external HTML fragment.\n\nBy default, the template URL is restricted to the same domain and protocol as the\napplication document. This is done by calling {@link ng.$sce#getTrustedResourceUrl\n$sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols\nyou may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or\n[wrap them](ng.$sce#trustAsResourceUrl) as trusted values. Refer to Angular's {@link\nng.$sce Strict Contextual Escaping}.\n\nIn addition, the browser's\n[Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\nand [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\npolicy may further restrict whether the template is successfully loaded.\nFor example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`\naccess on some browsers.",
            "line": " public/libs/angular/angular.js:19403"
        },
        {
            "message": "Missing item type\nEmitted every time the ngInclude content is requested.",
            "line": " public/libs/angular/angular.js:19546"
        },
        {
            "message": "Missing item type\nEmitted every time the ngInclude content is reloaded.",
            "line": " public/libs/angular/angular.js:19555"
        },
        {
            "message": "Missing item type\nThe `ngInit` directive allows you to evaluate an expression in the\ncurrent scope.\n\n<div class=\"alert alert-error\">\nThe only appropriate use of `ngInit` is for aliasing special properties of\n{@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you\nshould use {@link guide/controller controllers} rather than `ngInit`\nto initialize values on a scope.\n</div>\n<div class=\"alert alert-warning\">\n**Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make\nsure you have parenthesis for correct precedence:\n<pre class=\"prettyprint\">\n  <div ng-init=\"test1 = (data | orderBy:'name')\"></div>\n</pre>\n</div>",
            "line": " public/libs/angular/angular.js:19661"
        },
        {
            "message": "Missing item type\nThe `ngNonBindable` directive tells Angular not to compile or bind the contents of the current\nDOM element. This is useful if the element contains what appears to be Angular directives and\nbindings but which should be ignored by Angular. This could be the case if you have a site that\ndisplays snippets of code, for instance.",
            "line": " public/libs/angular/angular.js:19727"
        },
        {
            "message": "Missing item type\n`ngPluralize` is a directive that displays messages according to en-US localization rules.\nThese rules are bundled with angular.js, but can be overridden\n(see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive\nby specifying the mappings between\n[plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\nand the strings to be displayed.\n\n# Plural categories and explicit number rules\nThere are two\n[plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\nin Angular's default en-US locale: \"one\" and \"other\".\n\nWhile a plural category may match many numbers (for example, in en-US locale, \"other\" can match\nany number that is not 1), an explicit number rule can only match one number. For example, the\nexplicit number rule for \"3\" matches the number 3. There are examples of plural categories\nand explicit number rules throughout the rest of this documentation.\n\n# Configuring ngPluralize\nYou configure ngPluralize by providing 2 attributes: `count` and `when`.\nYou can also provide an optional attribute, `offset`.\n\nThe value of the `count` attribute can be either a string or an {@link guide/expression\nAngular expression}; these are evaluated on the current scope for its bound value.\n\nThe `when` attribute specifies the mappings between plural categories and the actual\nstring to be displayed. The value of the attribute should be a JSON object.\n\nThe following example shows how to configure ngPluralize:\n\n```html\n<ng-pluralize count=\"personCount\"\n                when=\"{'0': 'Nobody is viewing.',\n                     'one': '1 person is viewing.',\n                     'other': '{} people are viewing.'}\">\n</ng-pluralize>\n```\n\nIn the example, `\"0: Nobody is viewing.\"` is an explicit number rule. If you did not\nspecify this rule, 0 would be matched to the \"other\" category and \"0 people are viewing\"\nwould be shown instead of \"Nobody is viewing\". You can specify an explicit number rule for\nother numbers, for example 12, so that instead of showing \"12 people are viewing\", you can\nshow \"a dozen people are viewing\".\n\nYou can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted\ninto pluralized strings. In the previous example, Angular will replace `{}` with\n<span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder\nfor <span ng-non-bindable>{{numberExpression}}</span>.\n\n# Configuring ngPluralize with offset\nThe `offset` attribute allows further customization of pluralized text, which can result in\na better user experience. For example, instead of the message \"4 people are viewing this document\",\nyou might display \"John, Kate and 2 others are viewing this document\".\nThe offset attribute allows you to offset a number by any desired value.\nLet's take a look at an example:\n\n```html\n<ng-pluralize count=\"personCount\" offset=2\n              when=\"{'0': 'Nobody is viewing.',\n                     '1': '{{person1}} is viewing.',\n                     '2': '{{person1}} and {{person2}} are viewing.',\n                     'one': '{{person1}}, {{person2}} and one other person are viewing.',\n                     'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n</ng-pluralize>\n```\n\nNotice that we are still using two plural categories(one, other), but we added\nthree explicit number rules 0, 1 and 2.\nWhen one person, perhaps John, views the document, \"John is viewing\" will be shown.\nWhen three people view the document, no explicit number rule is found, so\nan offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.\nIn this case, plural category 'one' is matched and \"John, Marry and one other person are viewing\"\nis shown.\n\nNote that when you specify offsets, you must provide explicit number rules for\nnumbers from 0 up to and including the offset. If you use an offset of 3, for example,\nyou must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for\nplural categories \"one\" and \"other\".",
            "line": " public/libs/angular/angular.js:19761"
        },
        {
            "message": "Missing item type\nThe `ngRepeat` directive instantiates a template once per item from a collection. Each template\ninstance gets its own scope, where the given loop variable is set to the current collection item,\nand `$index` is set to the item index or key.\n\nSpecial properties are exposed on the local scope of each template instance, including:\n\n| Variable  | Type            | Details                                                                     |\n|-----------|-----------------|-----------------------------------------------------------------------------|\n| `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |\n| `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |\n| `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |\n| `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |\n| `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |\n| `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |\n\nCreating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.\nThis may be useful when, for instance, nesting ngRepeats.\n\n# Special repeat start and end points\nTo repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending\nthe range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.\nThe **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)\nup to and including the ending HTML tag where **ng-repeat-end** is placed.\n\nThe example below makes use of this feature:\n```html\n  <header ng-repeat-start=\"item in items\">\n    Header {{ item }}\n  </header>\n  <div class=\"body\">\n    Body {{ item }}\n  </div>\n  <footer ng-repeat-end>\n    Footer {{ item }}\n  </footer>\n```\n\nAnd with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:\n```html\n  <header>\n    Header A\n  </header>\n  <div class=\"body\">\n    Body A\n  </div>\n  <footer>\n    Footer A\n  </footer>\n  <header>\n    Header B\n  </header>\n  <div class=\"body\">\n    Body B\n  </div>\n  <footer>\n    Footer B\n  </footer>\n```\n\nThe custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such\nas **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).",
            "line": " public/libs/angular/angular.js:19976"
        },
        {
            "message": "Missing item type\nThe `ngShow` directive shows or hides the given HTML element based on the expression\nprovided to the ngShow attribute. The element is shown or hidden by removing or adding\nthe `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined\nin AngularJS and sets the display style to none (using an !important flag).\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```html\n<!-- when $scope.myValue is truthy (element is visible) -->\n<div ng-show=\"myValue\"></div>\n\n<!-- when $scope.myValue is falsy (element is hidden) -->\n<div ng-show=\"myValue\" class=\"ng-hide\"></div>\n```\n\nWhen the ngShow expression evaluates to false then the ng-hide CSS class is added to the class attribute\non the element causing it to become hidden. When true, the ng-hide CSS class is removed\nfrom the element causing the element not to appear hidden.\n\n<div class=\"alert alert-warning\">\n**Note:** Here is a list of values that ngShow will consider as a falsy value (case insensitive):<br />\n\"f\" / \"0\" / \"false\" / \"no\" / \"n\" / \"[]\"\n</div>\n\n## Why is !important used?\n\nYou may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector\ncan be easily overridden by heavier selectors. For example, something as simple\nas changing the display style on a HTML list item would make hidden elements appear visible.\nThis also becomes a bigger issue when dealing with CSS frameworks.\n\nBy using !important, the show and hide behavior will work as expected despite any clash between CSS selector\nspecificity (when !important isn't used with any conflicting styles). If a developer chooses to override the\nstyling to change how to hide an element then it is just a matter of using !important in their own CSS code.\n\n### Overriding .ng-hide\n\nBy default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change\nthe hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`\nclass in CSS:\n\n```css\n.ng-hide {\n  //this is just another form of hiding an element\n  display:block!important;\n  position:absolute;\n  top:-9999px;\n  left:-9999px;\n}\n```\n\nBy default you don't need to override in CSS anything and the animations will work around the display style.\n\n## A note about animations with ngShow\n\nAnimations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression\nis true and false. This system works like the animation system present with ngClass except that\nyou must also include the !important flag to override the display property\nso that you can perform an animation when the element is hidden during the time of the animation.\n\n```css\n//\n//a working example can be found at the bottom of this page\n//\n.my-element.ng-hide-add, .my-element.ng-hide-remove {\n  transition:0.5s linear all;\n}\n\n.my-element.ng-hide-add { ... }\n.my-element.ng-hide-add.ng-hide-add-active { ... }\n.my-element.ng-hide-remove { ... }\n.my-element.ng-hide-remove.ng-hide-remove-active { ... }\n```\n\nKeep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display\nproperty to block during animation states--ngAnimate will handle the style toggling automatically for you.",
            "line": " public/libs/angular/angular.js:20371"
        },
        {
            "message": "Missing item type\nThe `ngHide` directive shows or hides the given HTML element based on the expression\nprovided to the ngHide attribute. The element is shown or hidden by removing or adding\nthe `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined\nin AngularJS and sets the display style to none (using an !important flag).\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```html\n<!-- when $scope.myValue is truthy (element is hidden) -->\n<div ng-hide=\"myValue\" class=\"ng-hide\"></div>\n\n<!-- when $scope.myValue is falsy (element is visible) -->\n<div ng-hide=\"myValue\"></div>\n```\n\nWhen the ngHide expression evaluates to true then the .ng-hide CSS class is added to the class attribute\non the element causing it to become hidden. When false, the ng-hide CSS class is removed\nfrom the element causing the element not to appear hidden.\n\n<div class=\"alert alert-warning\">\n**Note:** Here is a list of values that ngHide will consider as a falsy value (case insensitive):<br />\n\"f\" / \"0\" / \"false\" / \"no\" / \"n\" / \"[]\"\n</div>\n\n## Why is !important used?\n\nYou may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector\ncan be easily overridden by heavier selectors. For example, something as simple\nas changing the display style on a HTML list item would make hidden elements appear visible.\nThis also becomes a bigger issue when dealing with CSS frameworks.\n\nBy using !important, the show and hide behavior will work as expected despite any clash between CSS selector\nspecificity (when !important isn't used with any conflicting styles). If a developer chooses to override the\nstyling to change how to hide an element then it is just a matter of using !important in their own CSS code.\n\n### Overriding .ng-hide\n\nBy default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change\nthe hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`\nclass in CSS:\n\n```css\n.ng-hide {\n  //this is just another form of hiding an element\n  display:block!important;\n  position:absolute;\n  top:-9999px;\n  left:-9999px;\n}\n```\n\nBy default you don't need to override in CSS anything and the animations will work around the display style.\n\n## A note about animations with ngHide\n\nAnimations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression\nis true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`\nCSS class is added and removed for you instead of your own CSS class.\n\n```css\n//\n//a working example can be found at the bottom of this page\n//\n.my-element.ng-hide-add, .my-element.ng-hide-remove {\n  transition:0.5s linear all;\n}\n\n.my-element.ng-hide-add { ... }\n.my-element.ng-hide-add.ng-hide-add-active { ... }\n.my-element.ng-hide-remove { ... }\n.my-element.ng-hide-remove.ng-hide-remove-active { ... }\n```\n\nKeep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display\nproperty to block during animation states--ngAnimate will handle the style toggling automatically for you.",
            "line": " public/libs/angular/angular.js:20528"
        },
        {
            "message": "Missing item type\nThe `ngStyle` directive allows you to set CSS style on an HTML element conditionally.",
            "line": " public/libs/angular/angular.js:20683"
        },
        {
            "message": "Missing item type\nThe `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.\nElements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location\nas specified in the template.\n\nThe directive itself works similar to ngInclude, however, instead of downloading template code (or loading it\nfrom the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element\nmatches the value obtained from the evaluated expression. In other words, you define a container element\n(where you place the directive), place an expression on the **`on=\"...\"` attribute**\n(or the **`ng-switch=\"...\"` attribute**), define any inner elements inside of the directive and place\na when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on\nexpression is evaluated. If a matching expression is not found via a when attribute then an element with the default\nattribute is displayed.\n\n<div class=\"alert alert-info\">\nBe aware that the attribute values to match against cannot be expressions. They are interpreted\nas literal string values to match against.\nFor example, **`ng-switch-when=\"someVal\"`** will match against the string `\"someVal\"` not against the\nvalue of the expression `$scope.someVal`.\n</div>",
            "line": " public/libs/angular/angular.js:20738"
        },
        {
            "message": "Missing item type\nDirective that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.\n\nAny existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.",
            "line": " public/libs/angular/angular.js:20938"
        },
        {
            "message": "Missing item type\nLoad the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the\ntemplate can be used by {@link ng.directive:ngInclude `ngInclude`},\n{@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the\n`<script>` element must be specified as `text/ng-template`, and a cache name for the template must be\nassigned through the element's `id`, which can then be used as a directive's `templateUrl`.",
            "line": " public/libs/angular/angular.js:21010"
        },
        {
            "message": "Missing item type\nHTML `SELECT` element with angular data-binding.\n\n# `ngOptions`\n\nThe `ngOptions` attribute can be used to dynamically generate a list of `<option>`\nelements for the `<select>` element using the array or object obtained by evaluating the\n`ngOptions` comprehension_expression.\n\nWhen an item in the `<select>` menu is selected, the array element or object property\nrepresented by the selected option will be bound to the model identified by the `ngModel`\ndirective.\n\n<div class=\"alert alert-warning\">\n**Note:** `ngModel` compares by reference, not value. This is important when binding to an\narray of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).\n</div>\n\nOptionally, a single hard-coded `<option>` element, with the value set to an empty string, can\nbe nested into the `<select>` element. This element will then represent the `null` or \"not selected\"\noption. See example below for demonstration.\n\n<div class=\"alert alert-warning\">\n**Note:** `ngOptions` provides an iterator facility for the `<option>` element which should be used instead\nof {@link ng.directive:ngRepeat ngRepeat} when you want the\n`select` model to be bound to a non-string value. This is because an option element can only\nbe bound to string values at present.\n</div>",
            "line": " public/libs/angular/angular.js:21060"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular-route/angular-route.js:1"
        },
        {
            "message": "Missing item type\n# ngRoute\n\nThe `ngRoute` module provides routing and deeplinking services and directives for angular apps.\n\n## Example\nSee {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n\n\n<div doc-module-components=\"ngRoute\"></div>",
            "line": " public/libs/angular-route/angular-route.js:8"
        },
        {
            "message": "Missing item type\nUsed for configuring routes.\n\n## Example\nSee {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n\n## Dependencies\nRequires the {@link ngRoute `ngRoute`} module to be installed.",
            "line": " public/libs/angular-route/angular-route.js:27"
        },
        {
            "message": "Missing item type\nAdds a new route definition to the `$route` service.",
            "line": " public/libs/angular-route/angular-route.js:49"
        },
        {
            "message": "Missing item type\nNormalizes the given path, returning a regular expression\nand the original path.\n\nInspired by pathRexp in visionmedia/express/lib/utils.js.",
            "line": " public/libs/angular-route/angular-route.js:170"
        },
        {
            "message": "Missing item type\nSets route definition that will be used on route change when no other route definition\nis matched.",
            "line": " public/libs/angular-route/angular-route.js:211"
        },
        {
            "message": "Missing item type\nBroadcasted before a route change. At this  point the route services starts\nresolving all of the dependencies needed for the route change to occur.\nTypically this involves fetching the view template as well as any dependencies\ndefined in `resolve` route property. Once  all of the dependencies are resolved\n`$routeChangeSuccess` is fired.",
            "line": " public/libs/angular-route/angular-route.js:372"
        },
        {
            "message": "Missing item type\nBroadcasted after a route dependencies are resolved.\n{@link ngRoute.directive:ngView ngView} listens for the directive\nto instantiate the controller and render the view.",
            "line": " public/libs/angular-route/angular-route.js:388"
        },
        {
            "message": "Missing item type\nBroadcasted if any of the resolve promises are rejected.",
            "line": " public/libs/angular-route/angular-route.js:403"
        },
        {
            "message": "Missing item type\nThe `reloadOnSearch` property has been set to false, and we are reusing the same\ninstance of the Controller.",
            "line": " public/libs/angular-route/angular-route.js:416"
        },
        {
            "message": "Missing item type\nCauses `$route` service to reload the current route even if\n{@link ng.$location $location} hasn't changed.\n\nAs a result of that, {@link ngRoute.directive:ngView ngView}\ncreates new scope, reinstantiates the controller.",
            "line": " public/libs/angular-route/angular-route.js:430"
        },
        {
            "message": "Missing item type\nCheck if the route matches the current url.\n\nInspired by match in\nvisionmedia/express/lib/router/router.js.",
            "line": " public/libs/angular-route/angular-route.js:453"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular-route/angular-route.js:563"
        },
        {
            "message": "Missing item type",
            "line": " public/libs/angular-route/angular-route.js:581"
        },
        {
            "message": "Missing item type\nThe `$routeParams` service allows you to retrieve the current set of route parameters.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.\n\nThe route parameters are a combination of {@link ng.$location `$location`}'s\n{@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.\nThe `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.\n\nIn case of parameter name collision, `path` params take precedence over `search` params.\n\nThe service guarantees that the identity of the `$routeParams` object will remain unchanged\n(but its properties will likely change) even when a route change occurs.\n\nNote that the `$routeParams` are only updated *after* a route change completes successfully.\nThis means that you cannot rely on `$routeParams` being correct in route resolve functions.\nInstead you can use `$route.current.params` to access the new route's parameters.",
            "line": " public/libs/angular-route/angular-route.js:605"
        },
        {
            "message": "Missing item type\n# Overview\n`ngView` is a directive that complements the {@link ngRoute.$route $route} service by\nincluding the rendered template of the current route into the main layout (`index.html`) file.\nEvery time the current route changes, the included view changes with it according to the\nconfiguration of the `$route` service.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.",
            "line": " public/libs/angular-route/angular-route.js:646"
        },
        {
            "message": "Missing item type\nEmitted every time the ngView content is reloaded.",
            "line": " public/libs/angular-route/angular-route.js:815"
        },
        {
            "message": "Missing item type\nCreate key-value caches of limited size",
            "line": " public/libs/jquery/dist/jquery.js:846"
        },
        {
            "message": "Missing item type\nMark a function for special use by Sizzle",
            "line": " public/libs/jquery/dist/jquery.js:866"
        },
        {
            "message": "Missing item type\nSupport testing using an element",
            "line": " public/libs/jquery/dist/jquery.js:875"
        },
        {
            "message": "Missing item type\nAdds the same handler for all of the specified attrs",
            "line": " public/libs/jquery/dist/jquery.js:896"
        },
        {
            "message": "Missing item type\nChecks document order of two siblings",
            "line": " public/libs/jquery/dist/jquery.js:910"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for input types",
            "line": " public/libs/jquery/dist/jquery.js:939"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for buttons",
            "line": " public/libs/jquery/dist/jquery.js:950"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for positionals",
            "line": " public/libs/jquery/dist/jquery.js:961"
        },
        {
            "message": "Missing item type\nChecks a node for validity as a Sizzle context",
            "line": " public/libs/jquery/dist/jquery.js:983"
        },
        {
            "message": "Missing item type\nDetects XML nodes",
            "line": " public/libs/jquery/dist/jquery.js:995"
        },
        {
            "message": "Missing item type\nSets document-related variables once based on the current document",
            "line": " public/libs/jquery/dist/jquery.js:1007"
        },
        {
            "message": "Missing item type\nDocument sorting and removing duplicates",
            "line": " public/libs/jquery/dist/jquery.js:1440"
        },
        {
            "message": "Missing item type\nUtility function for retrieving the text value of an array of DOM nodes",
            "line": " public/libs/jquery/dist/jquery.js:1473"
        },
        {
            "message": "Missing item type\nA low-level selection function that works with Sizzle's compiled\n selector functions",
            "line": " public/libs/jquery/dist/jquery.js:2440"
        },
        {
            "message": "Missing item type\nThe ready event handler and self cleanup method",
            "line": " public/libs/jquery/dist/jquery.js:3401"
        },
        {
            "message": "Missing item type\nDetermines whether an object can have data",
            "line": " public/libs/jquery/dist/jquery.js:3494"
        },
        {
            "message": "Missing item type\nRetrieve the actual display of a element",
            "line": " public/libs/jquery/dist/jquery.js:5454"
        },
        {
            "message": "Missing item type\nTry to determine the default display value of an element",
            "line": " public/libs/jquery/dist/jquery.js:5478"
        },
        {
            "message": "Missing item type\nLoad a url into a page",
            "line": " public/libs/jquery/dist/jquery.js:8823"
        },
        {
            "message": "Missing item type\nGets a window from an element",
            "line": " public/libs/jquery/dist/jquery.js:8897"
        },
        {
            "message": "Missing item type\nLoad a url into a page",
            "line": " public/libs/jquery/src/ajax/load.js:15"
        },
        {
            "message": "Missing item type\nThe ready event handler and self cleanup method",
            "line": " public/libs/jquery/src/core/ready.js:61"
        },
        {
            "message": "Missing item type\nRetrieve the actual display of a element",
            "line": " public/libs/jquery/src/css/defaultDisplay.js:9"
        },
        {
            "message": "Missing item type\nTry to determine the default display value of an element",
            "line": " public/libs/jquery/src/css/defaultDisplay.js:33"
        },
        {
            "message": "Missing item type\nDetermines whether an object can have data",
            "line": " public/libs/jquery/src/data/accepts.js:5"
        },
        {
            "message": "Missing item type\nCreate key-value caches of limited size",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:297"
        },
        {
            "message": "Missing item type\nMark a function for special use by Sizzle",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:317"
        },
        {
            "message": "Missing item type\nSupport testing using an element",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:326"
        },
        {
            "message": "Missing item type\nAdds the same handler for all of the specified attrs",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:347"
        },
        {
            "message": "Missing item type\nChecks document order of two siblings",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:361"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for input types",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:390"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for buttons",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:401"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for positionals",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:412"
        },
        {
            "message": "Missing item type\nChecks a node for validity as a Sizzle context",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:434"
        },
        {
            "message": "Missing item type\nDetects XML nodes",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:446"
        },
        {
            "message": "Missing item type\nSets document-related variables once based on the current document",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:458"
        },
        {
            "message": "Missing item type\nDocument sorting and removing duplicates",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:891"
        },
        {
            "message": "Missing item type\nUtility function for retrieving the text value of an array of DOM nodes",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:924"
        },
        {
            "message": "Missing item type\nA low-level selection function that works with Sizzle's compiled\n selector functions",
            "line": " public/libs/jquery/src/sizzle/dist/sizzle.js:1891"
        },
        {
            "message": "Missing item type\nGets a window from an element",
            "line": " public/libs/jquery/src/offset.js:17"
        }
    ]
}